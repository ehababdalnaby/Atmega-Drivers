
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000020ee  00002162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e39  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ef  00000000  00000000  00004171  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001000  00000000  00000000  00004b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000390  00000000  00000000  00005b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ef  00000000  00000000  00005ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000073a  00000000  00000000  000065df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00006d19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#error define includes.h file
#endif


int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	a3 97       	sbiw	r28, 0x23	; 35
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	
	LCD_init();
      a6:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_init>
	u8 hum[10],temp[10];
	BOOL checkSensor;
		while(1)
		{
			checkSensor=DHT_Represent(hum,temp);
      aa:	9e 01       	movw	r18, r28
      ac:	26 5e       	subi	r18, 0xE6	; 230
      ae:	3f 4f       	sbci	r19, 0xFF	; 255
      b0:	ce 01       	movw	r24, r28
      b2:	40 96       	adiw	r24, 0x10	; 16
      b4:	b9 01       	movw	r22, r18
      b6:	0e 94 cc 02 	call	0x598	; 0x598 <DHT_Represent>
      ba:	89 83       	std	Y+1, r24	; 0x01
			if(checkSensor==1)
      bc:	89 81       	ldd	r24, Y+1	; 0x01
      be:	81 30       	cpi	r24, 0x01	; 1
      c0:	09 f0       	breq	.+2      	; 0xc4 <main+0x32>
      c2:	87 c0       	rjmp	.+270    	; 0x1d2 <main+0x140>
			{
				disp_strXY(1,1,hum);
      c4:	ce 01       	movw	r24, r28
      c6:	40 96       	adiw	r24, 0x10	; 16
      c8:	ac 01       	movw	r20, r24
      ca:	61 e0       	ldi	r22, 0x01	; 1
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	0e 94 01 09 	call	0x1202	; 0x1202 <disp_strXY>
				disp_strXY(2,1,temp);
      d2:	ce 01       	movw	r24, r28
      d4:	4a 96       	adiw	r24, 0x1a	; 26
      d6:	ac 01       	movw	r20, r24
      d8:	61 e0       	ldi	r22, 0x01	; 1
      da:	82 e0       	ldi	r24, 0x02	; 2
      dc:	0e 94 01 09 	call	0x1202	; 0x1202 <disp_strXY>
				disp_strXY(1,10,"bb");
      e0:	40 e6       	ldi	r20, 0x60	; 96
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	6a e0       	ldi	r22, 0x0A	; 10
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	0e 94 01 09 	call	0x1202	; 0x1202 <disp_strXY>
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	aa ef       	ldi	r26, 0xFA	; 250
      f2:	b4 e4       	ldi	r27, 0x44	; 68
      f4:	8a 83       	std	Y+2, r24	; 0x02
      f6:	9b 83       	std	Y+3, r25	; 0x03
      f8:	ac 83       	std	Y+4, r26	; 0x04
      fa:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	4a e7       	ldi	r20, 0x7A	; 122
     102:	55 e4       	ldi	r21, 0x45	; 69
     104:	6a 81       	ldd	r22, Y+2	; 0x02
     106:	7b 81       	ldd	r23, Y+3	; 0x03
     108:	8c 81       	ldd	r24, Y+4	; 0x04
     10a:	9d 81       	ldd	r25, Y+5	; 0x05
     10c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     110:	dc 01       	movw	r26, r24
     112:	cb 01       	movw	r24, r22
     114:	8e 83       	std	Y+6, r24	; 0x06
     116:	9f 83       	std	Y+7, r25	; 0x07
     118:	a8 87       	std	Y+8, r26	; 0x08
     11a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	40 e8       	ldi	r20, 0x80	; 128
     122:	5f e3       	ldi	r21, 0x3F	; 63
     124:	6e 81       	ldd	r22, Y+6	; 0x06
     126:	7f 81       	ldd	r23, Y+7	; 0x07
     128:	88 85       	ldd	r24, Y+8	; 0x08
     12a:	99 85       	ldd	r25, Y+9	; 0x09
     12c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     130:	88 23       	and	r24, r24
     132:	2c f4       	brge	.+10     	; 0x13e <main+0xac>
		__ticks = 1;
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	9b 87       	std	Y+11, r25	; 0x0b
     13a:	8a 87       	std	Y+10, r24	; 0x0a
     13c:	3f c0       	rjmp	.+126    	; 0x1bc <main+0x12a>
	else if (__tmp > 65535)
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	3f ef       	ldi	r19, 0xFF	; 255
     142:	4f e7       	ldi	r20, 0x7F	; 127
     144:	57 e4       	ldi	r21, 0x47	; 71
     146:	6e 81       	ldd	r22, Y+6	; 0x06
     148:	7f 81       	ldd	r23, Y+7	; 0x07
     14a:	88 85       	ldd	r24, Y+8	; 0x08
     14c:	99 85       	ldd	r25, Y+9	; 0x09
     14e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     152:	18 16       	cp	r1, r24
     154:	4c f5       	brge	.+82     	; 0x1a8 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	40 e2       	ldi	r20, 0x20	; 32
     15c:	51 e4       	ldi	r21, 0x41	; 65
     15e:	6a 81       	ldd	r22, Y+2	; 0x02
     160:	7b 81       	ldd	r23, Y+3	; 0x03
     162:	8c 81       	ldd	r24, Y+4	; 0x04
     164:	9d 81       	ldd	r25, Y+5	; 0x05
     166:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     16a:	dc 01       	movw	r26, r24
     16c:	cb 01       	movw	r24, r22
     16e:	bc 01       	movw	r22, r24
     170:	cd 01       	movw	r24, r26
     172:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     176:	dc 01       	movw	r26, r24
     178:	cb 01       	movw	r24, r22
     17a:	9b 87       	std	Y+11, r25	; 0x0b
     17c:	8a 87       	std	Y+10, r24	; 0x0a
     17e:	0f c0       	rjmp	.+30     	; 0x19e <main+0x10c>
     180:	80 e9       	ldi	r24, 0x90	; 144
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	9d 87       	std	Y+13, r25	; 0x0d
     186:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     188:	8c 85       	ldd	r24, Y+12	; 0x0c
     18a:	9d 85       	ldd	r25, Y+13	; 0x0d
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <main+0xfa>
     190:	9d 87       	std	Y+13, r25	; 0x0d
     192:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     194:	8a 85       	ldd	r24, Y+10	; 0x0a
     196:	9b 85       	ldd	r25, Y+11	; 0x0b
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	9b 87       	std	Y+11, r25	; 0x0b
     19c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19e:	8a 85       	ldd	r24, Y+10	; 0x0a
     1a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     1a2:	89 2b       	or	r24, r25
     1a4:	69 f7       	brne	.-38     	; 0x180 <main+0xee>
     1a6:	1b c0       	rjmp	.+54     	; 0x1de <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a8:	6e 81       	ldd	r22, Y+6	; 0x06
     1aa:	7f 81       	ldd	r23, Y+7	; 0x07
     1ac:	88 85       	ldd	r24, Y+8	; 0x08
     1ae:	99 85       	ldd	r25, Y+9	; 0x09
     1b0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	9b 87       	std	Y+11, r25	; 0x0b
     1ba:	8a 87       	std	Y+10, r24	; 0x0a
     1bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     1be:	9b 85       	ldd	r25, Y+11	; 0x0b
     1c0:	9f 87       	std	Y+15, r25	; 0x0f
     1c2:	8e 87       	std	Y+14, r24	; 0x0e
     1c4:	8e 85       	ldd	r24, Y+14	; 0x0e
     1c6:	9f 85       	ldd	r25, Y+15	; 0x0f
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x136>
     1cc:	9f 87       	std	Y+15, r25	; 0x0f
     1ce:	8e 87       	std	Y+14, r24	; 0x0e
     1d0:	6c cf       	rjmp	.-296    	; 0xaa <main+0x18>
				_delay_ms(2000);
			}
			else
			{
				disp_strXY(1,1,"7ambozo");
     1d2:	43 e6       	ldi	r20, 0x63	; 99
     1d4:	50 e0       	ldi	r21, 0x00	; 0
     1d6:	61 e0       	ldi	r22, 0x01	; 1
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 01 09 	call	0x1202	; 0x1202 <disp_strXY>
			}
		}
     1de:	65 cf       	rjmp	.-310    	; 0xaa <main+0x18>

000001e0 <DHT_start>:
 *  Author: Mahmoud-PC
 */ 
#include "DHT.h"

void DHT_start(void)
{
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	2e 97       	sbiw	r28, 0x0e	; 14
     1ea:	0f b6       	in	r0, 0x3f	; 63
     1ec:	f8 94       	cli
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	cd bf       	out	0x3d, r28	; 61
	pinDirection(DHT_PIN,OUTPUT);		
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	8f e1       	ldi	r24, 0x1F	; 31
     1f8:	0e 94 11 0a 	call	0x1422	; 0x1422 <pinDirection>
	writePin(DHT_PIN,LOW);				//apply 0 to start the sensor
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	8f e1       	ldi	r24, 0x1F	; 31
     200:	0e 94 1a 09 	call	0x1234	; 0x1234 <writePin>
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	a0 ea       	ldi	r26, 0xA0	; 160
     20a:	b1 e4       	ldi	r27, 0x41	; 65
     20c:	89 83       	std	Y+1, r24	; 0x01
     20e:	9a 83       	std	Y+2, r25	; 0x02
     210:	ab 83       	std	Y+3, r26	; 0x03
     212:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	4a e7       	ldi	r20, 0x7A	; 122
     21a:	55 e4       	ldi	r21, 0x45	; 69
     21c:	69 81       	ldd	r22, Y+1	; 0x01
     21e:	7a 81       	ldd	r23, Y+2	; 0x02
     220:	8b 81       	ldd	r24, Y+3	; 0x03
     222:	9c 81       	ldd	r25, Y+4	; 0x04
     224:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     228:	dc 01       	movw	r26, r24
     22a:	cb 01       	movw	r24, r22
     22c:	8d 83       	std	Y+5, r24	; 0x05
     22e:	9e 83       	std	Y+6, r25	; 0x06
     230:	af 83       	std	Y+7, r26	; 0x07
     232:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e8       	ldi	r20, 0x80	; 128
     23a:	5f e3       	ldi	r21, 0x3F	; 63
     23c:	6d 81       	ldd	r22, Y+5	; 0x05
     23e:	7e 81       	ldd	r23, Y+6	; 0x06
     240:	8f 81       	ldd	r24, Y+7	; 0x07
     242:	98 85       	ldd	r25, Y+8	; 0x08
     244:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     248:	88 23       	and	r24, r24
     24a:	2c f4       	brge	.+10     	; 0x256 <DHT_start+0x76>
		__ticks = 1;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	9a 87       	std	Y+10, r25	; 0x0a
     252:	89 87       	std	Y+9, r24	; 0x09
     254:	3f c0       	rjmp	.+126    	; 0x2d4 <DHT_start+0xf4>
	else if (__tmp > 65535)
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	3f ef       	ldi	r19, 0xFF	; 255
     25a:	4f e7       	ldi	r20, 0x7F	; 127
     25c:	57 e4       	ldi	r21, 0x47	; 71
     25e:	6d 81       	ldd	r22, Y+5	; 0x05
     260:	7e 81       	ldd	r23, Y+6	; 0x06
     262:	8f 81       	ldd	r24, Y+7	; 0x07
     264:	98 85       	ldd	r25, Y+8	; 0x08
     266:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     26a:	18 16       	cp	r1, r24
     26c:	4c f5       	brge	.+82     	; 0x2c0 <DHT_start+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	40 e2       	ldi	r20, 0x20	; 32
     274:	51 e4       	ldi	r21, 0x41	; 65
     276:	69 81       	ldd	r22, Y+1	; 0x01
     278:	7a 81       	ldd	r23, Y+2	; 0x02
     27a:	8b 81       	ldd	r24, Y+3	; 0x03
     27c:	9c 81       	ldd	r25, Y+4	; 0x04
     27e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     282:	dc 01       	movw	r26, r24
     284:	cb 01       	movw	r24, r22
     286:	bc 01       	movw	r22, r24
     288:	cd 01       	movw	r24, r26
     28a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     28e:	dc 01       	movw	r26, r24
     290:	cb 01       	movw	r24, r22
     292:	9a 87       	std	Y+10, r25	; 0x0a
     294:	89 87       	std	Y+9, r24	; 0x09
     296:	0f c0       	rjmp	.+30     	; 0x2b6 <DHT_start+0xd6>
     298:	80 e9       	ldi	r24, 0x90	; 144
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	9c 87       	std	Y+12, r25	; 0x0c
     29e:	8b 87       	std	Y+11, r24	; 0x0b
     2a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <DHT_start+0xc4>
     2a8:	9c 87       	std	Y+12, r25	; 0x0c
     2aa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ac:	89 85       	ldd	r24, Y+9	; 0x09
     2ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	9a 87       	std	Y+10, r25	; 0x0a
     2b4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b6:	89 85       	ldd	r24, Y+9	; 0x09
     2b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ba:	89 2b       	or	r24, r25
     2bc:	69 f7       	brne	.-38     	; 0x298 <DHT_start+0xb8>
     2be:	14 c0       	rjmp	.+40     	; 0x2e8 <DHT_start+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2c0:	6d 81       	ldd	r22, Y+5	; 0x05
     2c2:	7e 81       	ldd	r23, Y+6	; 0x06
     2c4:	8f 81       	ldd	r24, Y+7	; 0x07
     2c6:	98 85       	ldd	r25, Y+8	; 0x08
     2c8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     2cc:	dc 01       	movw	r26, r24
     2ce:	cb 01       	movw	r24, r22
     2d0:	9a 87       	std	Y+10, r25	; 0x0a
     2d2:	89 87       	std	Y+9, r24	; 0x09
     2d4:	89 85       	ldd	r24, Y+9	; 0x09
     2d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d8:	9e 87       	std	Y+14, r25	; 0x0e
     2da:	8d 87       	std	Y+13, r24	; 0x0d
     2dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     2de:	9e 85       	ldd	r25, Y+14	; 0x0e
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <DHT_start+0x100>
     2e4:	9e 87       	std	Y+14, r25	; 0x0e
     2e6:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(20);						
	writePin(DHT_PIN,HIGH);				//apply 0 to start the sensor
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	8f e1       	ldi	r24, 0x1F	; 31
     2ec:	0e 94 1a 09 	call	0x1234	; 0x1234 <writePin>
}
     2f0:	2e 96       	adiw	r28, 0x0e	; 14
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <DHT_read>:

u8 DHT_read(void)
{
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	a3 97       	sbiw	r28, 0x23	; 35
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
	u8 bitLogic=0 ,i=0;
     316:	19 82       	std	Y+1, r1	; 0x01
     318:	1a 82       	std	Y+2, r1	; 0x02
	for (i=0;i<8;i++)
     31a:	1a 82       	std	Y+2, r1	; 0x02
     31c:	12 c1       	rjmp	.+548    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
	{
		while (readPin(DHT_PIN)==0);
     31e:	00 00       	nop
     320:	8f e1       	ldi	r24, 0x1F	; 31
     322:	0e 94 08 0b 	call	0x1610	; 0x1610 <readPin>
     326:	88 23       	and	r24, r24
     328:	d9 f3       	breq	.-10     	; 0x320 <DHT_read+0x1e>
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	a0 ef       	ldi	r26, 0xF0	; 240
     330:	b1 e4       	ldi	r27, 0x41	; 65
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
     336:	ad 83       	std	Y+5, r26	; 0x05
     338:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     33a:	2b ea       	ldi	r18, 0xAB	; 171
     33c:	3a ea       	ldi	r19, 0xAA	; 170
     33e:	4a ea       	ldi	r20, 0xAA	; 170
     340:	50 e4       	ldi	r21, 0x40	; 64
     342:	6b 81       	ldd	r22, Y+3	; 0x03
     344:	7c 81       	ldd	r23, Y+4	; 0x04
     346:	8d 81       	ldd	r24, Y+5	; 0x05
     348:	9e 81       	ldd	r25, Y+6	; 0x06
     34a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	8f 83       	std	Y+7, r24	; 0x07
     354:	98 87       	std	Y+8, r25	; 0x08
     356:	a9 87       	std	Y+9, r26	; 0x09
     358:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e8       	ldi	r20, 0x80	; 128
     360:	50 e4       	ldi	r21, 0x40	; 64
     362:	6b 81       	ldd	r22, Y+3	; 0x03
     364:	7c 81       	ldd	r23, Y+4	; 0x04
     366:	8d 81       	ldd	r24, Y+5	; 0x05
     368:	9e 81       	ldd	r25, Y+6	; 0x06
     36a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	8b 87       	std	Y+11, r24	; 0x0b
     374:	9c 87       	std	Y+12, r25	; 0x0c
     376:	ad 87       	std	Y+13, r26	; 0x0d
     378:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	40 e8       	ldi	r20, 0x80	; 128
     380:	5f e3       	ldi	r21, 0x3F	; 63
     382:	6f 81       	ldd	r22, Y+7	; 0x07
     384:	78 85       	ldd	r23, Y+8	; 0x08
     386:	89 85       	ldd	r24, Y+9	; 0x09
     388:	9a 85       	ldd	r25, Y+10	; 0x0a
     38a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     38e:	88 23       	and	r24, r24
     390:	1c f4       	brge	.+6      	; 0x398 <DHT_read+0x96>
		__ticks = 1;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	8f 87       	std	Y+15, r24	; 0x0f
     396:	b6 c0       	rjmp	.+364    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
	else if (__tmp2 > 65535)
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	3f ef       	ldi	r19, 0xFF	; 255
     39c:	4f e7       	ldi	r20, 0x7F	; 127
     39e:	57 e4       	ldi	r21, 0x47	; 71
     3a0:	6b 85       	ldd	r22, Y+11	; 0x0b
     3a2:	7c 85       	ldd	r23, Y+12	; 0x0c
     3a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     3a6:	9e 85       	ldd	r25, Y+14	; 0x0e
     3a8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     3ac:	18 16       	cp	r1, r24
     3ae:	0c f0       	brlt	.+2      	; 0x3b2 <DHT_read+0xb0>
     3b0:	7f c0       	rjmp	.+254    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	{
		_delay_ms(__us / 1000.0);
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	4a e7       	ldi	r20, 0x7A	; 122
     3b8:	54 e4       	ldi	r21, 0x44	; 68
     3ba:	6b 81       	ldd	r22, Y+3	; 0x03
     3bc:	7c 81       	ldd	r23, Y+4	; 0x04
     3be:	8d 81       	ldd	r24, Y+5	; 0x05
     3c0:	9e 81       	ldd	r25, Y+6	; 0x06
     3c2:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__divsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	88 8b       	std	Y+16, r24	; 0x10
     3cc:	99 8b       	std	Y+17, r25	; 0x11
     3ce:	aa 8b       	std	Y+18, r26	; 0x12
     3d0:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	4a e7       	ldi	r20, 0x7A	; 122
     3d8:	55 e4       	ldi	r21, 0x45	; 69
     3da:	68 89       	ldd	r22, Y+16	; 0x10
     3dc:	79 89       	ldd	r23, Y+17	; 0x11
     3de:	8a 89       	ldd	r24, Y+18	; 0x12
     3e0:	9b 89       	ldd	r25, Y+19	; 0x13
     3e2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     3e6:	dc 01       	movw	r26, r24
     3e8:	cb 01       	movw	r24, r22
     3ea:	8c 8b       	std	Y+20, r24	; 0x14
     3ec:	9d 8b       	std	Y+21, r25	; 0x15
     3ee:	ae 8b       	std	Y+22, r26	; 0x16
     3f0:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	40 e8       	ldi	r20, 0x80	; 128
     3f8:	5f e3       	ldi	r21, 0x3F	; 63
     3fa:	6c 89       	ldd	r22, Y+20	; 0x14
     3fc:	7d 89       	ldd	r23, Y+21	; 0x15
     3fe:	8e 89       	ldd	r24, Y+22	; 0x16
     400:	9f 89       	ldd	r25, Y+23	; 0x17
     402:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     406:	88 23       	and	r24, r24
     408:	2c f4       	brge	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		__ticks = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	99 8f       	std	Y+25, r25	; 0x19
     410:	88 8f       	std	Y+24, r24	; 0x18
     412:	41 c0       	rjmp	.+130    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	else if (__tmp > 65535)
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	3f ef       	ldi	r19, 0xFF	; 255
     418:	4f e7       	ldi	r20, 0x7F	; 127
     41a:	57 e4       	ldi	r21, 0x47	; 71
     41c:	6c 89       	ldd	r22, Y+20	; 0x14
     41e:	7d 89       	ldd	r23, Y+21	; 0x15
     420:	8e 89       	ldd	r24, Y+22	; 0x16
     422:	9f 89       	ldd	r25, Y+23	; 0x17
     424:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     428:	18 16       	cp	r1, r24
     42a:	5c f5       	brge	.+86     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e2       	ldi	r20, 0x20	; 32
     432:	51 e4       	ldi	r21, 0x41	; 65
     434:	68 89       	ldd	r22, Y+16	; 0x10
     436:	79 89       	ldd	r23, Y+17	; 0x11
     438:	8a 89       	ldd	r24, Y+18	; 0x12
     43a:	9b 89       	ldd	r25, Y+19	; 0x13
     43c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     440:	dc 01       	movw	r26, r24
     442:	cb 01       	movw	r24, r22
     444:	bc 01       	movw	r22, r24
     446:	cd 01       	movw	r24, r26
     448:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	99 8f       	std	Y+25, r25	; 0x19
     452:	88 8f       	std	Y+24, r24	; 0x18
     454:	0f c0       	rjmp	.+30     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     456:	80 e9       	ldi	r24, 0x90	; 144
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	9b 8f       	std	Y+27, r25	; 0x1b
     45c:	8a 8f       	std	Y+26, r24	; 0x1a
     45e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     460:	9b 8d       	ldd	r25, Y+27	; 0x1b
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     466:	9b 8f       	std	Y+27, r25	; 0x1b
     468:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     46a:	88 8d       	ldd	r24, Y+24	; 0x18
     46c:	99 8d       	ldd	r25, Y+25	; 0x19
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	99 8f       	std	Y+25, r25	; 0x19
     472:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     474:	88 8d       	ldd	r24, Y+24	; 0x18
     476:	99 8d       	ldd	r25, Y+25	; 0x19
     478:	89 2b       	or	r24, r25
     47a:	69 f7       	brne	.-38     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     47c:	8b a1       	ldd	r24, Y+35	; 0x23
     47e:	8f 87       	std	Y+15, r24	; 0x0f
     480:	41 c0       	rjmp	.+130    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     482:	6c 89       	ldd	r22, Y+20	; 0x14
     484:	7d 89       	ldd	r23, Y+21	; 0x15
     486:	8e 89       	ldd	r24, Y+22	; 0x16
     488:	9f 89       	ldd	r25, Y+23	; 0x17
     48a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	99 8f       	std	Y+25, r25	; 0x19
     494:	88 8f       	std	Y+24, r24	; 0x18
     496:	88 8d       	ldd	r24, Y+24	; 0x18
     498:	99 8d       	ldd	r25, Y+25	; 0x19
     49a:	9d 8f       	std	Y+29, r25	; 0x1d
     49c:	8c 8f       	std	Y+28, r24	; 0x1c
     49e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a6:	9d 8f       	std	Y+29, r25	; 0x1d
     4a8:	8c 8f       	std	Y+28, r24	; 0x1c
     4aa:	8b a1       	ldd	r24, Y+35	; 0x23
     4ac:	8f 87       	std	Y+15, r24	; 0x0f
     4ae:	2a c0       	rjmp	.+84     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	4f e7       	ldi	r20, 0x7F	; 127
     4b6:	53 e4       	ldi	r21, 0x43	; 67
     4b8:	6f 81       	ldd	r22, Y+7	; 0x07
     4ba:	78 85       	ldd	r23, Y+8	; 0x08
     4bc:	89 85       	ldd	r24, Y+9	; 0x09
     4be:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     4c4:	18 16       	cp	r1, r24
     4c6:	ac f4       	brge	.+42     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     4c8:	6b 85       	ldd	r22, Y+11	; 0x0b
     4ca:	7c 85       	ldd	r23, Y+12	; 0x0c
     4cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     4ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     4d0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     4d4:	dc 01       	movw	r26, r24
     4d6:	cb 01       	movw	r24, r22
     4d8:	9f 8f       	std	Y+31, r25	; 0x1f
     4da:	8e 8f       	std	Y+30, r24	; 0x1e
     4dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4de:	9f 8d       	ldd	r25, Y+31	; 0x1f
     4e0:	99 a3       	std	Y+33, r25	; 0x21
     4e2:	88 a3       	std	Y+32, r24	; 0x20
     4e4:	88 a1       	ldd	r24, Y+32	; 0x20
     4e6:	99 a1       	ldd	r25, Y+33	; 0x21
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4ec:	99 a3       	std	Y+33, r25	; 0x21
     4ee:	88 a3       	std	Y+32, r24	; 0x20
     4f0:	0f c0       	rjmp	.+30     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4f2:	6f 81       	ldd	r22, Y+7	; 0x07
     4f4:	78 85       	ldd	r23, Y+8	; 0x08
     4f6:	89 85       	ldd	r24, Y+9	; 0x09
     4f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4fa:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	8f 87       	std	Y+15, r24	; 0x0f
     504:	8f 85       	ldd	r24, Y+15	; 0x0f
     506:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     508:	8a a1       	ldd	r24, Y+34	; 0x22
     50a:	8a 95       	dec	r24
     50c:	f1 f7       	brne	.-4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     50e:	8a a3       	std	Y+34, r24	; 0x22
		_delay_us(30);
		if (readPin(DHT_PIN)==0)
     510:	8f e1       	ldi	r24, 0x1F	; 31
     512:	0e 94 08 0b 	call	0x1610	; 0x1610 <readPin>
     516:	88 23       	and	r24, r24
     518:	21 f4       	brne	.+8      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
		{
			bitLogic=bitLogic<<1;
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	88 0f       	add	r24, r24
     51e:	89 83       	std	Y+1, r24	; 0x01
     520:	07 c0       	rjmp	.+14     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		}
		else
		{
			bitLogic=((bitLogic<<1)|0x01);
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	81 60       	ori	r24, 0x01	; 1
     52e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		while(readPin(DHT_PIN));
     530:	00 00       	nop
     532:	8f e1       	ldi	r24, 0x1F	; 31
     534:	0e 94 08 0b 	call	0x1610	; 0x1610 <readPin>
     538:	88 23       	and	r24, r24
     53a:	d9 f7       	brne	.-10     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     53c:	8a 81       	ldd	r24, Y+2	; 0x02
     53e:	8f 5f       	subi	r24, 0xFF	; 255
     540:	8a 83       	std	Y+2, r24	; 0x02
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	88 30       	cpi	r24, 0x08	; 8
     546:	08 f4       	brcc	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     548:	ea ce       	rjmp	.-556    	; 0x31e <DHT_read+0x1c>
		}
		
		while(readPin(DHT_PIN));
		
	}
	return bitLogic;
     54a:	89 81       	ldd	r24, Y+1	; 0x01
}
     54c:	a3 96       	adiw	r28, 0x23	; 35
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <DHT_Response>:

void DHT_Response(void)
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
	pinDirection(DHT_PIN,INPUT);
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	8f e1       	ldi	r24, 0x1F	; 31
     56a:	0e 94 11 0a 	call	0x1422	; 0x1422 <pinDirection>
	while(readPin(DHT_PIN));
     56e:	00 00       	nop
     570:	8f e1       	ldi	r24, 0x1F	; 31
     572:	0e 94 08 0b 	call	0x1610	; 0x1610 <readPin>
     576:	88 23       	and	r24, r24
     578:	d9 f7       	brne	.-10     	; 0x570 <DHT_Response+0x12>
	while(!readPin(DHT_PIN));
     57a:	00 00       	nop
     57c:	8f e1       	ldi	r24, 0x1F	; 31
     57e:	0e 94 08 0b 	call	0x1610	; 0x1610 <readPin>
     582:	88 23       	and	r24, r24
     584:	d9 f3       	breq	.-10     	; 0x57c <DHT_Response+0x1e>
	while(readPin(DHT_PIN));
     586:	00 00       	nop
     588:	8f e1       	ldi	r24, 0x1F	; 31
     58a:	0e 94 08 0b 	call	0x1610	; 0x1610 <readPin>
     58e:	88 23       	and	r24, r24
     590:	d9 f7       	brne	.-10     	; 0x588 <DHT_Response+0x2a>
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <DHT_Represent>:

BOOL DHT_Represent(u8* hum,u8* temp)
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	65 97       	sbiw	r28, 0x15	; 21
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	9b 8b       	std	Y+19, r25	; 0x13
     5ae:	8a 8b       	std	Y+18, r24	; 0x12
     5b0:	7d 8b       	std	Y+21, r23	; 0x15
     5b2:	6c 8b       	std	Y+20, r22	; 0x14
	u16 temp_1=0,hum_1=0;
     5b4:	1a 82       	std	Y+2, r1	; 0x02
     5b6:	19 82       	std	Y+1, r1	; 0x01
     5b8:	1c 82       	std	Y+4, r1	; 0x04
     5ba:	1b 82       	std	Y+3, r1	; 0x03
	float tempF=0,humF=0;
     5bc:	1d 82       	std	Y+5, r1	; 0x05
     5be:	1e 82       	std	Y+6, r1	; 0x06
     5c0:	1f 82       	std	Y+7, r1	; 0x07
     5c2:	18 86       	std	Y+8, r1	; 0x08
     5c4:	19 86       	std	Y+9, r1	; 0x09
     5c6:	1a 86       	std	Y+10, r1	; 0x0a
     5c8:	1b 86       	std	Y+11, r1	; 0x0b
     5ca:	1c 86       	std	Y+12, r1	; 0x0c
	u8 humidity_I = 0 , humidity_D = 0, temp_I = 0, temp_D = 0 , sumCheck = 0;
     5cc:	1d 86       	std	Y+13, r1	; 0x0d
     5ce:	1e 86       	std	Y+14, r1	; 0x0e
     5d0:	1f 86       	std	Y+15, r1	; 0x0f
     5d2:	18 8a       	std	Y+16, r1	; 0x10
     5d4:	19 8a       	std	Y+17, r1	; 0x11
	DHT_start();
     5d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DHT_start>
	DHT_Response();
     5da:	0e 94 af 02 	call	0x55e	; 0x55e <DHT_Response>
	humidity_I=DHT_read();
     5de:	0e 94 81 01 	call	0x302	; 0x302 <DHT_read>
     5e2:	8d 87       	std	Y+13, r24	; 0x0d
	humidity_D=DHT_read();
     5e4:	0e 94 81 01 	call	0x302	; 0x302 <DHT_read>
     5e8:	8e 87       	std	Y+14, r24	; 0x0e
	temp_I=DHT_read();
     5ea:	0e 94 81 01 	call	0x302	; 0x302 <DHT_read>
     5ee:	8f 87       	std	Y+15, r24	; 0x0f
	temp_D=DHT_read();
     5f0:	0e 94 81 01 	call	0x302	; 0x302 <DHT_read>
     5f4:	88 8b       	std	Y+16, r24	; 0x10
	sumCheck=DHT_read();
     5f6:	0e 94 81 01 	call	0x302	; 0x302 <DHT_read>
     5fa:	89 8b       	std	Y+17, r24	; 0x11
	if( (humidity_I+humidity_D+temp_I+temp_D) == sumCheck )
     5fc:	8d 85       	ldd	r24, Y+13	; 0x0d
     5fe:	28 2f       	mov	r18, r24
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	8e 85       	ldd	r24, Y+14	; 0x0e
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	28 0f       	add	r18, r24
     60a:	39 1f       	adc	r19, r25
     60c:	8f 85       	ldd	r24, Y+15	; 0x0f
     60e:	88 2f       	mov	r24, r24
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	28 0f       	add	r18, r24
     614:	39 1f       	adc	r19, r25
     616:	88 89       	ldd	r24, Y+16	; 0x10
     618:	88 2f       	mov	r24, r24
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	28 0f       	add	r18, r24
     61e:	39 1f       	adc	r19, r25
     620:	89 89       	ldd	r24, Y+17	; 0x11
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	28 17       	cp	r18, r24
     628:	39 07       	cpc	r19, r25
     62a:	09 f0       	breq	.+2      	; 0x62e <DHT_Represent+0x96>
     62c:	86 c0       	rjmp	.+268    	; 0x73a <DHT_Represent+0x1a2>
	{
		hum_1=((humidity_I<<8)|humidity_D);
     62e:	8d 85       	ldd	r24, Y+13	; 0x0d
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	38 2f       	mov	r19, r24
     636:	22 27       	eor	r18, r18
     638:	8e 85       	ldd	r24, Y+14	; 0x0e
     63a:	88 2f       	mov	r24, r24
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	82 2b       	or	r24, r18
     640:	93 2b       	or	r25, r19
     642:	9c 83       	std	Y+4, r25	; 0x04
     644:	8b 83       	std	Y+3, r24	; 0x03
		temp_1=((temp_I<<8)|temp_D);
     646:	8f 85       	ldd	r24, Y+15	; 0x0f
     648:	88 2f       	mov	r24, r24
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	38 2f       	mov	r19, r24
     64e:	22 27       	eor	r18, r18
     650:	88 89       	ldd	r24, Y+16	; 0x10
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	82 2b       	or	r24, r18
     658:	93 2b       	or	r25, r19
     65a:	9a 83       	std	Y+2, r25	; 0x02
     65c:	89 83       	std	Y+1, r24	; 0x01
// 		*hum=((float)(hum_1)/10);
// 		*temp=((float)(temp_1)/10);
	tempF=((float)(temp_1)/10);
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	cc 01       	movw	r24, r24
     664:	a0 e0       	ldi	r26, 0x00	; 0
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	bc 01       	movw	r22, r24
     66a:	cd 01       	movw	r24, r26
     66c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__floatunsisf>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e2       	ldi	r20, 0x20	; 32
     67a:	51 e4       	ldi	r21, 0x41	; 65
     67c:	bc 01       	movw	r22, r24
     67e:	cd 01       	movw	r24, r26
     680:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__divsf3>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	8d 83       	std	Y+5, r24	; 0x05
     68a:	9e 83       	std	Y+6, r25	; 0x06
     68c:	af 83       	std	Y+7, r26	; 0x07
     68e:	b8 87       	std	Y+8, r27	; 0x08
	humF=((float)(hum_1)/10);
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	9c 81       	ldd	r25, Y+4	; 0x04
     694:	cc 01       	movw	r24, r24
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	bc 01       	movw	r22, r24
     69c:	cd 01       	movw	r24, r26
     69e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__floatunsisf>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e2       	ldi	r20, 0x20	; 32
     6ac:	51 e4       	ldi	r21, 0x41	; 65
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__divsf3>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	89 87       	std	Y+9, r24	; 0x09
     6bc:	9a 87       	std	Y+10, r25	; 0x0a
     6be:	ab 87       	std	Y+11, r26	; 0x0b
     6c0:	bc 87       	std	Y+12, r27	; 0x0c
		sprintf(temp,"%f",tempF);
     6c2:	88 85       	ldd	r24, Y+8	; 0x08
     6c4:	8f 93       	push	r24
     6c6:	8f 81       	ldd	r24, Y+7	; 0x07
     6c8:	8f 93       	push	r24
     6ca:	8e 81       	ldd	r24, Y+6	; 0x06
     6cc:	8f 93       	push	r24
     6ce:	8d 81       	ldd	r24, Y+5	; 0x05
     6d0:	8f 93       	push	r24
     6d2:	8b e6       	ldi	r24, 0x6B	; 107
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	89 2f       	mov	r24, r25
     6d8:	8f 93       	push	r24
     6da:	8b e6       	ldi	r24, 0x6B	; 107
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	8f 93       	push	r24
     6e0:	8d 89       	ldd	r24, Y+21	; 0x15
     6e2:	8f 93       	push	r24
     6e4:	8c 89       	ldd	r24, Y+20	; 0x14
     6e6:	8f 93       	push	r24
     6e8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <sprintf>
     6ec:	8d b7       	in	r24, 0x3d	; 61
     6ee:	9e b7       	in	r25, 0x3e	; 62
     6f0:	08 96       	adiw	r24, 0x08	; 8
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
		sprintf(hum,"%f",humF);
     6fc:	8c 85       	ldd	r24, Y+12	; 0x0c
     6fe:	8f 93       	push	r24
     700:	8b 85       	ldd	r24, Y+11	; 0x0b
     702:	8f 93       	push	r24
     704:	8a 85       	ldd	r24, Y+10	; 0x0a
     706:	8f 93       	push	r24
     708:	89 85       	ldd	r24, Y+9	; 0x09
     70a:	8f 93       	push	r24
     70c:	8b e6       	ldi	r24, 0x6B	; 107
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	89 2f       	mov	r24, r25
     712:	8f 93       	push	r24
     714:	8b e6       	ldi	r24, 0x6B	; 107
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	8f 93       	push	r24
     71a:	8b 89       	ldd	r24, Y+19	; 0x13
     71c:	8f 93       	push	r24
     71e:	8a 89       	ldd	r24, Y+18	; 0x12
     720:	8f 93       	push	r24
     722:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <sprintf>
     726:	8d b7       	in	r24, 0x3d	; 61
     728:	9e b7       	in	r25, 0x3e	; 62
     72a:	08 96       	adiw	r24, 0x08	; 8
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
		return TRUE;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	01 c0       	rjmp	.+2      	; 0x73c <DHT_Represent+0x1a4>
	}
	return FALSE;
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	65 96       	adiw	r28, 0x15	; 21
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <LCD_init>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	2e 97       	sbiw	r28, 0x0e	; 14
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	60 ef       	ldi	r22, 0xF0	; 240
     766:	8a e3       	ldi	r24, 0x3A	; 58
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <pinsDirection>
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	6e e0       	ldi	r22, 0x0E	; 14
     772:	87 e3       	ldi	r24, 0x37	; 55
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 a3 0b 	call	0x1746	; 0x1746 <pinsDirection>
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	8a e0       	ldi	r24, 0x0A	; 10
     77e:	0e 94 1a 09 	call	0x1234	; 0x1234 <writePin>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a0 e2       	ldi	r26, 0x20	; 32
     788:	b2 e4       	ldi	r27, 0x42	; 66
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	9a 83       	std	Y+2, r25	; 0x02
     78e:	ab 83       	std	Y+3, r26	; 0x03
     790:	bc 83       	std	Y+4, r27	; 0x04
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	4a e7       	ldi	r20, 0x7A	; 122
     798:	55 e4       	ldi	r21, 0x45	; 69
     79a:	69 81       	ldd	r22, Y+1	; 0x01
     79c:	7a 81       	ldd	r23, Y+2	; 0x02
     79e:	8b 81       	ldd	r24, Y+3	; 0x03
     7a0:	9c 81       	ldd	r25, Y+4	; 0x04
     7a2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	8d 83       	std	Y+5, r24	; 0x05
     7ac:	9e 83       	std	Y+6, r25	; 0x06
     7ae:	af 83       	std	Y+7, r26	; 0x07
     7b0:	b8 87       	std	Y+8, r27	; 0x08
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e8       	ldi	r20, 0x80	; 128
     7b8:	5f e3       	ldi	r21, 0x3F	; 63
     7ba:	6d 81       	ldd	r22, Y+5	; 0x05
     7bc:	7e 81       	ldd	r23, Y+6	; 0x06
     7be:	8f 81       	ldd	r24, Y+7	; 0x07
     7c0:	98 85       	ldd	r25, Y+8	; 0x08
     7c2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <LCD_init+0x86>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	9a 87       	std	Y+10, r25	; 0x0a
     7d0:	89 87       	std	Y+9, r24	; 0x09
     7d2:	3f c0       	rjmp	.+126    	; 0x852 <LCD_init+0x104>
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	3f ef       	ldi	r19, 0xFF	; 255
     7d8:	4f e7       	ldi	r20, 0x7F	; 127
     7da:	57 e4       	ldi	r21, 0x47	; 71
     7dc:	6d 81       	ldd	r22, Y+5	; 0x05
     7de:	7e 81       	ldd	r23, Y+6	; 0x06
     7e0:	8f 81       	ldd	r24, Y+7	; 0x07
     7e2:	98 85       	ldd	r25, Y+8	; 0x08
     7e4:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	4c f5       	brge	.+82     	; 0x83e <LCD_init+0xf0>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e2       	ldi	r20, 0x20	; 32
     7f2:	51 e4       	ldi	r21, 0x41	; 65
     7f4:	69 81       	ldd	r22, Y+1	; 0x01
     7f6:	7a 81       	ldd	r23, Y+2	; 0x02
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	9c 81       	ldd	r25, Y+4	; 0x04
     7fc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	9a 87       	std	Y+10, r25	; 0x0a
     812:	89 87       	std	Y+9, r24	; 0x09
     814:	0f c0       	rjmp	.+30     	; 0x834 <LCD_init+0xe6>
     816:	80 e9       	ldi	r24, 0x90	; 144
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	9c 87       	std	Y+12, r25	; 0x0c
     81c:	8b 87       	std	Y+11, r24	; 0x0b
     81e:	8b 85       	ldd	r24, Y+11	; 0x0b
     820:	9c 85       	ldd	r25, Y+12	; 0x0c
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <LCD_init+0xd4>
     826:	9c 87       	std	Y+12, r25	; 0x0c
     828:	8b 87       	std	Y+11, r24	; 0x0b
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	9a 85       	ldd	r25, Y+10	; 0x0a
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	9a 87       	std	Y+10, r25	; 0x0a
     832:	89 87       	std	Y+9, r24	; 0x09
     834:	89 85       	ldd	r24, Y+9	; 0x09
     836:	9a 85       	ldd	r25, Y+10	; 0x0a
     838:	89 2b       	or	r24, r25
     83a:	69 f7       	brne	.-38     	; 0x816 <LCD_init+0xc8>
     83c:	14 c0       	rjmp	.+40     	; 0x866 <__stack+0x7>
     83e:	6d 81       	ldd	r22, Y+5	; 0x05
     840:	7e 81       	ldd	r23, Y+6	; 0x06
     842:	8f 81       	ldd	r24, Y+7	; 0x07
     844:	98 85       	ldd	r25, Y+8	; 0x08
     846:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	9a 87       	std	Y+10, r25	; 0x0a
     850:	89 87       	std	Y+9, r24	; 0x09
     852:	89 85       	ldd	r24, Y+9	; 0x09
     854:	9a 85       	ldd	r25, Y+10	; 0x0a
     856:	9e 87       	std	Y+14, r25	; 0x0e
     858:	8d 87       	std	Y+13, r24	; 0x0d
     85a:	8d 85       	ldd	r24, Y+13	; 0x0d
     85c:	9e 85       	ldd	r25, Y+14	; 0x0e
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <LCD_init+0x110>
     862:	9e 87       	std	Y+14, r25	; 0x0e
     864:	8d 87       	std	Y+13, r24	; 0x0d
     866:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_ret_Home>
     86a:	86 e0       	ldi	r24, 0x06	; 6
     86c:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_send_cmd>
     870:	8f e0       	ldi	r24, 0x0F	; 15
     872:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_send_cmd>
     876:	80 e1       	ldi	r24, 0x10	; 16
     878:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_send_cmd>
     87c:	88 e2       	ldi	r24, 0x28	; 40
     87e:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_send_cmd>
     882:	0e 94 4c 04 	call	0x898	; 0x898 <LCD_CLEAR>
     886:	2e 96       	adiw	r28, 0x0e	; 14
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <LCD_CLEAR>:
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	2e 97       	sbiw	r28, 0x0e	; 14
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_send_cmd>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	a0 e0       	ldi	r26, 0x00	; 0
     8b8:	b0 e4       	ldi	r27, 0x40	; 64
     8ba:	89 83       	std	Y+1, r24	; 0x01
     8bc:	9a 83       	std	Y+2, r25	; 0x02
     8be:	ab 83       	std	Y+3, r26	; 0x03
     8c0:	bc 83       	std	Y+4, r27	; 0x04
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	4a e7       	ldi	r20, 0x7A	; 122
     8c8:	55 e4       	ldi	r21, 0x45	; 69
     8ca:	69 81       	ldd	r22, Y+1	; 0x01
     8cc:	7a 81       	ldd	r23, Y+2	; 0x02
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	9c 81       	ldd	r25, Y+4	; 0x04
     8d2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	8d 83       	std	Y+5, r24	; 0x05
     8dc:	9e 83       	std	Y+6, r25	; 0x06
     8de:	af 83       	std	Y+7, r26	; 0x07
     8e0:	b8 87       	std	Y+8, r27	; 0x08
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e8       	ldi	r20, 0x80	; 128
     8e8:	5f e3       	ldi	r21, 0x3F	; 63
     8ea:	6d 81       	ldd	r22, Y+5	; 0x05
     8ec:	7e 81       	ldd	r23, Y+6	; 0x06
     8ee:	8f 81       	ldd	r24, Y+7	; 0x07
     8f0:	98 85       	ldd	r25, Y+8	; 0x08
     8f2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     8f6:	88 23       	and	r24, r24
     8f8:	2c f4       	brge	.+10     	; 0x904 <LCD_CLEAR+0x6c>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	9a 87       	std	Y+10, r25	; 0x0a
     900:	89 87       	std	Y+9, r24	; 0x09
     902:	3f c0       	rjmp	.+126    	; 0x982 <LCD_CLEAR+0xea>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	3f ef       	ldi	r19, 0xFF	; 255
     908:	4f e7       	ldi	r20, 0x7F	; 127
     90a:	57 e4       	ldi	r21, 0x47	; 71
     90c:	6d 81       	ldd	r22, Y+5	; 0x05
     90e:	7e 81       	ldd	r23, Y+6	; 0x06
     910:	8f 81       	ldd	r24, Y+7	; 0x07
     912:	98 85       	ldd	r25, Y+8	; 0x08
     914:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     918:	18 16       	cp	r1, r24
     91a:	4c f5       	brge	.+82     	; 0x96e <LCD_CLEAR+0xd6>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e2       	ldi	r20, 0x20	; 32
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	69 81       	ldd	r22, Y+1	; 0x01
     926:	7a 81       	ldd	r23, Y+2	; 0x02
     928:	8b 81       	ldd	r24, Y+3	; 0x03
     92a:	9c 81       	ldd	r25, Y+4	; 0x04
     92c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	bc 01       	movw	r22, r24
     936:	cd 01       	movw	r24, r26
     938:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	9a 87       	std	Y+10, r25	; 0x0a
     942:	89 87       	std	Y+9, r24	; 0x09
     944:	0f c0       	rjmp	.+30     	; 0x964 <LCD_CLEAR+0xcc>
     946:	80 e9       	ldi	r24, 0x90	; 144
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	9c 87       	std	Y+12, r25	; 0x0c
     94c:	8b 87       	std	Y+11, r24	; 0x0b
     94e:	8b 85       	ldd	r24, Y+11	; 0x0b
     950:	9c 85       	ldd	r25, Y+12	; 0x0c
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <LCD_CLEAR+0xba>
     956:	9c 87       	std	Y+12, r25	; 0x0c
     958:	8b 87       	std	Y+11, r24	; 0x0b
     95a:	89 85       	ldd	r24, Y+9	; 0x09
     95c:	9a 85       	ldd	r25, Y+10	; 0x0a
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	9a 87       	std	Y+10, r25	; 0x0a
     962:	89 87       	std	Y+9, r24	; 0x09
     964:	89 85       	ldd	r24, Y+9	; 0x09
     966:	9a 85       	ldd	r25, Y+10	; 0x0a
     968:	89 2b       	or	r24, r25
     96a:	69 f7       	brne	.-38     	; 0x946 <LCD_CLEAR+0xae>
     96c:	14 c0       	rjmp	.+40     	; 0x996 <LCD_CLEAR+0xfe>
     96e:	6d 81       	ldd	r22, Y+5	; 0x05
     970:	7e 81       	ldd	r23, Y+6	; 0x06
     972:	8f 81       	ldd	r24, Y+7	; 0x07
     974:	98 85       	ldd	r25, Y+8	; 0x08
     976:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
     97e:	9a 87       	std	Y+10, r25	; 0x0a
     980:	89 87       	std	Y+9, r24	; 0x09
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	9a 85       	ldd	r25, Y+10	; 0x0a
     986:	9e 87       	std	Y+14, r25	; 0x0e
     988:	8d 87       	std	Y+13, r24	; 0x0d
     98a:	8d 85       	ldd	r24, Y+13	; 0x0d
     98c:	9e 85       	ldd	r25, Y+14	; 0x0e
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <LCD_CLEAR+0xf6>
     992:	9e 87       	std	Y+14, r25	; 0x0e
     994:	8d 87       	std	Y+13, r24	; 0x0d
     996:	2e 96       	adiw	r28, 0x0e	; 14
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <LCD_ret_Home>:
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	2e 97       	sbiw	r28, 0x0e	; 14
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_send_cmd>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	b0 e4       	ldi	r27, 0x40	; 64
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	ab 83       	std	Y+3, r26	; 0x03
     9d0:	bc 83       	std	Y+4, r27	; 0x04
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	4a e7       	ldi	r20, 0x7A	; 122
     9d8:	55 e4       	ldi	r21, 0x45	; 69
     9da:	69 81       	ldd	r22, Y+1	; 0x01
     9dc:	7a 81       	ldd	r23, Y+2	; 0x02
     9de:	8b 81       	ldd	r24, Y+3	; 0x03
     9e0:	9c 81       	ldd	r25, Y+4	; 0x04
     9e2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     9e6:	dc 01       	movw	r26, r24
     9e8:	cb 01       	movw	r24, r22
     9ea:	8d 83       	std	Y+5, r24	; 0x05
     9ec:	9e 83       	std	Y+6, r25	; 0x06
     9ee:	af 83       	std	Y+7, r26	; 0x07
     9f0:	b8 87       	std	Y+8, r27	; 0x08
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 e8       	ldi	r20, 0x80	; 128
     9f8:	5f e3       	ldi	r21, 0x3F	; 63
     9fa:	6d 81       	ldd	r22, Y+5	; 0x05
     9fc:	7e 81       	ldd	r23, Y+6	; 0x06
     9fe:	8f 81       	ldd	r24, Y+7	; 0x07
     a00:	98 85       	ldd	r25, Y+8	; 0x08
     a02:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     a06:	88 23       	and	r24, r24
     a08:	2c f4       	brge	.+10     	; 0xa14 <LCD_ret_Home+0x6c>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	9a 87       	std	Y+10, r25	; 0x0a
     a10:	89 87       	std	Y+9, r24	; 0x09
     a12:	3f c0       	rjmp	.+126    	; 0xa92 <LCD_ret_Home+0xea>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	3f ef       	ldi	r19, 0xFF	; 255
     a18:	4f e7       	ldi	r20, 0x7F	; 127
     a1a:	57 e4       	ldi	r21, 0x47	; 71
     a1c:	6d 81       	ldd	r22, Y+5	; 0x05
     a1e:	7e 81       	ldd	r23, Y+6	; 0x06
     a20:	8f 81       	ldd	r24, Y+7	; 0x07
     a22:	98 85       	ldd	r25, Y+8	; 0x08
     a24:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     a28:	18 16       	cp	r1, r24
     a2a:	4c f5       	brge	.+82     	; 0xa7e <LCD_ret_Home+0xd6>
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e2       	ldi	r20, 0x20	; 32
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	69 81       	ldd	r22, Y+1	; 0x01
     a36:	7a 81       	ldd	r23, Y+2	; 0x02
     a38:	8b 81       	ldd	r24, Y+3	; 0x03
     a3a:	9c 81       	ldd	r25, Y+4	; 0x04
     a3c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     a40:	dc 01       	movw	r26, r24
     a42:	cb 01       	movw	r24, r22
     a44:	bc 01       	movw	r22, r24
     a46:	cd 01       	movw	r24, r26
     a48:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	9a 87       	std	Y+10, r25	; 0x0a
     a52:	89 87       	std	Y+9, r24	; 0x09
     a54:	0f c0       	rjmp	.+30     	; 0xa74 <LCD_ret_Home+0xcc>
     a56:	80 e9       	ldi	r24, 0x90	; 144
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	9c 87       	std	Y+12, r25	; 0x0c
     a5c:	8b 87       	std	Y+11, r24	; 0x0b
     a5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     a60:	9c 85       	ldd	r25, Y+12	; 0x0c
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <LCD_ret_Home+0xba>
     a66:	9c 87       	std	Y+12, r25	; 0x0c
     a68:	8b 87       	std	Y+11, r24	; 0x0b
     a6a:	89 85       	ldd	r24, Y+9	; 0x09
     a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	9a 87       	std	Y+10, r25	; 0x0a
     a72:	89 87       	std	Y+9, r24	; 0x09
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	89 2b       	or	r24, r25
     a7a:	69 f7       	brne	.-38     	; 0xa56 <LCD_ret_Home+0xae>
     a7c:	14 c0       	rjmp	.+40     	; 0xaa6 <LCD_ret_Home+0xfe>
     a7e:	6d 81       	ldd	r22, Y+5	; 0x05
     a80:	7e 81       	ldd	r23, Y+6	; 0x06
     a82:	8f 81       	ldd	r24, Y+7	; 0x07
     a84:	98 85       	ldd	r25, Y+8	; 0x08
     a86:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	9a 87       	std	Y+10, r25	; 0x0a
     a90:	89 87       	std	Y+9, r24	; 0x09
     a92:	89 85       	ldd	r24, Y+9	; 0x09
     a94:	9a 85       	ldd	r25, Y+10	; 0x0a
     a96:	9e 87       	std	Y+14, r25	; 0x0e
     a98:	8d 87       	std	Y+13, r24	; 0x0d
     a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <LCD_ret_Home+0xf6>
     aa2:	9e 87       	std	Y+14, r25	; 0x0e
     aa4:	8d 87       	std	Y+13, r24	; 0x0d
     aa6:	2e 96       	adiw	r28, 0x0e	; 14
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <SendToLCD>:
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	a1 97       	sbiw	r28, 0x21	; 33
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	89 a3       	std	Y+33, r24	; 0x21
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	60 ef       	ldi	r22, 0xF0	; 240
     ad2:	8b e3       	ldi	r24, 0x3B	; 59
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <writePins>
     ada:	89 a1       	ldd	r24, Y+33	; 0x21
     adc:	80 7f       	andi	r24, 0xF0	; 240
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	68 2f       	mov	r22, r24
     ae2:	8b e3       	ldi	r24, 0x3B	; 59
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <writePins>
     aea:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCD_latch>
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	60 ef       	ldi	r22, 0xF0	; 240
     af2:	8b e3       	ldi	r24, 0x3B	; 59
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <writePins>
     afa:	89 a1       	ldd	r24, Y+33	; 0x21
     afc:	88 2f       	mov	r24, r24
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	82 95       	swap	r24
     b02:	92 95       	swap	r25
     b04:	90 7f       	andi	r25, 0xF0	; 240
     b06:	98 27       	eor	r25, r24
     b08:	80 7f       	andi	r24, 0xF0	; 240
     b0a:	98 27       	eor	r25, r24
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	68 2f       	mov	r22, r24
     b10:	8b e3       	ldi	r24, 0x3B	; 59
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <writePins>
     b18:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCD_latch>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a8 e4       	ldi	r26, 0x48	; 72
     b22:	b2 e4       	ldi	r27, 0x42	; 66
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	9a 83       	std	Y+2, r25	; 0x02
     b28:	ab 83       	std	Y+3, r26	; 0x03
     b2a:	bc 83       	std	Y+4, r27	; 0x04
     b2c:	2b ea       	ldi	r18, 0xAB	; 171
     b2e:	3a ea       	ldi	r19, 0xAA	; 170
     b30:	4a ea       	ldi	r20, 0xAA	; 170
     b32:	50 e4       	ldi	r21, 0x40	; 64
     b34:	69 81       	ldd	r22, Y+1	; 0x01
     b36:	7a 81       	ldd	r23, Y+2	; 0x02
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	8d 83       	std	Y+5, r24	; 0x05
     b46:	9e 83       	std	Y+6, r25	; 0x06
     b48:	af 83       	std	Y+7, r26	; 0x07
     b4a:	b8 87       	std	Y+8, r27	; 0x08
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e8       	ldi	r20, 0x80	; 128
     b52:	50 e4       	ldi	r21, 0x40	; 64
     b54:	69 81       	ldd	r22, Y+1	; 0x01
     b56:	7a 81       	ldd	r23, Y+2	; 0x02
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	89 87       	std	Y+9, r24	; 0x09
     b66:	9a 87       	std	Y+10, r25	; 0x0a
     b68:	ab 87       	std	Y+11, r26	; 0x0b
     b6a:	bc 87       	std	Y+12, r27	; 0x0c
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e8       	ldi	r20, 0x80	; 128
     b72:	5f e3       	ldi	r21, 0x3F	; 63
     b74:	6d 81       	ldd	r22, Y+5	; 0x05
     b76:	7e 81       	ldd	r23, Y+6	; 0x06
     b78:	8f 81       	ldd	r24, Y+7	; 0x07
     b7a:	98 85       	ldd	r25, Y+8	; 0x08
     b7c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     b80:	88 23       	and	r24, r24
     b82:	1c f4       	brge	.+6      	; 0xb8a <SendToLCD+0xd2>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	8d 87       	std	Y+13, r24	; 0x0d
     b88:	b2 c0       	rjmp	.+356    	; 0xcee <SendToLCD+0x236>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	3f ef       	ldi	r19, 0xFF	; 255
     b8e:	4f e7       	ldi	r20, 0x7F	; 127
     b90:	57 e4       	ldi	r21, 0x47	; 71
     b92:	69 85       	ldd	r22, Y+9	; 0x09
     b94:	7a 85       	ldd	r23, Y+10	; 0x0a
     b96:	8b 85       	ldd	r24, Y+11	; 0x0b
     b98:	9c 85       	ldd	r25, Y+12	; 0x0c
     b9a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     b9e:	18 16       	cp	r1, r24
     ba0:	0c f0       	brlt	.+2      	; 0xba4 <SendToLCD+0xec>
     ba2:	7b c0       	rjmp	.+246    	; 0xc9a <SendToLCD+0x1e2>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	4a e7       	ldi	r20, 0x7A	; 122
     baa:	54 e4       	ldi	r21, 0x44	; 68
     bac:	69 81       	ldd	r22, Y+1	; 0x01
     bae:	7a 81       	ldd	r23, Y+2	; 0x02
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__divsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	8e 87       	std	Y+14, r24	; 0x0e
     bbe:	9f 87       	std	Y+15, r25	; 0x0f
     bc0:	a8 8b       	std	Y+16, r26	; 0x10
     bc2:	b9 8b       	std	Y+17, r27	; 0x11
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	4a e7       	ldi	r20, 0x7A	; 122
     bca:	55 e4       	ldi	r21, 0x45	; 69
     bcc:	6e 85       	ldd	r22, Y+14	; 0x0e
     bce:	7f 85       	ldd	r23, Y+15	; 0x0f
     bd0:	88 89       	ldd	r24, Y+16	; 0x10
     bd2:	99 89       	ldd	r25, Y+17	; 0x11
     bd4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8a 8b       	std	Y+18, r24	; 0x12
     bde:	9b 8b       	std	Y+19, r25	; 0x13
     be0:	ac 8b       	std	Y+20, r26	; 0x14
     be2:	bd 8b       	std	Y+21, r27	; 0x15
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e8       	ldi	r20, 0x80	; 128
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	6a 89       	ldd	r22, Y+18	; 0x12
     bee:	7b 89       	ldd	r23, Y+19	; 0x13
     bf0:	8c 89       	ldd	r24, Y+20	; 0x14
     bf2:	9d 89       	ldd	r25, Y+21	; 0x15
     bf4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f4       	brge	.+10     	; 0xc06 <SendToLCD+0x14e>
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9f 8b       	std	Y+23, r25	; 0x17
     c02:	8e 8b       	std	Y+22, r24	; 0x16
     c04:	3f c0       	rjmp	.+126    	; 0xc84 <SendToLCD+0x1cc>
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	3f ef       	ldi	r19, 0xFF	; 255
     c0a:	4f e7       	ldi	r20, 0x7F	; 127
     c0c:	57 e4       	ldi	r21, 0x47	; 71
     c0e:	6a 89       	ldd	r22, Y+18	; 0x12
     c10:	7b 89       	ldd	r23, Y+19	; 0x13
     c12:	8c 89       	ldd	r24, Y+20	; 0x14
     c14:	9d 89       	ldd	r25, Y+21	; 0x15
     c16:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	4c f5       	brge	.+82     	; 0xc70 <SendToLCD+0x1b8>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e2       	ldi	r20, 0x20	; 32
     c24:	51 e4       	ldi	r21, 0x41	; 65
     c26:	6e 85       	ldd	r22, Y+14	; 0x0e
     c28:	7f 85       	ldd	r23, Y+15	; 0x0f
     c2a:	88 89       	ldd	r24, Y+16	; 0x10
     c2c:	99 89       	ldd	r25, Y+17	; 0x11
     c2e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9f 8b       	std	Y+23, r25	; 0x17
     c44:	8e 8b       	std	Y+22, r24	; 0x16
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <SendToLCD+0x1ae>
     c48:	80 e9       	ldi	r24, 0x90	; 144
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	99 8f       	std	Y+25, r25	; 0x19
     c4e:	88 8f       	std	Y+24, r24	; 0x18
     c50:	88 8d       	ldd	r24, Y+24	; 0x18
     c52:	99 8d       	ldd	r25, Y+25	; 0x19
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <SendToLCD+0x19c>
     c58:	99 8f       	std	Y+25, r25	; 0x19
     c5a:	88 8f       	std	Y+24, r24	; 0x18
     c5c:	8e 89       	ldd	r24, Y+22	; 0x16
     c5e:	9f 89       	ldd	r25, Y+23	; 0x17
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9f 8b       	std	Y+23, r25	; 0x17
     c64:	8e 8b       	std	Y+22, r24	; 0x16
     c66:	8e 89       	ldd	r24, Y+22	; 0x16
     c68:	9f 89       	ldd	r25, Y+23	; 0x17
     c6a:	89 2b       	or	r24, r25
     c6c:	69 f7       	brne	.-38     	; 0xc48 <SendToLCD+0x190>
     c6e:	3f c0       	rjmp	.+126    	; 0xcee <SendToLCD+0x236>
     c70:	6a 89       	ldd	r22, Y+18	; 0x12
     c72:	7b 89       	ldd	r23, Y+19	; 0x13
     c74:	8c 89       	ldd	r24, Y+20	; 0x14
     c76:	9d 89       	ldd	r25, Y+21	; 0x15
     c78:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9f 8b       	std	Y+23, r25	; 0x17
     c82:	8e 8b       	std	Y+22, r24	; 0x16
     c84:	8e 89       	ldd	r24, Y+22	; 0x16
     c86:	9f 89       	ldd	r25, Y+23	; 0x17
     c88:	9b 8f       	std	Y+27, r25	; 0x1b
     c8a:	8a 8f       	std	Y+26, r24	; 0x1a
     c8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <SendToLCD+0x1d8>
     c94:	9b 8f       	std	Y+27, r25	; 0x1b
     c96:	8a 8f       	std	Y+26, r24	; 0x1a
     c98:	2a c0       	rjmp	.+84     	; 0xcee <SendToLCD+0x236>
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	4f e7       	ldi	r20, 0x7F	; 127
     ca0:	53 e4       	ldi	r21, 0x43	; 67
     ca2:	6d 81       	ldd	r22, Y+5	; 0x05
     ca4:	7e 81       	ldd	r23, Y+6	; 0x06
     ca6:	8f 81       	ldd	r24, Y+7	; 0x07
     ca8:	98 85       	ldd	r25, Y+8	; 0x08
     caa:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     cae:	18 16       	cp	r1, r24
     cb0:	ac f4       	brge	.+42     	; 0xcdc <SendToLCD+0x224>
     cb2:	69 85       	ldd	r22, Y+9	; 0x09
     cb4:	7a 85       	ldd	r23, Y+10	; 0x0a
     cb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cba:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	9d 8f       	std	Y+29, r25	; 0x1d
     cc4:	8c 8f       	std	Y+28, r24	; 0x1c
     cc6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cc8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cca:	9f 8f       	std	Y+31, r25	; 0x1f
     ccc:	8e 8f       	std	Y+30, r24	; 0x1e
     cce:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cd0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <SendToLCD+0x21a>
     cd6:	9f 8f       	std	Y+31, r25	; 0x1f
     cd8:	8e 8f       	std	Y+30, r24	; 0x1e
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <SendToLCD+0x242>
     cdc:	6d 81       	ldd	r22, Y+5	; 0x05
     cde:	7e 81       	ldd	r23, Y+6	; 0x06
     ce0:	8f 81       	ldd	r24, Y+7	; 0x07
     ce2:	98 85       	ldd	r25, Y+8	; 0x08
     ce4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	8d 87       	std	Y+13, r24	; 0x0d
     cee:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf0:	88 a3       	std	Y+32, r24	; 0x20
     cf2:	88 a1       	ldd	r24, Y+32	; 0x20
     cf4:	8a 95       	dec	r24
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <SendToLCD+0x23c>
     cf8:	88 a3       	std	Y+32, r24	; 0x20
     cfa:	a1 96       	adiw	r28, 0x21	; 33
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <LCD_send_cmd>:
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	1f 92       	push	r1
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	89 e0       	ldi	r24, 0x09	; 9
     d1c:	0e 94 1a 09 	call	0x1234	; 0x1234 <writePin>
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	0e 94 5c 05 	call	0xab8	; 0xab8 <SendToLCD>
     d26:	0f 90       	pop	r0
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <LCD_send_data>:
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	1f 92       	push	r1
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	89 e0       	ldi	r24, 0x09	; 9
     d3e:	0e 94 1a 09 	call	0x1234	; 0x1234 <writePin>
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	0e 94 5c 05 	call	0xab8	; 0xab8 <SendToLCD>
     d48:	0f 90       	pop	r0
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <LCD_latch>:
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	c0 54       	subi	r28, 0x40	; 64
     d5a:	d1 09       	sbc	r29, r1
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	8b e0       	ldi	r24, 0x0B	; 11
     d6a:	0e 94 1a 09 	call	0x1234	; 0x1234 <writePin>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	a8 e4       	ldi	r26, 0x48	; 72
     d74:	b2 e4       	ldi	r27, 0x42	; 66
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	ab 83       	std	Y+3, r26	; 0x03
     d7c:	bc 83       	std	Y+4, r27	; 0x04
     d7e:	2b ea       	ldi	r18, 0xAB	; 171
     d80:	3a ea       	ldi	r19, 0xAA	; 170
     d82:	4a ea       	ldi	r20, 0xAA	; 170
     d84:	50 e4       	ldi	r21, 0x40	; 64
     d86:	69 81       	ldd	r22, Y+1	; 0x01
     d88:	7a 81       	ldd	r23, Y+2	; 0x02
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	af 83       	std	Y+7, r26	; 0x07
     d9c:	b8 87       	std	Y+8, r27	; 0x08
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e8       	ldi	r20, 0x80	; 128
     da4:	50 e4       	ldi	r21, 0x40	; 64
     da6:	69 81       	ldd	r22, Y+1	; 0x01
     da8:	7a 81       	ldd	r23, Y+2	; 0x02
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	89 87       	std	Y+9, r24	; 0x09
     db8:	9a 87       	std	Y+10, r25	; 0x0a
     dba:	ab 87       	std	Y+11, r26	; 0x0b
     dbc:	bc 87       	std	Y+12, r27	; 0x0c
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e8       	ldi	r20, 0x80	; 128
     dc4:	5f e3       	ldi	r21, 0x3F	; 63
     dc6:	6d 81       	ldd	r22, Y+5	; 0x05
     dc8:	7e 81       	ldd	r23, Y+6	; 0x06
     dca:	8f 81       	ldd	r24, Y+7	; 0x07
     dcc:	98 85       	ldd	r25, Y+8	; 0x08
     dce:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     dd2:	88 23       	and	r24, r24
     dd4:	1c f4       	brge	.+6      	; 0xddc <LCD_latch+0x8c>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	8d 87       	std	Y+13, r24	; 0x0d
     dda:	b2 c0       	rjmp	.+356    	; 0xf40 <LCD_latch+0x1f0>
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	3f ef       	ldi	r19, 0xFF	; 255
     de0:	4f e7       	ldi	r20, 0x7F	; 127
     de2:	57 e4       	ldi	r21, 0x47	; 71
     de4:	69 85       	ldd	r22, Y+9	; 0x09
     de6:	7a 85       	ldd	r23, Y+10	; 0x0a
     de8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dea:	9c 85       	ldd	r25, Y+12	; 0x0c
     dec:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     df0:	18 16       	cp	r1, r24
     df2:	0c f0       	brlt	.+2      	; 0xdf6 <LCD_latch+0xa6>
     df4:	7b c0       	rjmp	.+246    	; 0xeec <LCD_latch+0x19c>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	4a e7       	ldi	r20, 0x7A	; 122
     dfc:	54 e4       	ldi	r21, 0x44	; 68
     dfe:	69 81       	ldd	r22, Y+1	; 0x01
     e00:	7a 81       	ldd	r23, Y+2	; 0x02
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__divsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	8e 87       	std	Y+14, r24	; 0x0e
     e10:	9f 87       	std	Y+15, r25	; 0x0f
     e12:	a8 8b       	std	Y+16, r26	; 0x10
     e14:	b9 8b       	std	Y+17, r27	; 0x11
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	4a e7       	ldi	r20, 0x7A	; 122
     e1c:	55 e4       	ldi	r21, 0x45	; 69
     e1e:	6e 85       	ldd	r22, Y+14	; 0x0e
     e20:	7f 85       	ldd	r23, Y+15	; 0x0f
     e22:	88 89       	ldd	r24, Y+16	; 0x10
     e24:	99 89       	ldd	r25, Y+17	; 0x11
     e26:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8a 8b       	std	Y+18, r24	; 0x12
     e30:	9b 8b       	std	Y+19, r25	; 0x13
     e32:	ac 8b       	std	Y+20, r26	; 0x14
     e34:	bd 8b       	std	Y+21, r27	; 0x15
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	5f e3       	ldi	r21, 0x3F	; 63
     e3e:	6a 89       	ldd	r22, Y+18	; 0x12
     e40:	7b 89       	ldd	r23, Y+19	; 0x13
     e42:	8c 89       	ldd	r24, Y+20	; 0x14
     e44:	9d 89       	ldd	r25, Y+21	; 0x15
     e46:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	2c f4       	brge	.+10     	; 0xe58 <LCD_latch+0x108>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9f 8b       	std	Y+23, r25	; 0x17
     e54:	8e 8b       	std	Y+22, r24	; 0x16
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <LCD_latch+0x186>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	3f ef       	ldi	r19, 0xFF	; 255
     e5c:	4f e7       	ldi	r20, 0x7F	; 127
     e5e:	57 e4       	ldi	r21, 0x47	; 71
     e60:	6a 89       	ldd	r22, Y+18	; 0x12
     e62:	7b 89       	ldd	r23, Y+19	; 0x13
     e64:	8c 89       	ldd	r24, Y+20	; 0x14
     e66:	9d 89       	ldd	r25, Y+21	; 0x15
     e68:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	4c f5       	brge	.+82     	; 0xec2 <LCD_latch+0x172>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e2       	ldi	r20, 0x20	; 32
     e76:	51 e4       	ldi	r21, 0x41	; 65
     e78:	6e 85       	ldd	r22, Y+14	; 0x0e
     e7a:	7f 85       	ldd	r23, Y+15	; 0x0f
     e7c:	88 89       	ldd	r24, Y+16	; 0x10
     e7e:	99 89       	ldd	r25, Y+17	; 0x11
     e80:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9f 8b       	std	Y+23, r25	; 0x17
     e96:	8e 8b       	std	Y+22, r24	; 0x16
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <LCD_latch+0x168>
     e9a:	80 e9       	ldi	r24, 0x90	; 144
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	99 8f       	std	Y+25, r25	; 0x19
     ea0:	88 8f       	std	Y+24, r24	; 0x18
     ea2:	88 8d       	ldd	r24, Y+24	; 0x18
     ea4:	99 8d       	ldd	r25, Y+25	; 0x19
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <LCD_latch+0x156>
     eaa:	99 8f       	std	Y+25, r25	; 0x19
     eac:	88 8f       	std	Y+24, r24	; 0x18
     eae:	8e 89       	ldd	r24, Y+22	; 0x16
     eb0:	9f 89       	ldd	r25, Y+23	; 0x17
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9f 8b       	std	Y+23, r25	; 0x17
     eb6:	8e 8b       	std	Y+22, r24	; 0x16
     eb8:	8e 89       	ldd	r24, Y+22	; 0x16
     eba:	9f 89       	ldd	r25, Y+23	; 0x17
     ebc:	89 2b       	or	r24, r25
     ebe:	69 f7       	brne	.-38     	; 0xe9a <LCD_latch+0x14a>
     ec0:	3f c0       	rjmp	.+126    	; 0xf40 <LCD_latch+0x1f0>
     ec2:	6a 89       	ldd	r22, Y+18	; 0x12
     ec4:	7b 89       	ldd	r23, Y+19	; 0x13
     ec6:	8c 89       	ldd	r24, Y+20	; 0x14
     ec8:	9d 89       	ldd	r25, Y+21	; 0x15
     eca:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9f 8b       	std	Y+23, r25	; 0x17
     ed4:	8e 8b       	std	Y+22, r24	; 0x16
     ed6:	8e 89       	ldd	r24, Y+22	; 0x16
     ed8:	9f 89       	ldd	r25, Y+23	; 0x17
     eda:	9b 8f       	std	Y+27, r25	; 0x1b
     edc:	8a 8f       	std	Y+26, r24	; 0x1a
     ede:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ee0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <LCD_latch+0x192>
     ee6:	9b 8f       	std	Y+27, r25	; 0x1b
     ee8:	8a 8f       	std	Y+26, r24	; 0x1a
     eea:	2a c0       	rjmp	.+84     	; 0xf40 <LCD_latch+0x1f0>
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	4f e7       	ldi	r20, 0x7F	; 127
     ef2:	53 e4       	ldi	r21, 0x43	; 67
     ef4:	6d 81       	ldd	r22, Y+5	; 0x05
     ef6:	7e 81       	ldd	r23, Y+6	; 0x06
     ef8:	8f 81       	ldd	r24, Y+7	; 0x07
     efa:	98 85       	ldd	r25, Y+8	; 0x08
     efc:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     f00:	18 16       	cp	r1, r24
     f02:	ac f4       	brge	.+42     	; 0xf2e <LCD_latch+0x1de>
     f04:	69 85       	ldd	r22, Y+9	; 0x09
     f06:	7a 85       	ldd	r23, Y+10	; 0x0a
     f08:	8b 85       	ldd	r24, Y+11	; 0x0b
     f0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f0c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	9d 8f       	std	Y+29, r25	; 0x1d
     f16:	8c 8f       	std	Y+28, r24	; 0x1c
     f18:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f1c:	9f 8f       	std	Y+31, r25	; 0x1f
     f1e:	8e 8f       	std	Y+30, r24	; 0x1e
     f20:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f22:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <LCD_latch+0x1d4>
     f28:	9f 8f       	std	Y+31, r25	; 0x1f
     f2a:	8e 8f       	std	Y+30, r24	; 0x1e
     f2c:	0f c0       	rjmp	.+30     	; 0xf4c <LCD_latch+0x1fc>
     f2e:	6d 81       	ldd	r22, Y+5	; 0x05
     f30:	7e 81       	ldd	r23, Y+6	; 0x06
     f32:	8f 81       	ldd	r24, Y+7	; 0x07
     f34:	98 85       	ldd	r25, Y+8	; 0x08
     f36:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8d 87       	std	Y+13, r24	; 0x0d
     f40:	8d 85       	ldd	r24, Y+13	; 0x0d
     f42:	88 a3       	std	Y+32, r24	; 0x20
     f44:	88 a1       	ldd	r24, Y+32	; 0x20
     f46:	8a 95       	dec	r24
     f48:	f1 f7       	brne	.-4      	; 0xf46 <LCD_latch+0x1f6>
     f4a:	88 a3       	std	Y+32, r24	; 0x20
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	8b e0       	ldi	r24, 0x0B	; 11
     f50:	0e 94 1a 09 	call	0x1234	; 0x1234 <writePin>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a8 e4       	ldi	r26, 0x48	; 72
     f5a:	b2 e4       	ldi	r27, 0x42	; 66
     f5c:	89 a3       	std	Y+33, r24	; 0x21
     f5e:	9a a3       	std	Y+34, r25	; 0x22
     f60:	ab a3       	std	Y+35, r26	; 0x23
     f62:	bc a3       	std	Y+36, r27	; 0x24
     f64:	2b ea       	ldi	r18, 0xAB	; 171
     f66:	3a ea       	ldi	r19, 0xAA	; 170
     f68:	4a ea       	ldi	r20, 0xAA	; 170
     f6a:	50 e4       	ldi	r21, 0x40	; 64
     f6c:	69 a1       	ldd	r22, Y+33	; 0x21
     f6e:	7a a1       	ldd	r23, Y+34	; 0x22
     f70:	8b a1       	ldd	r24, Y+35	; 0x23
     f72:	9c a1       	ldd	r25, Y+36	; 0x24
     f74:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	8d a3       	std	Y+37, r24	; 0x25
     f7e:	9e a3       	std	Y+38, r25	; 0x26
     f80:	af a3       	std	Y+39, r26	; 0x27
     f82:	b8 a7       	std	Y+40, r27	; 0x28
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	50 e4       	ldi	r21, 0x40	; 64
     f8c:	69 a1       	ldd	r22, Y+33	; 0x21
     f8e:	7a a1       	ldd	r23, Y+34	; 0x22
     f90:	8b a1       	ldd	r24, Y+35	; 0x23
     f92:	9c a1       	ldd	r25, Y+36	; 0x24
     f94:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	89 a7       	std	Y+41, r24	; 0x29
     f9e:	9a a7       	std	Y+42, r25	; 0x2a
     fa0:	ab a7       	std	Y+43, r26	; 0x2b
     fa2:	bc a7       	std	Y+44, r27	; 0x2c
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	6d a1       	ldd	r22, Y+37	; 0x25
     fae:	7e a1       	ldd	r23, Y+38	; 0x26
     fb0:	8f a1       	ldd	r24, Y+39	; 0x27
     fb2:	98 a5       	ldd	r25, Y+40	; 0x28
     fb4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
     fb8:	88 23       	and	r24, r24
     fba:	1c f4       	brge	.+6      	; 0xfc2 <LCD_latch+0x272>
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	8d a7       	std	Y+45, r24	; 0x2d
     fc0:	b2 c0       	rjmp	.+356    	; 0x1126 <LCD_latch+0x3d6>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	4f e7       	ldi	r20, 0x7F	; 127
     fc8:	57 e4       	ldi	r21, 0x47	; 71
     fca:	69 a5       	ldd	r22, Y+41	; 0x29
     fcc:	7a a5       	ldd	r23, Y+42	; 0x2a
     fce:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd0:	9c a5       	ldd	r25, Y+44	; 0x2c
     fd2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	0c f0       	brlt	.+2      	; 0xfdc <LCD_latch+0x28c>
     fda:	7b c0       	rjmp	.+246    	; 0x10d2 <LCD_latch+0x382>
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a e7       	ldi	r20, 0x7A	; 122
     fe2:	54 e4       	ldi	r21, 0x44	; 68
     fe4:	69 a1       	ldd	r22, Y+33	; 0x21
     fe6:	7a a1       	ldd	r23, Y+34	; 0x22
     fe8:	8b a1       	ldd	r24, Y+35	; 0x23
     fea:	9c a1       	ldd	r25, Y+36	; 0x24
     fec:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__divsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8e a7       	std	Y+46, r24	; 0x2e
     ff6:	9f a7       	std	Y+47, r25	; 0x2f
     ff8:	a8 ab       	std	Y+48, r26	; 0x30
     ffa:	b9 ab       	std	Y+49, r27	; 0x31
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	4a e7       	ldi	r20, 0x7A	; 122
    1002:	55 e4       	ldi	r21, 0x45	; 69
    1004:	6e a5       	ldd	r22, Y+46	; 0x2e
    1006:	7f a5       	ldd	r23, Y+47	; 0x2f
    1008:	88 a9       	ldd	r24, Y+48	; 0x30
    100a:	99 a9       	ldd	r25, Y+49	; 0x31
    100c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	8a ab       	std	Y+50, r24	; 0x32
    1016:	9b ab       	std	Y+51, r25	; 0x33
    1018:	ac ab       	std	Y+52, r26	; 0x34
    101a:	bd ab       	std	Y+53, r27	; 0x35
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e8       	ldi	r20, 0x80	; 128
    1022:	5f e3       	ldi	r21, 0x3F	; 63
    1024:	6a a9       	ldd	r22, Y+50	; 0x32
    1026:	7b a9       	ldd	r23, Y+51	; 0x33
    1028:	8c a9       	ldd	r24, Y+52	; 0x34
    102a:	9d a9       	ldd	r25, Y+53	; 0x35
    102c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__cmpsf2>
    1030:	88 23       	and	r24, r24
    1032:	2c f4       	brge	.+10     	; 0x103e <LCD_latch+0x2ee>
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9f ab       	std	Y+55, r25	; 0x37
    103a:	8e ab       	std	Y+54, r24	; 0x36
    103c:	3f c0       	rjmp	.+126    	; 0x10bc <LCD_latch+0x36c>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	3f ef       	ldi	r19, 0xFF	; 255
    1042:	4f e7       	ldi	r20, 0x7F	; 127
    1044:	57 e4       	ldi	r21, 0x47	; 71
    1046:	6a a9       	ldd	r22, Y+50	; 0x32
    1048:	7b a9       	ldd	r23, Y+51	; 0x33
    104a:	8c a9       	ldd	r24, Y+52	; 0x34
    104c:	9d a9       	ldd	r25, Y+53	; 0x35
    104e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
    1052:	18 16       	cp	r1, r24
    1054:	4c f5       	brge	.+82     	; 0x10a8 <LCD_latch+0x358>
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e2       	ldi	r20, 0x20	; 32
    105c:	51 e4       	ldi	r21, 0x41	; 65
    105e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1060:	7f a5       	ldd	r23, Y+47	; 0x2f
    1062:	88 a9       	ldd	r24, Y+48	; 0x30
    1064:	99 a9       	ldd	r25, Y+49	; 0x31
    1066:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9f ab       	std	Y+55, r25	; 0x37
    107c:	8e ab       	std	Y+54, r24	; 0x36
    107e:	0f c0       	rjmp	.+30     	; 0x109e <LCD_latch+0x34e>
    1080:	80 e9       	ldi	r24, 0x90	; 144
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	99 af       	std	Y+57, r25	; 0x39
    1086:	88 af       	std	Y+56, r24	; 0x38
    1088:	88 ad       	ldd	r24, Y+56	; 0x38
    108a:	99 ad       	ldd	r25, Y+57	; 0x39
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <LCD_latch+0x33c>
    1090:	99 af       	std	Y+57, r25	; 0x39
    1092:	88 af       	std	Y+56, r24	; 0x38
    1094:	8e a9       	ldd	r24, Y+54	; 0x36
    1096:	9f a9       	ldd	r25, Y+55	; 0x37
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	9f ab       	std	Y+55, r25	; 0x37
    109c:	8e ab       	std	Y+54, r24	; 0x36
    109e:	8e a9       	ldd	r24, Y+54	; 0x36
    10a0:	9f a9       	ldd	r25, Y+55	; 0x37
    10a2:	89 2b       	or	r24, r25
    10a4:	69 f7       	brne	.-38     	; 0x1080 <LCD_latch+0x330>
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <LCD_latch+0x3d6>
    10a8:	6a a9       	ldd	r22, Y+50	; 0x32
    10aa:	7b a9       	ldd	r23, Y+51	; 0x33
    10ac:	8c a9       	ldd	r24, Y+52	; 0x34
    10ae:	9d a9       	ldd	r25, Y+53	; 0x35
    10b0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	9f ab       	std	Y+55, r25	; 0x37
    10ba:	8e ab       	std	Y+54, r24	; 0x36
    10bc:	8e a9       	ldd	r24, Y+54	; 0x36
    10be:	9f a9       	ldd	r25, Y+55	; 0x37
    10c0:	9b af       	std	Y+59, r25	; 0x3b
    10c2:	8a af       	std	Y+58, r24	; 0x3a
    10c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    10c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <LCD_latch+0x378>
    10cc:	9b af       	std	Y+59, r25	; 0x3b
    10ce:	8a af       	std	Y+58, r24	; 0x3a
    10d0:	2a c0       	rjmp	.+84     	; 0x1126 <LCD_latch+0x3d6>
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	4f e7       	ldi	r20, 0x7F	; 127
    10d8:	53 e4       	ldi	r21, 0x43	; 67
    10da:	6d a1       	ldd	r22, Y+37	; 0x25
    10dc:	7e a1       	ldd	r23, Y+38	; 0x26
    10de:	8f a1       	ldd	r24, Y+39	; 0x27
    10e0:	98 a5       	ldd	r25, Y+40	; 0x28
    10e2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__gesf2>
    10e6:	18 16       	cp	r1, r24
    10e8:	ac f4       	brge	.+42     	; 0x1114 <LCD_latch+0x3c4>
    10ea:	69 a5       	ldd	r22, Y+41	; 0x29
    10ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    10ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    10f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    10f2:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9d af       	std	Y+61, r25	; 0x3d
    10fc:	8c af       	std	Y+60, r24	; 0x3c
    10fe:	8c ad       	ldd	r24, Y+60	; 0x3c
    1100:	9d ad       	ldd	r25, Y+61	; 0x3d
    1102:	9f af       	std	Y+63, r25	; 0x3f
    1104:	8e af       	std	Y+62, r24	; 0x3e
    1106:	8e ad       	ldd	r24, Y+62	; 0x3e
    1108:	9f ad       	ldd	r25, Y+63	; 0x3f
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <LCD_latch+0x3ba>
    110e:	9f af       	std	Y+63, r25	; 0x3f
    1110:	8e af       	std	Y+62, r24	; 0x3e
    1112:	1c c0       	rjmp	.+56     	; 0x114c <LCD_latch+0x3fc>
    1114:	6d a1       	ldd	r22, Y+37	; 0x25
    1116:	7e a1       	ldd	r23, Y+38	; 0x26
    1118:	8f a1       	ldd	r24, Y+39	; 0x27
    111a:	98 a5       	ldd	r25, Y+40	; 0x28
    111c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8d a7       	std	Y+45, r24	; 0x2d
    1126:	2d a5       	ldd	r18, Y+45	; 0x2d
    1128:	ce 01       	movw	r24, r28
    112a:	80 5c       	subi	r24, 0xC0	; 192
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	fc 01       	movw	r30, r24
    1130:	20 83       	st	Z, r18
    1132:	ce 01       	movw	r24, r28
    1134:	80 5c       	subi	r24, 0xC0	; 192
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	fc 01       	movw	r30, r24
    113a:	80 81       	ld	r24, Z
    113c:	28 2f       	mov	r18, r24
    113e:	2a 95       	dec	r18
    1140:	f1 f7       	brne	.-4      	; 0x113e <LCD_latch+0x3ee>
    1142:	ce 01       	movw	r24, r28
    1144:	80 5c       	subi	r24, 0xC0	; 192
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	fc 01       	movw	r30, r24
    114a:	20 83       	st	Z, r18
    114c:	c0 5c       	subi	r28, 0xC0	; 192
    114e:	df 4f       	sbci	r29, 0xFF	; 255
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	08 95       	ret

00001160 <disp_char>:
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	1f 92       	push	r1
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	0e 94 97 06 	call	0xd2e	; 0xd2e <LCD_send_data>
    1172:	0f 90       	pop	r0
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <disp_str>:
void disp_str(u8* str)
{
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	00 d0       	rcall	.+0      	; 0x1180 <disp_str+0x6>
    1180:	1f 92       	push	r1
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	9b 83       	std	Y+3, r25	; 0x03
    1188:	8a 83       	std	Y+2, r24	; 0x02
	u8 indx=0;
    118a:	19 82       	std	Y+1, r1	; 0x01
	while(str[indx]!='\0')
    118c:	0e c0       	rjmp	.+28     	; 0x11aa <disp_str+0x30>
	{
		disp_char(indx[str]);
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	2a 81       	ldd	r18, Y+2	; 0x02
    1196:	3b 81       	ldd	r19, Y+3	; 0x03
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	fc 01       	movw	r30, r24
    119e:	80 81       	ld	r24, Z
    11a0:	0e 94 b0 08 	call	0x1160	; 0x1160 <disp_char>
		indx++;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	8f 5f       	subi	r24, 0xFF	; 255
    11a8:	89 83       	std	Y+1, r24	; 0x01
	disp_char(letter);	
}
void disp_str(u8* str)
{
	u8 indx=0;
	while(str[indx]!='\0')
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	2a 81       	ldd	r18, Y+2	; 0x02
    11b2:	3b 81       	ldd	r19, Y+3	; 0x03
    11b4:	82 0f       	add	r24, r18
    11b6:	93 1f       	adc	r25, r19
    11b8:	fc 01       	movw	r30, r24
    11ba:	80 81       	ld	r24, Z
    11bc:	88 23       	and	r24, r24
    11be:	39 f7       	brne	.-50     	; 0x118e <disp_str+0x14>
	{
		disp_char(indx[str]);
		indx++;
	}
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <LCD_GOTXY+0x6>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	6a 83       	std	Y+2, r22	; 0x02
	if (row==1)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	29 f4       	brne	.+10     	; 0x11ea <LCD_GOTXY+0x1e>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	81 58       	subi	r24, 0x81	; 129
    11e4:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_send_cmd>
    11e8:	07 c0       	rjmp	.+14     	; 0x11f8 <LCD_GOTXY+0x2c>
	}
	else if(row==2)
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <LCD_GOTXY+0x2c>
	{
		LCD_send_cmd(DDRAM_ADD+0x40+col-1);	
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	81 54       	subi	r24, 0x41	; 65
    11f4:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_send_cmd>
	}
	else{}
	
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <disp_strXY>:

void disp_strXY(u8 row,u8 col,u8* str)
{
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	00 d0       	rcall	.+0      	; 0x1208 <disp_strXY+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <disp_strXY+0x8>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	6a 83       	std	Y+2, r22	; 0x02
    1212:	5c 83       	std	Y+4, r21	; 0x04
    1214:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GOTXY(row,col);
    1216:	6a 81       	ldd	r22, Y+2	; 0x02
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <LCD_GOTXY>
	disp_str(str);
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	0e 94 bd 08 	call	0x117a	; 0x117a <disp_str>
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <writePin>:
 *  Author: Mohamed
 */ 
#include "includes.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	00 d0       	rcall	.+0      	; 0x123a <writePin+0x6>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	6a 83       	std	Y+2, r22	; 0x02
	if((pinNo>=PA0)&&(pinNo<=PA7)){
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	88 30       	cpi	r24, 0x08	; 8
    1246:	90 f5       	brcc	.+100    	; 0x12ac <writePin+0x78>
		if(logic==HIGH)
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	a9 f4       	brne	.+42     	; 0x1278 <writePin+0x44>
			SETBit(PORTA,(pinNo-PORTA_OFFSET));
    124e:	8b e3       	ldi	r24, 0x3B	; 59
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	2b e3       	ldi	r18, 0x3B	; 59
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	f9 01       	movw	r30, r18
    1258:	20 81       	ld	r18, Z
    125a:	62 2f       	mov	r22, r18
    125c:	29 81       	ldd	r18, Y+1	; 0x01
    125e:	42 2f       	mov	r20, r18
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	21 e0       	ldi	r18, 0x01	; 1
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <writePin+0x38>
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	4a 95       	dec	r20
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <writePin+0x34>
    1270:	26 2b       	or	r18, r22
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
    1276:	d0 c0       	rjmp	.+416    	; 0x1418 <writePin+0x1e4>
		else if(logic==LOW)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	88 23       	and	r24, r24
    127c:	09 f0       	breq	.+2      	; 0x1280 <writePin+0x4c>
    127e:	cc c0       	rjmp	.+408    	; 0x1418 <writePin+0x1e4>
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
    1280:	8b e3       	ldi	r24, 0x3B	; 59
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	2b e3       	ldi	r18, 0x3B	; 59
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	f9 01       	movw	r30, r18
    128a:	20 81       	ld	r18, Z
    128c:	62 2f       	mov	r22, r18
    128e:	29 81       	ldd	r18, Y+1	; 0x01
    1290:	42 2f       	mov	r20, r18
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	21 e0       	ldi	r18, 0x01	; 1
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	02 c0       	rjmp	.+4      	; 0x129e <writePin+0x6a>
    129a:	22 0f       	add	r18, r18
    129c:	33 1f       	adc	r19, r19
    129e:	4a 95       	dec	r20
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <writePin+0x66>
    12a2:	20 95       	com	r18
    12a4:	26 23       	and	r18, r22
    12a6:	fc 01       	movw	r30, r24
    12a8:	20 83       	st	Z, r18
    12aa:	b6 c0       	rjmp	.+364    	; 0x1418 <writePin+0x1e4>
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	88 30       	cpi	r24, 0x08	; 8
    12b0:	d0 f1       	brcs	.+116    	; 0x1326 <writePin+0xf2>
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	80 31       	cpi	r24, 0x10	; 16
    12b6:	b8 f5       	brcc	.+110    	; 0x1326 <writePin+0xf2>
		if(logic==HIGH)
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	c1 f4       	brne	.+48     	; 0x12ee <writePin+0xba>
			SETBit(PORTB,(pinNo-PORTB_OFFSET));
    12be:	88 e3       	ldi	r24, 0x38	; 56
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	28 e3       	ldi	r18, 0x38	; 56
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	f9 01       	movw	r30, r18
    12c8:	20 81       	ld	r18, Z
    12ca:	62 2f       	mov	r22, r18
    12cc:	29 81       	ldd	r18, Y+1	; 0x01
    12ce:	22 2f       	mov	r18, r18
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	48 50       	subi	r20, 0x08	; 8
    12d6:	51 09       	sbc	r21, r1
    12d8:	21 e0       	ldi	r18, 0x01	; 1
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <writePin+0xae>
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	4a 95       	dec	r20
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <writePin+0xaa>
    12e6:	26 2b       	or	r18, r22
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18
    12ec:	1b c0       	rjmp	.+54     	; 0x1324 <writePin+0xf0>
		else if(logic==LOW)
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	88 23       	and	r24, r24
    12f2:	c1 f4       	brne	.+48     	; 0x1324 <writePin+0xf0>
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
    12f4:	88 e3       	ldi	r24, 0x38	; 56
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	28 e3       	ldi	r18, 0x38	; 56
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	f9 01       	movw	r30, r18
    12fe:	20 81       	ld	r18, Z
    1300:	62 2f       	mov	r22, r18
    1302:	29 81       	ldd	r18, Y+1	; 0x01
    1304:	22 2f       	mov	r18, r18
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	48 50       	subi	r20, 0x08	; 8
    130c:	51 09       	sbc	r21, r1
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <writePin+0xe4>
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	4a 95       	dec	r20
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <writePin+0xe0>
    131c:	20 95       	com	r18
    131e:	26 23       	and	r18, r22
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
		if(logic==HIGH)
    1324:	79 c0       	rjmp	.+242    	; 0x1418 <writePin+0x1e4>
		else if(logic==LOW)
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	80 31       	cpi	r24, 0x10	; 16
    132a:	d0 f1       	brcs	.+116    	; 0x13a0 <writePin+0x16c>
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	88 31       	cpi	r24, 0x18	; 24
    1330:	b8 f5       	brcc	.+110    	; 0x13a0 <writePin+0x16c>
		if(logic==HIGH)
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	c1 f4       	brne	.+48     	; 0x1368 <writePin+0x134>
			SETBit(PORTC,(pinNo-PORTC_OFFSET));
    1338:	85 e3       	ldi	r24, 0x35	; 53
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	25 e3       	ldi	r18, 0x35	; 53
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	f9 01       	movw	r30, r18
    1342:	20 81       	ld	r18, Z
    1344:	62 2f       	mov	r22, r18
    1346:	29 81       	ldd	r18, Y+1	; 0x01
    1348:	22 2f       	mov	r18, r18
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	40 51       	subi	r20, 0x10	; 16
    1350:	51 09       	sbc	r21, r1
    1352:	21 e0       	ldi	r18, 0x01	; 1
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <writePin+0x128>
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	4a 95       	dec	r20
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <writePin+0x124>
    1360:	26 2b       	or	r18, r22
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
    1366:	1b c0       	rjmp	.+54     	; 0x139e <writePin+0x16a>
		else if(logic==LOW)
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	88 23       	and	r24, r24
    136c:	c1 f4       	brne	.+48     	; 0x139e <writePin+0x16a>
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
    136e:	85 e3       	ldi	r24, 0x35	; 53
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	25 e3       	ldi	r18, 0x35	; 53
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	f9 01       	movw	r30, r18
    1378:	20 81       	ld	r18, Z
    137a:	62 2f       	mov	r22, r18
    137c:	29 81       	ldd	r18, Y+1	; 0x01
    137e:	22 2f       	mov	r18, r18
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	a9 01       	movw	r20, r18
    1384:	40 51       	subi	r20, 0x10	; 16
    1386:	51 09       	sbc	r21, r1
    1388:	21 e0       	ldi	r18, 0x01	; 1
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <writePin+0x15e>
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	4a 95       	dec	r20
    1394:	e2 f7       	brpl	.-8      	; 0x138e <writePin+0x15a>
    1396:	20 95       	com	r18
    1398:	26 23       	and	r18, r22
    139a:	fc 01       	movw	r30, r24
    139c:	20 83       	st	Z, r18
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
		if(logic==HIGH)
    139e:	3c c0       	rjmp	.+120    	; 0x1418 <writePin+0x1e4>
		else if(logic==LOW)
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
		else{}
	}
	
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	88 31       	cpi	r24, 0x18	; 24
    13a4:	c8 f1       	brcs	.+114    	; 0x1418 <writePin+0x1e4>
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	80 32       	cpi	r24, 0x20	; 32
    13aa:	b0 f5       	brcc	.+108    	; 0x1418 <writePin+0x1e4>
		if(logic==HIGH)
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	c1 f4       	brne	.+48     	; 0x13e2 <writePin+0x1ae>
			SETBit(PORTD,(pinNo-PORTD_OFFSET));
    13b2:	82 e3       	ldi	r24, 0x32	; 50
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	22 e3       	ldi	r18, 0x32	; 50
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	f9 01       	movw	r30, r18
    13bc:	20 81       	ld	r18, Z
    13be:	62 2f       	mov	r22, r18
    13c0:	29 81       	ldd	r18, Y+1	; 0x01
    13c2:	22 2f       	mov	r18, r18
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	48 51       	subi	r20, 0x18	; 24
    13ca:	51 09       	sbc	r21, r1
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <writePin+0x1a2>
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	4a 95       	dec	r20
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <writePin+0x19e>
    13da:	26 2b       	or	r18, r22
    13dc:	fc 01       	movw	r30, r24
    13de:	20 83       	st	Z, r18
    13e0:	1b c0       	rjmp	.+54     	; 0x1418 <writePin+0x1e4>
		else if(logic==LOW)
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	88 23       	and	r24, r24
    13e6:	c1 f4       	brne	.+48     	; 0x1418 <writePin+0x1e4>
			CLRBit(PORTD,(pinNo-PORTD_OFFSET));
    13e8:	82 e3       	ldi	r24, 0x32	; 50
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	22 e3       	ldi	r18, 0x32	; 50
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	f9 01       	movw	r30, r18
    13f2:	20 81       	ld	r18, Z
    13f4:	62 2f       	mov	r22, r18
    13f6:	29 81       	ldd	r18, Y+1	; 0x01
    13f8:	22 2f       	mov	r18, r18
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	a9 01       	movw	r20, r18
    13fe:	48 51       	subi	r20, 0x18	; 24
    1400:	51 09       	sbc	r21, r1
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <writePin+0x1d8>
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	4a 95       	dec	r20
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <writePin+0x1d4>
    1410:	20 95       	com	r18
    1412:	26 23       	and	r18, r22
    1414:	fc 01       	movw	r30, r24
    1416:	20 83       	st	Z, r18
		else{}
	}
	else{}
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <pinDirection>:
void pinDirection(u8 pinNo, u8 direction){
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	00 d0       	rcall	.+0      	; 0x1428 <pinDirection+0x6>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	6a 83       	std	Y+2, r22	; 0x02
	if((pinNo >= PA0) && (pinNo <= PA7)){
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	88 30       	cpi	r24, 0x08	; 8
    1434:	90 f5       	brcc	.+100    	; 0x149a <pinDirection+0x78>
		if(direction == OUTPUT)
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	a9 f4       	brne	.+42     	; 0x1466 <pinDirection+0x44>
			SETBit(DDRA,(pinNo-PORTA_OFFSET));
    143c:	8a e3       	ldi	r24, 0x3A	; 58
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	2a e3       	ldi	r18, 0x3A	; 58
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	f9 01       	movw	r30, r18
    1446:	20 81       	ld	r18, Z
    1448:	62 2f       	mov	r22, r18
    144a:	29 81       	ldd	r18, Y+1	; 0x01
    144c:	42 2f       	mov	r20, r18
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	21 e0       	ldi	r18, 0x01	; 1
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <pinDirection+0x38>
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	4a 95       	dec	r20
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <pinDirection+0x34>
    145e:	26 2b       	or	r18, r22
    1460:	fc 01       	movw	r30, r24
    1462:	20 83       	st	Z, r18
    1464:	d0 c0       	rjmp	.+416    	; 0x1606 <pinDirection+0x1e4>
		else if(direction == INPUT)
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	88 23       	and	r24, r24
    146a:	09 f0       	breq	.+2      	; 0x146e <pinDirection+0x4c>
    146c:	cc c0       	rjmp	.+408    	; 0x1606 <pinDirection+0x1e4>
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
    146e:	8a e3       	ldi	r24, 0x3A	; 58
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	2a e3       	ldi	r18, 0x3A	; 58
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	f9 01       	movw	r30, r18
    1478:	20 81       	ld	r18, Z
    147a:	62 2f       	mov	r22, r18
    147c:	29 81       	ldd	r18, Y+1	; 0x01
    147e:	42 2f       	mov	r20, r18
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	02 c0       	rjmp	.+4      	; 0x148c <pinDirection+0x6a>
    1488:	22 0f       	add	r18, r18
    148a:	33 1f       	adc	r19, r19
    148c:	4a 95       	dec	r20
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <pinDirection+0x66>
    1490:	20 95       	com	r18
    1492:	26 23       	and	r18, r22
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
    1498:	b6 c0       	rjmp	.+364    	; 0x1606 <pinDirection+0x1e4>
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	88 30       	cpi	r24, 0x08	; 8
    149e:	d0 f1       	brcs	.+116    	; 0x1514 <pinDirection+0xf2>
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	80 31       	cpi	r24, 0x10	; 16
    14a4:	b8 f5       	brcc	.+110    	; 0x1514 <pinDirection+0xf2>
		if(direction == OUTPUT)
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	c1 f4       	brne	.+48     	; 0x14dc <pinDirection+0xba>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
    14ac:	87 e3       	ldi	r24, 0x37	; 55
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	27 e3       	ldi	r18, 0x37	; 55
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	f9 01       	movw	r30, r18
    14b6:	20 81       	ld	r18, Z
    14b8:	62 2f       	mov	r22, r18
    14ba:	29 81       	ldd	r18, Y+1	; 0x01
    14bc:	22 2f       	mov	r18, r18
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	a9 01       	movw	r20, r18
    14c2:	48 50       	subi	r20, 0x08	; 8
    14c4:	51 09       	sbc	r21, r1
    14c6:	21 e0       	ldi	r18, 0x01	; 1
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <pinDirection+0xae>
    14cc:	22 0f       	add	r18, r18
    14ce:	33 1f       	adc	r19, r19
    14d0:	4a 95       	dec	r20
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <pinDirection+0xaa>
    14d4:	26 2b       	or	r18, r22
    14d6:	fc 01       	movw	r30, r24
    14d8:	20 83       	st	Z, r18
    14da:	1b c0       	rjmp	.+54     	; 0x1512 <pinDirection+0xf0>
		else if(direction == LOW)
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	88 23       	and	r24, r24
    14e0:	c1 f4       	brne	.+48     	; 0x1512 <pinDirection+0xf0>
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
    14e2:	87 e3       	ldi	r24, 0x37	; 55
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	27 e3       	ldi	r18, 0x37	; 55
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	f9 01       	movw	r30, r18
    14ec:	20 81       	ld	r18, Z
    14ee:	62 2f       	mov	r22, r18
    14f0:	29 81       	ldd	r18, Y+1	; 0x01
    14f2:	22 2f       	mov	r18, r18
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	a9 01       	movw	r20, r18
    14f8:	48 50       	subi	r20, 0x08	; 8
    14fa:	51 09       	sbc	r21, r1
    14fc:	21 e0       	ldi	r18, 0x01	; 1
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <pinDirection+0xe4>
    1502:	22 0f       	add	r18, r18
    1504:	33 1f       	adc	r19, r19
    1506:	4a 95       	dec	r20
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <pinDirection+0xe0>
    150a:	20 95       	com	r18
    150c:	26 23       	and	r18, r22
    150e:	fc 01       	movw	r30, r24
    1510:	20 83       	st	Z, r18
		else if(direction == INPUT)
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
		if(direction == OUTPUT)
    1512:	79 c0       	rjmp	.+242    	; 0x1606 <pinDirection+0x1e4>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
		else if(direction == LOW)
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	80 31       	cpi	r24, 0x10	; 16
    1518:	d0 f1       	brcs	.+116    	; 0x158e <pinDirection+0x16c>
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	88 31       	cpi	r24, 0x18	; 24
    151e:	b8 f5       	brcc	.+110    	; 0x158e <pinDirection+0x16c>
		if(direction == OUTPUT)
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	c1 f4       	brne	.+48     	; 0x1556 <pinDirection+0x134>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
    1526:	84 e3       	ldi	r24, 0x34	; 52
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	24 e3       	ldi	r18, 0x34	; 52
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	f9 01       	movw	r30, r18
    1530:	20 81       	ld	r18, Z
    1532:	62 2f       	mov	r22, r18
    1534:	29 81       	ldd	r18, Y+1	; 0x01
    1536:	22 2f       	mov	r18, r18
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	a9 01       	movw	r20, r18
    153c:	40 51       	subi	r20, 0x10	; 16
    153e:	51 09       	sbc	r21, r1
    1540:	21 e0       	ldi	r18, 0x01	; 1
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <pinDirection+0x128>
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	4a 95       	dec	r20
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <pinDirection+0x124>
    154e:	26 2b       	or	r18, r22
    1550:	fc 01       	movw	r30, r24
    1552:	20 83       	st	Z, r18
    1554:	1b c0       	rjmp	.+54     	; 0x158c <pinDirection+0x16a>
		else if(direction==INPUT)
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	88 23       	and	r24, r24
    155a:	c1 f4       	brne	.+48     	; 0x158c <pinDirection+0x16a>
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
    155c:	84 e3       	ldi	r24, 0x34	; 52
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	24 e3       	ldi	r18, 0x34	; 52
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	f9 01       	movw	r30, r18
    1566:	20 81       	ld	r18, Z
    1568:	62 2f       	mov	r22, r18
    156a:	29 81       	ldd	r18, Y+1	; 0x01
    156c:	22 2f       	mov	r18, r18
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	a9 01       	movw	r20, r18
    1572:	40 51       	subi	r20, 0x10	; 16
    1574:	51 09       	sbc	r21, r1
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <pinDirection+0x15e>
    157c:	22 0f       	add	r18, r18
    157e:	33 1f       	adc	r19, r19
    1580:	4a 95       	dec	r20
    1582:	e2 f7       	brpl	.-8      	; 0x157c <pinDirection+0x15a>
    1584:	20 95       	com	r18
    1586:	26 23       	and	r18, r22
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
		else if(direction == LOW)
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
		if(direction == OUTPUT)
    158c:	3c c0       	rjmp	.+120    	; 0x1606 <pinDirection+0x1e4>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
		else if(direction==INPUT)
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	88 31       	cpi	r24, 0x18	; 24
    1592:	c8 f1       	brcs	.+114    	; 0x1606 <pinDirection+0x1e4>
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	80 32       	cpi	r24, 0x20	; 32
    1598:	b0 f5       	brcc	.+108    	; 0x1606 <pinDirection+0x1e4>
		if(direction == OUTPUT)
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	c1 f4       	brne	.+48     	; 0x15d0 <pinDirection+0x1ae>
			SETBit(DDRD,(pinNo-PORTD_OFFSET));
    15a0:	81 e3       	ldi	r24, 0x31	; 49
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	21 e3       	ldi	r18, 0x31	; 49
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	f9 01       	movw	r30, r18
    15aa:	20 81       	ld	r18, Z
    15ac:	62 2f       	mov	r22, r18
    15ae:	29 81       	ldd	r18, Y+1	; 0x01
    15b0:	22 2f       	mov	r18, r18
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	a9 01       	movw	r20, r18
    15b6:	48 51       	subi	r20, 0x18	; 24
    15b8:	51 09       	sbc	r21, r1
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <pinDirection+0x1a2>
    15c0:	22 0f       	add	r18, r18
    15c2:	33 1f       	adc	r19, r19
    15c4:	4a 95       	dec	r20
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <pinDirection+0x19e>
    15c8:	26 2b       	or	r18, r22
    15ca:	fc 01       	movw	r30, r24
    15cc:	20 83       	st	Z, r18
    15ce:	1b c0       	rjmp	.+54     	; 0x1606 <pinDirection+0x1e4>
		else if(direction == INPUT)
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	88 23       	and	r24, r24
    15d4:	c1 f4       	brne	.+48     	; 0x1606 <pinDirection+0x1e4>
			CLRBit(DDRD,(pinNo-PORTD_OFFSET));
    15d6:	81 e3       	ldi	r24, 0x31	; 49
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	21 e3       	ldi	r18, 0x31	; 49
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	f9 01       	movw	r30, r18
    15e0:	20 81       	ld	r18, Z
    15e2:	62 2f       	mov	r22, r18
    15e4:	29 81       	ldd	r18, Y+1	; 0x01
    15e6:	22 2f       	mov	r18, r18
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	48 51       	subi	r20, 0x18	; 24
    15ee:	51 09       	sbc	r21, r1
    15f0:	21 e0       	ldi	r18, 0x01	; 1
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <pinDirection+0x1d8>
    15f6:	22 0f       	add	r18, r18
    15f8:	33 1f       	adc	r19, r19
    15fa:	4a 95       	dec	r20
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <pinDirection+0x1d4>
    15fe:	20 95       	com	r18
    1600:	26 23       	and	r18, r22
    1602:	fc 01       	movw	r30, r24
    1604:	20 83       	st	Z, r18
		else{}
	}
	else{}
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <readPin>:

u8 readPin(u8 pinNo){
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	00 d0       	rcall	.+0      	; 0x1616 <readPin+0x6>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	8a 83       	std	Y+2, r24	; 0x02
	u8 result=0;
    161c:	19 82       	std	Y+1, r1	; 0x01
	if((pinNo>=PA0)&&(pinNo<=PA7))
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	88 30       	cpi	r24, 0x08	; 8
    1622:	88 f4       	brcc	.+34     	; 0x1646 <readPin+0x36>
		result=GETBit(PINA,(pinNo-PORTA_OFFSET));
    1624:	89 e3       	ldi	r24, 0x39	; 57
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	fc 01       	movw	r30, r24
    162a:	80 81       	ld	r24, Z
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	2a 81       	ldd	r18, Y+2	; 0x02
    1632:	22 2f       	mov	r18, r18
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <readPin+0x2c>
    1638:	95 95       	asr	r25
    163a:	87 95       	ror	r24
    163c:	2a 95       	dec	r18
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <readPin+0x28>
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	4a c0       	rjmp	.+148    	; 0x16da <readPin+0xca>
	else if((pinNo>=PB0)&&(pinNo<=PB7))
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	88 30       	cpi	r24, 0x08	; 8
    164a:	b0 f0       	brcs	.+44     	; 0x1678 <readPin+0x68>
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	80 31       	cpi	r24, 0x10	; 16
    1650:	98 f4       	brcc	.+38     	; 0x1678 <readPin+0x68>
		result=GETBit(PINB,(pinNo-PORTB_OFFSET));
    1652:	86 e3       	ldi	r24, 0x36	; 54
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	fc 01       	movw	r30, r24
    1658:	80 81       	ld	r24, Z
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	2a 81       	ldd	r18, Y+2	; 0x02
    1660:	22 2f       	mov	r18, r18
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	28 50       	subi	r18, 0x08	; 8
    1666:	31 09       	sbc	r19, r1
    1668:	02 c0       	rjmp	.+4      	; 0x166e <readPin+0x5e>
    166a:	95 95       	asr	r25
    166c:	87 95       	ror	r24
    166e:	2a 95       	dec	r18
    1670:	e2 f7       	brpl	.-8      	; 0x166a <readPin+0x5a>
    1672:	81 70       	andi	r24, 0x01	; 1
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	31 c0       	rjmp	.+98     	; 0x16da <readPin+0xca>
	else if((pinNo>=PC0)&&(pinNo<=PC7))
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	80 31       	cpi	r24, 0x10	; 16
    167c:	b0 f0       	brcs	.+44     	; 0x16aa <readPin+0x9a>
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	88 31       	cpi	r24, 0x18	; 24
    1682:	98 f4       	brcc	.+38     	; 0x16aa <readPin+0x9a>
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
    1684:	83 e3       	ldi	r24, 0x33	; 51
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	2a 81       	ldd	r18, Y+2	; 0x02
    1692:	22 2f       	mov	r18, r18
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	20 51       	subi	r18, 0x10	; 16
    1698:	31 09       	sbc	r19, r1
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <readPin+0x90>
    169c:	95 95       	asr	r25
    169e:	87 95       	ror	r24
    16a0:	2a 95       	dec	r18
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <readPin+0x8c>
    16a4:	81 70       	andi	r24, 0x01	; 1
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	18 c0       	rjmp	.+48     	; 0x16da <readPin+0xca>
	else if((pinNo>=PD0)&&(pinNo<=PD7))
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	88 31       	cpi	r24, 0x18	; 24
    16ae:	a8 f0       	brcs	.+42     	; 0x16da <readPin+0xca>
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 32       	cpi	r24, 0x20	; 32
    16b4:	90 f4       	brcc	.+36     	; 0x16da <readPin+0xca>
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
    16b6:	80 e3       	ldi	r24, 0x30	; 48
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	fc 01       	movw	r30, r24
    16bc:	80 81       	ld	r24, Z
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	2a 81       	ldd	r18, Y+2	; 0x02
    16c4:	22 2f       	mov	r18, r18
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	28 51       	subi	r18, 0x18	; 24
    16ca:	31 09       	sbc	r19, r1
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <readPin+0xc2>
    16ce:	95 95       	asr	r25
    16d0:	87 95       	ror	r24
    16d2:	2a 95       	dec	r18
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <readPin+0xbe>
    16d6:	81 70       	andi	r24, 0x01	; 1
    16d8:	89 83       	std	Y+1, r24	; 0x01
	else{}
	return result;
    16da:	89 81       	ldd	r24, Y+1	; 0x01
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <writePins+0x6>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <writePins+0x8>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	6b 83       	std	Y+3, r22	; 0x03
    16f8:	4c 83       	std	Y+4, r20	; 0x04
	if(logic==HIGH)
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	61 f4       	brne	.+24     	; 0x1718 <writePins+0x32>
		SETBits(*port,mask);
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	fc 01       	movw	r30, r24
    1706:	90 81       	ld	r25, Z
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	29 2f       	mov	r18, r25
    170c:	28 2b       	or	r18, r24
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	fc 01       	movw	r30, r24
    1714:	20 83       	st	Z, r18
    1716:	10 c0       	rjmp	.+32     	; 0x1738 <writePins+0x52>
	else if(logic==LOW)
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	88 23       	and	r24, r24
    171c:	69 f4       	brne	.+26     	; 0x1738 <writePins+0x52>
		CLRBits(*port,mask);
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	98 2f       	mov	r25, r24
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	80 95       	com	r24
    172c:	89 23       	and	r24, r25
    172e:	28 2f       	mov	r18, r24
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	9a 81       	ldd	r25, Y+2	; 0x02
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
	else{}
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret

00001746 <pinsDirection>:
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	00 d0       	rcall	.+0      	; 0x174c <pinsDirection+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <pinsDirection+0x8>
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	6b 83       	std	Y+3, r22	; 0x03
    1758:	4c 83       	std	Y+4, r20	; 0x04
	if(direction == OUTPUT)
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	61 f4       	brne	.+24     	; 0x1778 <pinsDirection+0x32>
		SETBits(*ddr,mask);
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	fc 01       	movw	r30, r24
    1766:	90 81       	ld	r25, Z
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	29 2f       	mov	r18, r25
    176c:	28 2b       	or	r18, r24
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	fc 01       	movw	r30, r24
    1774:	20 83       	st	Z, r18
    1776:	10 c0       	rjmp	.+32     	; 0x1798 <pinsDirection+0x52>
	else if(direction == INPUT)
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	88 23       	and	r24, r24
    177c:	69 f4       	brne	.+26     	; 0x1798 <pinsDirection+0x52>
		CLRBits(*ddr,mask);
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	fc 01       	movw	r30, r24
    1784:	80 81       	ld	r24, Z
    1786:	98 2f       	mov	r25, r24
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	80 95       	com	r24
    178c:	89 23       	and	r24, r25
    178e:	28 2f       	mov	r18, r24
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	fc 01       	movw	r30, r24
    1796:	20 83       	st	Z, r18
	else{}
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <__cmpsf2>:
    17a6:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_cmp>
    17aa:	08 f4       	brcc	.+2      	; 0x17ae <__cmpsf2+0x8>
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	08 95       	ret

000017b0 <__divsf3>:
    17b0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__divsf3x>
    17b4:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_round>
    17b8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__fp_pscB>
    17bc:	58 f0       	brcs	.+22     	; 0x17d4 <__divsf3+0x24>
    17be:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__fp_pscA>
    17c2:	40 f0       	brcs	.+16     	; 0x17d4 <__divsf3+0x24>
    17c4:	29 f4       	brne	.+10     	; 0x17d0 <__divsf3+0x20>
    17c6:	5f 3f       	cpi	r21, 0xFF	; 255
    17c8:	29 f0       	breq	.+10     	; 0x17d4 <__divsf3+0x24>
    17ca:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__fp_inf>
    17ce:	51 11       	cpse	r21, r1
    17d0:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_szero>
    17d4:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__fp_nan>

000017d8 <__divsf3x>:
    17d8:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__fp_split3>
    17dc:	68 f3       	brcs	.-38     	; 0x17b8 <__divsf3+0x8>

000017de <__divsf3_pse>:
    17de:	99 23       	and	r25, r25
    17e0:	b1 f3       	breq	.-20     	; 0x17ce <__divsf3+0x1e>
    17e2:	55 23       	and	r21, r21
    17e4:	91 f3       	breq	.-28     	; 0x17ca <__divsf3+0x1a>
    17e6:	95 1b       	sub	r25, r21
    17e8:	55 0b       	sbc	r21, r21
    17ea:	bb 27       	eor	r27, r27
    17ec:	aa 27       	eor	r26, r26
    17ee:	62 17       	cp	r22, r18
    17f0:	73 07       	cpc	r23, r19
    17f2:	84 07       	cpc	r24, r20
    17f4:	38 f0       	brcs	.+14     	; 0x1804 <__divsf3_pse+0x26>
    17f6:	9f 5f       	subi	r25, 0xFF	; 255
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	22 0f       	add	r18, r18
    17fc:	33 1f       	adc	r19, r19
    17fe:	44 1f       	adc	r20, r20
    1800:	aa 1f       	adc	r26, r26
    1802:	a9 f3       	breq	.-22     	; 0x17ee <__divsf3_pse+0x10>
    1804:	35 d0       	rcall	.+106    	; 0x1870 <__divsf3_pse+0x92>
    1806:	0e 2e       	mov	r0, r30
    1808:	3a f0       	brmi	.+14     	; 0x1818 <__divsf3_pse+0x3a>
    180a:	e0 e8       	ldi	r30, 0x80	; 128
    180c:	32 d0       	rcall	.+100    	; 0x1872 <__divsf3_pse+0x94>
    180e:	91 50       	subi	r25, 0x01	; 1
    1810:	50 40       	sbci	r21, 0x00	; 0
    1812:	e6 95       	lsr	r30
    1814:	00 1c       	adc	r0, r0
    1816:	ca f7       	brpl	.-14     	; 0x180a <__divsf3_pse+0x2c>
    1818:	2b d0       	rcall	.+86     	; 0x1870 <__divsf3_pse+0x92>
    181a:	fe 2f       	mov	r31, r30
    181c:	29 d0       	rcall	.+82     	; 0x1870 <__divsf3_pse+0x92>
    181e:	66 0f       	add	r22, r22
    1820:	77 1f       	adc	r23, r23
    1822:	88 1f       	adc	r24, r24
    1824:	bb 1f       	adc	r27, r27
    1826:	26 17       	cp	r18, r22
    1828:	37 07       	cpc	r19, r23
    182a:	48 07       	cpc	r20, r24
    182c:	ab 07       	cpc	r26, r27
    182e:	b0 e8       	ldi	r27, 0x80	; 128
    1830:	09 f0       	breq	.+2      	; 0x1834 <__divsf3_pse+0x56>
    1832:	bb 0b       	sbc	r27, r27
    1834:	80 2d       	mov	r24, r0
    1836:	bf 01       	movw	r22, r30
    1838:	ff 27       	eor	r31, r31
    183a:	93 58       	subi	r25, 0x83	; 131
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	3a f0       	brmi	.+14     	; 0x184e <__divsf3_pse+0x70>
    1840:	9e 3f       	cpi	r25, 0xFE	; 254
    1842:	51 05       	cpc	r21, r1
    1844:	78 f0       	brcs	.+30     	; 0x1864 <__divsf3_pse+0x86>
    1846:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__fp_inf>
    184a:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_szero>
    184e:	5f 3f       	cpi	r21, 0xFF	; 255
    1850:	e4 f3       	brlt	.-8      	; 0x184a <__divsf3_pse+0x6c>
    1852:	98 3e       	cpi	r25, 0xE8	; 232
    1854:	d4 f3       	brlt	.-12     	; 0x184a <__divsf3_pse+0x6c>
    1856:	86 95       	lsr	r24
    1858:	77 95       	ror	r23
    185a:	67 95       	ror	r22
    185c:	b7 95       	ror	r27
    185e:	f7 95       	ror	r31
    1860:	9f 5f       	subi	r25, 0xFF	; 255
    1862:	c9 f7       	brne	.-14     	; 0x1856 <__divsf3_pse+0x78>
    1864:	88 0f       	add	r24, r24
    1866:	91 1d       	adc	r25, r1
    1868:	96 95       	lsr	r25
    186a:	87 95       	ror	r24
    186c:	97 f9       	bld	r25, 7
    186e:	08 95       	ret
    1870:	e1 e0       	ldi	r30, 0x01	; 1
    1872:	66 0f       	add	r22, r22
    1874:	77 1f       	adc	r23, r23
    1876:	88 1f       	adc	r24, r24
    1878:	bb 1f       	adc	r27, r27
    187a:	62 17       	cp	r22, r18
    187c:	73 07       	cpc	r23, r19
    187e:	84 07       	cpc	r24, r20
    1880:	ba 07       	cpc	r27, r26
    1882:	20 f0       	brcs	.+8      	; 0x188c <__divsf3_pse+0xae>
    1884:	62 1b       	sub	r22, r18
    1886:	73 0b       	sbc	r23, r19
    1888:	84 0b       	sbc	r24, r20
    188a:	ba 0b       	sbc	r27, r26
    188c:	ee 1f       	adc	r30, r30
    188e:	88 f7       	brcc	.-30     	; 0x1872 <__divsf3_pse+0x94>
    1890:	e0 95       	com	r30
    1892:	08 95       	ret

00001894 <__fixunssfsi>:
    1894:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__fp_splitA>
    1898:	88 f0       	brcs	.+34     	; 0x18bc <__fixunssfsi+0x28>
    189a:	9f 57       	subi	r25, 0x7F	; 127
    189c:	98 f0       	brcs	.+38     	; 0x18c4 <__fixunssfsi+0x30>
    189e:	b9 2f       	mov	r27, r25
    18a0:	99 27       	eor	r25, r25
    18a2:	b7 51       	subi	r27, 0x17	; 23
    18a4:	b0 f0       	brcs	.+44     	; 0x18d2 <__fixunssfsi+0x3e>
    18a6:	e1 f0       	breq	.+56     	; 0x18e0 <__fixunssfsi+0x4c>
    18a8:	66 0f       	add	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	1a f0       	brmi	.+6      	; 0x18b8 <__fixunssfsi+0x24>
    18b2:	ba 95       	dec	r27
    18b4:	c9 f7       	brne	.-14     	; 0x18a8 <__fixunssfsi+0x14>
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <__fixunssfsi+0x4c>
    18b8:	b1 30       	cpi	r27, 0x01	; 1
    18ba:	91 f0       	breq	.+36     	; 0x18e0 <__fixunssfsi+0x4c>
    18bc:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__fp_zero>
    18c0:	b1 e0       	ldi	r27, 0x01	; 1
    18c2:	08 95       	ret
    18c4:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__fp_zero>
    18c8:	67 2f       	mov	r22, r23
    18ca:	78 2f       	mov	r23, r24
    18cc:	88 27       	eor	r24, r24
    18ce:	b8 5f       	subi	r27, 0xF8	; 248
    18d0:	39 f0       	breq	.+14     	; 0x18e0 <__fixunssfsi+0x4c>
    18d2:	b9 3f       	cpi	r27, 0xF9	; 249
    18d4:	cc f3       	brlt	.-14     	; 0x18c8 <__fixunssfsi+0x34>
    18d6:	86 95       	lsr	r24
    18d8:	77 95       	ror	r23
    18da:	67 95       	ror	r22
    18dc:	b3 95       	inc	r27
    18de:	d9 f7       	brne	.-10     	; 0x18d6 <__fixunssfsi+0x42>
    18e0:	3e f4       	brtc	.+14     	; 0x18f0 <__fixunssfsi+0x5c>
    18e2:	90 95       	com	r25
    18e4:	80 95       	com	r24
    18e6:	70 95       	com	r23
    18e8:	61 95       	neg	r22
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8f 4f       	sbci	r24, 0xFF	; 255
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	08 95       	ret

000018f2 <__floatunsisf>:
    18f2:	e8 94       	clt
    18f4:	09 c0       	rjmp	.+18     	; 0x1908 <__floatsisf+0x12>

000018f6 <__floatsisf>:
    18f6:	97 fb       	bst	r25, 7
    18f8:	3e f4       	brtc	.+14     	; 0x1908 <__floatsisf+0x12>
    18fa:	90 95       	com	r25
    18fc:	80 95       	com	r24
    18fe:	70 95       	com	r23
    1900:	61 95       	neg	r22
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	99 23       	and	r25, r25
    190a:	a9 f0       	breq	.+42     	; 0x1936 <__floatsisf+0x40>
    190c:	f9 2f       	mov	r31, r25
    190e:	96 e9       	ldi	r25, 0x96	; 150
    1910:	bb 27       	eor	r27, r27
    1912:	93 95       	inc	r25
    1914:	f6 95       	lsr	r31
    1916:	87 95       	ror	r24
    1918:	77 95       	ror	r23
    191a:	67 95       	ror	r22
    191c:	b7 95       	ror	r27
    191e:	f1 11       	cpse	r31, r1
    1920:	f8 cf       	rjmp	.-16     	; 0x1912 <__floatsisf+0x1c>
    1922:	fa f4       	brpl	.+62     	; 0x1962 <__floatsisf+0x6c>
    1924:	bb 0f       	add	r27, r27
    1926:	11 f4       	brne	.+4      	; 0x192c <__floatsisf+0x36>
    1928:	60 ff       	sbrs	r22, 0
    192a:	1b c0       	rjmp	.+54     	; 0x1962 <__floatsisf+0x6c>
    192c:	6f 5f       	subi	r22, 0xFF	; 255
    192e:	7f 4f       	sbci	r23, 0xFF	; 255
    1930:	8f 4f       	sbci	r24, 0xFF	; 255
    1932:	9f 4f       	sbci	r25, 0xFF	; 255
    1934:	16 c0       	rjmp	.+44     	; 0x1962 <__floatsisf+0x6c>
    1936:	88 23       	and	r24, r24
    1938:	11 f0       	breq	.+4      	; 0x193e <__floatsisf+0x48>
    193a:	96 e9       	ldi	r25, 0x96	; 150
    193c:	11 c0       	rjmp	.+34     	; 0x1960 <__floatsisf+0x6a>
    193e:	77 23       	and	r23, r23
    1940:	21 f0       	breq	.+8      	; 0x194a <__floatsisf+0x54>
    1942:	9e e8       	ldi	r25, 0x8E	; 142
    1944:	87 2f       	mov	r24, r23
    1946:	76 2f       	mov	r23, r22
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <__floatsisf+0x5e>
    194a:	66 23       	and	r22, r22
    194c:	71 f0       	breq	.+28     	; 0x196a <__floatsisf+0x74>
    194e:	96 e8       	ldi	r25, 0x86	; 134
    1950:	86 2f       	mov	r24, r22
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	2a f0       	brmi	.+10     	; 0x1962 <__floatsisf+0x6c>
    1958:	9a 95       	dec	r25
    195a:	66 0f       	add	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	da f7       	brpl	.-10     	; 0x1958 <__floatsisf+0x62>
    1962:	88 0f       	add	r24, r24
    1964:	96 95       	lsr	r25
    1966:	87 95       	ror	r24
    1968:	97 f9       	bld	r25, 7
    196a:	08 95       	ret

0000196c <__fp_cmp>:
    196c:	99 0f       	add	r25, r25
    196e:	00 08       	sbc	r0, r0
    1970:	55 0f       	add	r21, r21
    1972:	aa 0b       	sbc	r26, r26
    1974:	e0 e8       	ldi	r30, 0x80	; 128
    1976:	fe ef       	ldi	r31, 0xFE	; 254
    1978:	16 16       	cp	r1, r22
    197a:	17 06       	cpc	r1, r23
    197c:	e8 07       	cpc	r30, r24
    197e:	f9 07       	cpc	r31, r25
    1980:	c0 f0       	brcs	.+48     	; 0x19b2 <__fp_cmp+0x46>
    1982:	12 16       	cp	r1, r18
    1984:	13 06       	cpc	r1, r19
    1986:	e4 07       	cpc	r30, r20
    1988:	f5 07       	cpc	r31, r21
    198a:	98 f0       	brcs	.+38     	; 0x19b2 <__fp_cmp+0x46>
    198c:	62 1b       	sub	r22, r18
    198e:	73 0b       	sbc	r23, r19
    1990:	84 0b       	sbc	r24, r20
    1992:	95 0b       	sbc	r25, r21
    1994:	39 f4       	brne	.+14     	; 0x19a4 <__fp_cmp+0x38>
    1996:	0a 26       	eor	r0, r26
    1998:	61 f0       	breq	.+24     	; 0x19b2 <__fp_cmp+0x46>
    199a:	23 2b       	or	r18, r19
    199c:	24 2b       	or	r18, r20
    199e:	25 2b       	or	r18, r21
    19a0:	21 f4       	brne	.+8      	; 0x19aa <__fp_cmp+0x3e>
    19a2:	08 95       	ret
    19a4:	0a 26       	eor	r0, r26
    19a6:	09 f4       	brne	.+2      	; 0x19aa <__fp_cmp+0x3e>
    19a8:	a1 40       	sbci	r26, 0x01	; 1
    19aa:	a6 95       	lsr	r26
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	81 1d       	adc	r24, r1
    19b0:	81 1d       	adc	r24, r1
    19b2:	08 95       	ret

000019b4 <__fp_inf>:
    19b4:	97 f9       	bld	r25, 7
    19b6:	9f 67       	ori	r25, 0x7F	; 127
    19b8:	80 e8       	ldi	r24, 0x80	; 128
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	08 95       	ret

000019c0 <__fp_nan>:
    19c0:	9f ef       	ldi	r25, 0xFF	; 255
    19c2:	80 ec       	ldi	r24, 0xC0	; 192
    19c4:	08 95       	ret

000019c6 <__fp_pscA>:
    19c6:	00 24       	eor	r0, r0
    19c8:	0a 94       	dec	r0
    19ca:	16 16       	cp	r1, r22
    19cc:	17 06       	cpc	r1, r23
    19ce:	18 06       	cpc	r1, r24
    19d0:	09 06       	cpc	r0, r25
    19d2:	08 95       	ret

000019d4 <__fp_pscB>:
    19d4:	00 24       	eor	r0, r0
    19d6:	0a 94       	dec	r0
    19d8:	12 16       	cp	r1, r18
    19da:	13 06       	cpc	r1, r19
    19dc:	14 06       	cpc	r1, r20
    19de:	05 06       	cpc	r0, r21
    19e0:	08 95       	ret

000019e2 <__fp_round>:
    19e2:	09 2e       	mov	r0, r25
    19e4:	03 94       	inc	r0
    19e6:	00 0c       	add	r0, r0
    19e8:	11 f4       	brne	.+4      	; 0x19ee <__fp_round+0xc>
    19ea:	88 23       	and	r24, r24
    19ec:	52 f0       	brmi	.+20     	; 0x1a02 <__fp_round+0x20>
    19ee:	bb 0f       	add	r27, r27
    19f0:	40 f4       	brcc	.+16     	; 0x1a02 <__fp_round+0x20>
    19f2:	bf 2b       	or	r27, r31
    19f4:	11 f4       	brne	.+4      	; 0x19fa <__fp_round+0x18>
    19f6:	60 ff       	sbrs	r22, 0
    19f8:	04 c0       	rjmp	.+8      	; 0x1a02 <__fp_round+0x20>
    19fa:	6f 5f       	subi	r22, 0xFF	; 255
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1a00:	9f 4f       	sbci	r25, 0xFF	; 255
    1a02:	08 95       	ret

00001a04 <__fp_split3>:
    1a04:	57 fd       	sbrc	r21, 7
    1a06:	90 58       	subi	r25, 0x80	; 128
    1a08:	44 0f       	add	r20, r20
    1a0a:	55 1f       	adc	r21, r21
    1a0c:	59 f0       	breq	.+22     	; 0x1a24 <__fp_splitA+0x10>
    1a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a10:	71 f0       	breq	.+28     	; 0x1a2e <__fp_splitA+0x1a>
    1a12:	47 95       	ror	r20

00001a14 <__fp_splitA>:
    1a14:	88 0f       	add	r24, r24
    1a16:	97 fb       	bst	r25, 7
    1a18:	99 1f       	adc	r25, r25
    1a1a:	61 f0       	breq	.+24     	; 0x1a34 <__fp_splitA+0x20>
    1a1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a1e:	79 f0       	breq	.+30     	; 0x1a3e <__fp_splitA+0x2a>
    1a20:	87 95       	ror	r24
    1a22:	08 95       	ret
    1a24:	12 16       	cp	r1, r18
    1a26:	13 06       	cpc	r1, r19
    1a28:	14 06       	cpc	r1, r20
    1a2a:	55 1f       	adc	r21, r21
    1a2c:	f2 cf       	rjmp	.-28     	; 0x1a12 <__fp_split3+0xe>
    1a2e:	46 95       	lsr	r20
    1a30:	f1 df       	rcall	.-30     	; 0x1a14 <__fp_splitA>
    1a32:	08 c0       	rjmp	.+16     	; 0x1a44 <__fp_splitA+0x30>
    1a34:	16 16       	cp	r1, r22
    1a36:	17 06       	cpc	r1, r23
    1a38:	18 06       	cpc	r1, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	f1 cf       	rjmp	.-30     	; 0x1a20 <__fp_splitA+0xc>
    1a3e:	86 95       	lsr	r24
    1a40:	71 05       	cpc	r23, r1
    1a42:	61 05       	cpc	r22, r1
    1a44:	08 94       	sec
    1a46:	08 95       	ret

00001a48 <__fp_zero>:
    1a48:	e8 94       	clt

00001a4a <__fp_szero>:
    1a4a:	bb 27       	eor	r27, r27
    1a4c:	66 27       	eor	r22, r22
    1a4e:	77 27       	eor	r23, r23
    1a50:	cb 01       	movw	r24, r22
    1a52:	97 f9       	bld	r25, 7
    1a54:	08 95       	ret

00001a56 <__gesf2>:
    1a56:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_cmp>
    1a5a:	08 f4       	brcc	.+2      	; 0x1a5e <__gesf2+0x8>
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	08 95       	ret

00001a60 <__mulsf3>:
    1a60:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__mulsf3x>
    1a64:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_round>
    1a68:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__fp_pscA>
    1a6c:	38 f0       	brcs	.+14     	; 0x1a7c <__mulsf3+0x1c>
    1a6e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__fp_pscB>
    1a72:	20 f0       	brcs	.+8      	; 0x1a7c <__mulsf3+0x1c>
    1a74:	95 23       	and	r25, r21
    1a76:	11 f0       	breq	.+4      	; 0x1a7c <__mulsf3+0x1c>
    1a78:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__fp_inf>
    1a7c:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__fp_nan>
    1a80:	11 24       	eor	r1, r1
    1a82:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_szero>

00001a86 <__mulsf3x>:
    1a86:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__fp_split3>
    1a8a:	70 f3       	brcs	.-36     	; 0x1a68 <__mulsf3+0x8>

00001a8c <__mulsf3_pse>:
    1a8c:	95 9f       	mul	r25, r21
    1a8e:	c1 f3       	breq	.-16     	; 0x1a80 <__mulsf3+0x20>
    1a90:	95 0f       	add	r25, r21
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	55 1f       	adc	r21, r21
    1a96:	62 9f       	mul	r22, r18
    1a98:	f0 01       	movw	r30, r0
    1a9a:	72 9f       	mul	r23, r18
    1a9c:	bb 27       	eor	r27, r27
    1a9e:	f0 0d       	add	r31, r0
    1aa0:	b1 1d       	adc	r27, r1
    1aa2:	63 9f       	mul	r22, r19
    1aa4:	aa 27       	eor	r26, r26
    1aa6:	f0 0d       	add	r31, r0
    1aa8:	b1 1d       	adc	r27, r1
    1aaa:	aa 1f       	adc	r26, r26
    1aac:	64 9f       	mul	r22, r20
    1aae:	66 27       	eor	r22, r22
    1ab0:	b0 0d       	add	r27, r0
    1ab2:	a1 1d       	adc	r26, r1
    1ab4:	66 1f       	adc	r22, r22
    1ab6:	82 9f       	mul	r24, r18
    1ab8:	22 27       	eor	r18, r18
    1aba:	b0 0d       	add	r27, r0
    1abc:	a1 1d       	adc	r26, r1
    1abe:	62 1f       	adc	r22, r18
    1ac0:	73 9f       	mul	r23, r19
    1ac2:	b0 0d       	add	r27, r0
    1ac4:	a1 1d       	adc	r26, r1
    1ac6:	62 1f       	adc	r22, r18
    1ac8:	83 9f       	mul	r24, r19
    1aca:	a0 0d       	add	r26, r0
    1acc:	61 1d       	adc	r22, r1
    1ace:	22 1f       	adc	r18, r18
    1ad0:	74 9f       	mul	r23, r20
    1ad2:	33 27       	eor	r19, r19
    1ad4:	a0 0d       	add	r26, r0
    1ad6:	61 1d       	adc	r22, r1
    1ad8:	23 1f       	adc	r18, r19
    1ada:	84 9f       	mul	r24, r20
    1adc:	60 0d       	add	r22, r0
    1ade:	21 1d       	adc	r18, r1
    1ae0:	82 2f       	mov	r24, r18
    1ae2:	76 2f       	mov	r23, r22
    1ae4:	6a 2f       	mov	r22, r26
    1ae6:	11 24       	eor	r1, r1
    1ae8:	9f 57       	subi	r25, 0x7F	; 127
    1aea:	50 40       	sbci	r21, 0x00	; 0
    1aec:	9a f0       	brmi	.+38     	; 0x1b14 <__mulsf3_pse+0x88>
    1aee:	f1 f0       	breq	.+60     	; 0x1b2c <__mulsf3_pse+0xa0>
    1af0:	88 23       	and	r24, r24
    1af2:	4a f0       	brmi	.+18     	; 0x1b06 <__mulsf3_pse+0x7a>
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	bb 1f       	adc	r27, r27
    1afa:	66 1f       	adc	r22, r22
    1afc:	77 1f       	adc	r23, r23
    1afe:	88 1f       	adc	r24, r24
    1b00:	91 50       	subi	r25, 0x01	; 1
    1b02:	50 40       	sbci	r21, 0x00	; 0
    1b04:	a9 f7       	brne	.-22     	; 0x1af0 <__mulsf3_pse+0x64>
    1b06:	9e 3f       	cpi	r25, 0xFE	; 254
    1b08:	51 05       	cpc	r21, r1
    1b0a:	80 f0       	brcs	.+32     	; 0x1b2c <__mulsf3_pse+0xa0>
    1b0c:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__fp_inf>
    1b10:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__fp_szero>
    1b14:	5f 3f       	cpi	r21, 0xFF	; 255
    1b16:	e4 f3       	brlt	.-8      	; 0x1b10 <__mulsf3_pse+0x84>
    1b18:	98 3e       	cpi	r25, 0xE8	; 232
    1b1a:	d4 f3       	brlt	.-12     	; 0x1b10 <__mulsf3_pse+0x84>
    1b1c:	86 95       	lsr	r24
    1b1e:	77 95       	ror	r23
    1b20:	67 95       	ror	r22
    1b22:	b7 95       	ror	r27
    1b24:	f7 95       	ror	r31
    1b26:	e7 95       	ror	r30
    1b28:	9f 5f       	subi	r25, 0xFF	; 255
    1b2a:	c1 f7       	brne	.-16     	; 0x1b1c <__mulsf3_pse+0x90>
    1b2c:	fe 2b       	or	r31, r30
    1b2e:	88 0f       	add	r24, r24
    1b30:	91 1d       	adc	r25, r1
    1b32:	96 95       	lsr	r25
    1b34:	87 95       	ror	r24
    1b36:	97 f9       	bld	r25, 7
    1b38:	08 95       	ret

00001b3a <sprintf>:
    1b3a:	ae e0       	ldi	r26, 0x0E	; 14
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e3 ea       	ldi	r30, 0xA3	; 163
    1b40:	fd e0       	ldi	r31, 0x0D	; 13
    1b42:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__prologue_saves__+0x1c>
    1b46:	0d 89       	ldd	r16, Y+21	; 0x15
    1b48:	1e 89       	ldd	r17, Y+22	; 0x16
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
    1b4e:	1a 83       	std	Y+2, r17	; 0x02
    1b50:	09 83       	std	Y+1, r16	; 0x01
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	9f e7       	ldi	r25, 0x7F	; 127
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	ae 01       	movw	r20, r28
    1b5c:	47 5e       	subi	r20, 0xE7	; 231
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b60:	6f 89       	ldd	r22, Y+23	; 0x17
    1b62:	78 8d       	ldd	r23, Y+24	; 0x18
    1b64:	ce 01       	movw	r24, r28
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <vfprintf>
    1b6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b6e:	38 85       	ldd	r19, Y+8	; 0x08
    1b70:	f8 01       	movw	r30, r16
    1b72:	e2 0f       	add	r30, r18
    1b74:	f3 1f       	adc	r31, r19
    1b76:	10 82       	st	Z, r1
    1b78:	2e 96       	adiw	r28, 0x0e	; 14
    1b7a:	e4 e0       	ldi	r30, 0x04	; 4
    1b7c:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__epilogue_restores__+0x1c>

00001b80 <vfprintf>:
    1b80:	ac e0       	ldi	r26, 0x0C	; 12
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e6 ec       	ldi	r30, 0xC6	; 198
    1b86:	fd e0       	ldi	r31, 0x0D	; 13
    1b88:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__prologue_saves__>
    1b8c:	7c 01       	movw	r14, r24
    1b8e:	6b 01       	movw	r12, r22
    1b90:	8a 01       	movw	r16, r20
    1b92:	fc 01       	movw	r30, r24
    1b94:	17 82       	std	Z+7, r1	; 0x07
    1b96:	16 82       	std	Z+6, r1	; 0x06
    1b98:	83 81       	ldd	r24, Z+3	; 0x03
    1b9a:	81 ff       	sbrs	r24, 1
    1b9c:	bd c1       	rjmp	.+890    	; 0x1f18 <vfprintf+0x398>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	4c 01       	movw	r8, r24
    1ba4:	f7 01       	movw	r30, r14
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	f6 01       	movw	r30, r12
    1baa:	93 fd       	sbrc	r25, 3
    1bac:	85 91       	lpm	r24, Z+
    1bae:	93 ff       	sbrs	r25, 3
    1bb0:	81 91       	ld	r24, Z+
    1bb2:	6f 01       	movw	r12, r30
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <vfprintf+0x3a>
    1bb8:	ab c1       	rjmp	.+854    	; 0x1f10 <vfprintf+0x390>
    1bba:	85 32       	cpi	r24, 0x25	; 37
    1bbc:	39 f4       	brne	.+14     	; 0x1bcc <vfprintf+0x4c>
    1bbe:	93 fd       	sbrc	r25, 3
    1bc0:	85 91       	lpm	r24, Z+
    1bc2:	93 ff       	sbrs	r25, 3
    1bc4:	81 91       	ld	r24, Z+
    1bc6:	6f 01       	movw	r12, r30
    1bc8:	85 32       	cpi	r24, 0x25	; 37
    1bca:	29 f4       	brne	.+10     	; 0x1bd6 <vfprintf+0x56>
    1bcc:	b7 01       	movw	r22, r14
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1bd4:	e7 cf       	rjmp	.-50     	; 0x1ba4 <vfprintf+0x24>
    1bd6:	51 2c       	mov	r5, r1
    1bd8:	31 2c       	mov	r3, r1
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	20 32       	cpi	r18, 0x20	; 32
    1bde:	a0 f4       	brcc	.+40     	; 0x1c08 <vfprintf+0x88>
    1be0:	8b 32       	cpi	r24, 0x2B	; 43
    1be2:	69 f0       	breq	.+26     	; 0x1bfe <vfprintf+0x7e>
    1be4:	30 f4       	brcc	.+12     	; 0x1bf2 <vfprintf+0x72>
    1be6:	80 32       	cpi	r24, 0x20	; 32
    1be8:	59 f0       	breq	.+22     	; 0x1c00 <vfprintf+0x80>
    1bea:	83 32       	cpi	r24, 0x23	; 35
    1bec:	69 f4       	brne	.+26     	; 0x1c08 <vfprintf+0x88>
    1bee:	20 61       	ori	r18, 0x10	; 16
    1bf0:	2c c0       	rjmp	.+88     	; 0x1c4a <vfprintf+0xca>
    1bf2:	8d 32       	cpi	r24, 0x2D	; 45
    1bf4:	39 f0       	breq	.+14     	; 0x1c04 <vfprintf+0x84>
    1bf6:	80 33       	cpi	r24, 0x30	; 48
    1bf8:	39 f4       	brne	.+14     	; 0x1c08 <vfprintf+0x88>
    1bfa:	21 60       	ori	r18, 0x01	; 1
    1bfc:	26 c0       	rjmp	.+76     	; 0x1c4a <vfprintf+0xca>
    1bfe:	22 60       	ori	r18, 0x02	; 2
    1c00:	24 60       	ori	r18, 0x04	; 4
    1c02:	23 c0       	rjmp	.+70     	; 0x1c4a <vfprintf+0xca>
    1c04:	28 60       	ori	r18, 0x08	; 8
    1c06:	21 c0       	rjmp	.+66     	; 0x1c4a <vfprintf+0xca>
    1c08:	27 fd       	sbrc	r18, 7
    1c0a:	27 c0       	rjmp	.+78     	; 0x1c5a <vfprintf+0xda>
    1c0c:	30 ed       	ldi	r19, 0xD0	; 208
    1c0e:	38 0f       	add	r19, r24
    1c10:	3a 30       	cpi	r19, 0x0A	; 10
    1c12:	78 f4       	brcc	.+30     	; 0x1c32 <vfprintf+0xb2>
    1c14:	26 ff       	sbrs	r18, 6
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0xa4>
    1c18:	fa e0       	ldi	r31, 0x0A	; 10
    1c1a:	5f 9e       	mul	r5, r31
    1c1c:	30 0d       	add	r19, r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	53 2e       	mov	r5, r19
    1c22:	13 c0       	rjmp	.+38     	; 0x1c4a <vfprintf+0xca>
    1c24:	8a e0       	ldi	r24, 0x0A	; 10
    1c26:	38 9e       	mul	r3, r24
    1c28:	30 0d       	add	r19, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	33 2e       	mov	r3, r19
    1c2e:	20 62       	ori	r18, 0x20	; 32
    1c30:	0c c0       	rjmp	.+24     	; 0x1c4a <vfprintf+0xca>
    1c32:	8e 32       	cpi	r24, 0x2E	; 46
    1c34:	21 f4       	brne	.+8      	; 0x1c3e <vfprintf+0xbe>
    1c36:	26 fd       	sbrc	r18, 6
    1c38:	6b c1       	rjmp	.+726    	; 0x1f10 <vfprintf+0x390>
    1c3a:	20 64       	ori	r18, 0x40	; 64
    1c3c:	06 c0       	rjmp	.+12     	; 0x1c4a <vfprintf+0xca>
    1c3e:	8c 36       	cpi	r24, 0x6C	; 108
    1c40:	11 f4       	brne	.+4      	; 0x1c46 <vfprintf+0xc6>
    1c42:	20 68       	ori	r18, 0x80	; 128
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <vfprintf+0xca>
    1c46:	88 36       	cpi	r24, 0x68	; 104
    1c48:	41 f4       	brne	.+16     	; 0x1c5a <vfprintf+0xda>
    1c4a:	f6 01       	movw	r30, r12
    1c4c:	93 fd       	sbrc	r25, 3
    1c4e:	85 91       	lpm	r24, Z+
    1c50:	93 ff       	sbrs	r25, 3
    1c52:	81 91       	ld	r24, Z+
    1c54:	6f 01       	movw	r12, r30
    1c56:	81 11       	cpse	r24, r1
    1c58:	c1 cf       	rjmp	.-126    	; 0x1bdc <vfprintf+0x5c>
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	9f 7d       	andi	r25, 0xDF	; 223
    1c5e:	95 54       	subi	r25, 0x45	; 69
    1c60:	93 30       	cpi	r25, 0x03	; 3
    1c62:	28 f4       	brcc	.+10     	; 0x1c6e <vfprintf+0xee>
    1c64:	0c 5f       	subi	r16, 0xFC	; 252
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	ff e3       	ldi	r31, 0x3F	; 63
    1c6a:	f9 83       	std	Y+1, r31	; 0x01
    1c6c:	0d c0       	rjmp	.+26     	; 0x1c88 <vfprintf+0x108>
    1c6e:	83 36       	cpi	r24, 0x63	; 99
    1c70:	31 f0       	breq	.+12     	; 0x1c7e <vfprintf+0xfe>
    1c72:	83 37       	cpi	r24, 0x73	; 115
    1c74:	71 f0       	breq	.+28     	; 0x1c92 <vfprintf+0x112>
    1c76:	83 35       	cpi	r24, 0x53	; 83
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <vfprintf+0xfc>
    1c7a:	5b c0       	rjmp	.+182    	; 0x1d32 <vfprintf+0x1b2>
    1c7c:	22 c0       	rjmp	.+68     	; 0x1cc2 <vfprintf+0x142>
    1c7e:	f8 01       	movw	r30, r16
    1c80:	80 81       	ld	r24, Z
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	0e 5f       	subi	r16, 0xFE	; 254
    1c86:	1f 4f       	sbci	r17, 0xFF	; 255
    1c88:	44 24       	eor	r4, r4
    1c8a:	43 94       	inc	r4
    1c8c:	51 2c       	mov	r5, r1
    1c8e:	54 01       	movw	r10, r8
    1c90:	15 c0       	rjmp	.+42     	; 0x1cbc <vfprintf+0x13c>
    1c92:	38 01       	movw	r6, r16
    1c94:	f2 e0       	ldi	r31, 0x02	; 2
    1c96:	6f 0e       	add	r6, r31
    1c98:	71 1c       	adc	r7, r1
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	a0 80       	ld	r10, Z
    1c9e:	b1 80       	ldd	r11, Z+1	; 0x01
    1ca0:	26 ff       	sbrs	r18, 6
    1ca2:	03 c0       	rjmp	.+6      	; 0x1caa <vfprintf+0x12a>
    1ca4:	65 2d       	mov	r22, r5
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <vfprintf+0x12e>
    1caa:	6f ef       	ldi	r22, 0xFF	; 255
    1cac:	7f ef       	ldi	r23, 0xFF	; 255
    1cae:	c5 01       	movw	r24, r10
    1cb0:	2c 87       	std	Y+12, r18	; 0x0c
    1cb2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <strnlen>
    1cb6:	2c 01       	movw	r4, r24
    1cb8:	83 01       	movw	r16, r6
    1cba:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cbc:	2f 77       	andi	r18, 0x7F	; 127
    1cbe:	22 2e       	mov	r2, r18
    1cc0:	17 c0       	rjmp	.+46     	; 0x1cf0 <vfprintf+0x170>
    1cc2:	38 01       	movw	r6, r16
    1cc4:	f2 e0       	ldi	r31, 0x02	; 2
    1cc6:	6f 0e       	add	r6, r31
    1cc8:	71 1c       	adc	r7, r1
    1cca:	f8 01       	movw	r30, r16
    1ccc:	a0 80       	ld	r10, Z
    1cce:	b1 80       	ldd	r11, Z+1	; 0x01
    1cd0:	26 ff       	sbrs	r18, 6
    1cd2:	03 c0       	rjmp	.+6      	; 0x1cda <vfprintf+0x15a>
    1cd4:	65 2d       	mov	r22, r5
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <vfprintf+0x15e>
    1cda:	6f ef       	ldi	r22, 0xFF	; 255
    1cdc:	7f ef       	ldi	r23, 0xFF	; 255
    1cde:	c5 01       	movw	r24, r10
    1ce0:	2c 87       	std	Y+12, r18	; 0x0c
    1ce2:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <strnlen_P>
    1ce6:	2c 01       	movw	r4, r24
    1ce8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cea:	20 68       	ori	r18, 0x80	; 128
    1cec:	22 2e       	mov	r2, r18
    1cee:	83 01       	movw	r16, r6
    1cf0:	23 fc       	sbrc	r2, 3
    1cf2:	1b c0       	rjmp	.+54     	; 0x1d2a <vfprintf+0x1aa>
    1cf4:	83 2d       	mov	r24, r3
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	48 16       	cp	r4, r24
    1cfa:	59 06       	cpc	r5, r25
    1cfc:	b0 f4       	brcc	.+44     	; 0x1d2a <vfprintf+0x1aa>
    1cfe:	b7 01       	movw	r22, r14
    1d00:	80 e2       	ldi	r24, 0x20	; 32
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1d08:	3a 94       	dec	r3
    1d0a:	f4 cf       	rjmp	.-24     	; 0x1cf4 <vfprintf+0x174>
    1d0c:	f5 01       	movw	r30, r10
    1d0e:	27 fc       	sbrc	r2, 7
    1d10:	85 91       	lpm	r24, Z+
    1d12:	27 fe       	sbrs	r2, 7
    1d14:	81 91       	ld	r24, Z+
    1d16:	5f 01       	movw	r10, r30
    1d18:	b7 01       	movw	r22, r14
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1d20:	31 10       	cpse	r3, r1
    1d22:	3a 94       	dec	r3
    1d24:	f1 e0       	ldi	r31, 0x01	; 1
    1d26:	4f 1a       	sub	r4, r31
    1d28:	51 08       	sbc	r5, r1
    1d2a:	41 14       	cp	r4, r1
    1d2c:	51 04       	cpc	r5, r1
    1d2e:	71 f7       	brne	.-36     	; 0x1d0c <vfprintf+0x18c>
    1d30:	e5 c0       	rjmp	.+458    	; 0x1efc <vfprintf+0x37c>
    1d32:	84 36       	cpi	r24, 0x64	; 100
    1d34:	11 f0       	breq	.+4      	; 0x1d3a <vfprintf+0x1ba>
    1d36:	89 36       	cpi	r24, 0x69	; 105
    1d38:	39 f5       	brne	.+78     	; 0x1d88 <vfprintf+0x208>
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	27 ff       	sbrs	r18, 7
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <vfprintf+0x1ce>
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	0c 5f       	subi	r16, 0xFC	; 252
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4c:	08 c0       	rjmp	.+16     	; 0x1d5e <vfprintf+0x1de>
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	07 2e       	mov	r0, r23
    1d54:	00 0c       	add	r0, r0
    1d56:	88 0b       	sbc	r24, r24
    1d58:	99 0b       	sbc	r25, r25
    1d5a:	0e 5f       	subi	r16, 0xFE	; 254
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	2f 76       	andi	r18, 0x6F	; 111
    1d60:	72 2e       	mov	r7, r18
    1d62:	97 ff       	sbrs	r25, 7
    1d64:	09 c0       	rjmp	.+18     	; 0x1d78 <vfprintf+0x1f8>
    1d66:	90 95       	com	r25
    1d68:	80 95       	com	r24
    1d6a:	70 95       	com	r23
    1d6c:	61 95       	neg	r22
    1d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d70:	8f 4f       	sbci	r24, 0xFF	; 255
    1d72:	9f 4f       	sbci	r25, 0xFF	; 255
    1d74:	20 68       	ori	r18, 0x80	; 128
    1d76:	72 2e       	mov	r7, r18
    1d78:	2a e0       	ldi	r18, 0x0A	; 10
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	a4 01       	movw	r20, r8
    1d7e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__ultoa_invert>
    1d82:	a8 2e       	mov	r10, r24
    1d84:	a8 18       	sub	r10, r8
    1d86:	44 c0       	rjmp	.+136    	; 0x1e10 <vfprintf+0x290>
    1d88:	85 37       	cpi	r24, 0x75	; 117
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <vfprintf+0x216>
    1d8c:	2f 7e       	andi	r18, 0xEF	; 239
    1d8e:	b2 2e       	mov	r11, r18
    1d90:	2a e0       	ldi	r18, 0x0A	; 10
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	25 c0       	rjmp	.+74     	; 0x1de0 <vfprintf+0x260>
    1d96:	f2 2f       	mov	r31, r18
    1d98:	f9 7f       	andi	r31, 0xF9	; 249
    1d9a:	bf 2e       	mov	r11, r31
    1d9c:	8f 36       	cpi	r24, 0x6F	; 111
    1d9e:	c1 f0       	breq	.+48     	; 0x1dd0 <vfprintf+0x250>
    1da0:	18 f4       	brcc	.+6      	; 0x1da8 <vfprintf+0x228>
    1da2:	88 35       	cpi	r24, 0x58	; 88
    1da4:	79 f0       	breq	.+30     	; 0x1dc4 <vfprintf+0x244>
    1da6:	b4 c0       	rjmp	.+360    	; 0x1f10 <vfprintf+0x390>
    1da8:	80 37       	cpi	r24, 0x70	; 112
    1daa:	19 f0       	breq	.+6      	; 0x1db2 <vfprintf+0x232>
    1dac:	88 37       	cpi	r24, 0x78	; 120
    1dae:	21 f0       	breq	.+8      	; 0x1db8 <vfprintf+0x238>
    1db0:	af c0       	rjmp	.+350    	; 0x1f10 <vfprintf+0x390>
    1db2:	2f 2f       	mov	r18, r31
    1db4:	20 61       	ori	r18, 0x10	; 16
    1db6:	b2 2e       	mov	r11, r18
    1db8:	b4 fe       	sbrs	r11, 4
    1dba:	0d c0       	rjmp	.+26     	; 0x1dd6 <vfprintf+0x256>
    1dbc:	8b 2d       	mov	r24, r11
    1dbe:	84 60       	ori	r24, 0x04	; 4
    1dc0:	b8 2e       	mov	r11, r24
    1dc2:	09 c0       	rjmp	.+18     	; 0x1dd6 <vfprintf+0x256>
    1dc4:	24 ff       	sbrs	r18, 4
    1dc6:	0a c0       	rjmp	.+20     	; 0x1ddc <vfprintf+0x25c>
    1dc8:	9f 2f       	mov	r25, r31
    1dca:	96 60       	ori	r25, 0x06	; 6
    1dcc:	b9 2e       	mov	r11, r25
    1dce:	06 c0       	rjmp	.+12     	; 0x1ddc <vfprintf+0x25c>
    1dd0:	28 e0       	ldi	r18, 0x08	; 8
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <vfprintf+0x260>
    1dd6:	20 e1       	ldi	r18, 0x10	; 16
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <vfprintf+0x260>
    1ddc:	20 e1       	ldi	r18, 0x10	; 16
    1dde:	32 e0       	ldi	r19, 0x02	; 2
    1de0:	f8 01       	movw	r30, r16
    1de2:	b7 fe       	sbrs	r11, 7
    1de4:	07 c0       	rjmp	.+14     	; 0x1df4 <vfprintf+0x274>
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	0c 5f       	subi	r16, 0xFC	; 252
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	06 c0       	rjmp	.+12     	; 0x1e00 <vfprintf+0x280>
    1df4:	60 81       	ld	r22, Z
    1df6:	71 81       	ldd	r23, Z+1	; 0x01
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 5f       	subi	r16, 0xFE	; 254
    1dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1e00:	a4 01       	movw	r20, r8
    1e02:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__ultoa_invert>
    1e06:	a8 2e       	mov	r10, r24
    1e08:	a8 18       	sub	r10, r8
    1e0a:	fb 2d       	mov	r31, r11
    1e0c:	ff 77       	andi	r31, 0x7F	; 127
    1e0e:	7f 2e       	mov	r7, r31
    1e10:	76 fe       	sbrs	r7, 6
    1e12:	0b c0       	rjmp	.+22     	; 0x1e2a <vfprintf+0x2aa>
    1e14:	37 2d       	mov	r19, r7
    1e16:	3e 7f       	andi	r19, 0xFE	; 254
    1e18:	a5 14       	cp	r10, r5
    1e1a:	50 f4       	brcc	.+20     	; 0x1e30 <vfprintf+0x2b0>
    1e1c:	74 fe       	sbrs	r7, 4
    1e1e:	0a c0       	rjmp	.+20     	; 0x1e34 <vfprintf+0x2b4>
    1e20:	72 fc       	sbrc	r7, 2
    1e22:	08 c0       	rjmp	.+16     	; 0x1e34 <vfprintf+0x2b4>
    1e24:	37 2d       	mov	r19, r7
    1e26:	3e 7e       	andi	r19, 0xEE	; 238
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <vfprintf+0x2b4>
    1e2a:	ba 2c       	mov	r11, r10
    1e2c:	37 2d       	mov	r19, r7
    1e2e:	03 c0       	rjmp	.+6      	; 0x1e36 <vfprintf+0x2b6>
    1e30:	ba 2c       	mov	r11, r10
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <vfprintf+0x2b6>
    1e34:	b5 2c       	mov	r11, r5
    1e36:	34 ff       	sbrs	r19, 4
    1e38:	0d c0       	rjmp	.+26     	; 0x1e54 <vfprintf+0x2d4>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ea 0d       	add	r30, r10
    1e3e:	f1 1d       	adc	r31, r1
    1e40:	80 81       	ld	r24, Z
    1e42:	80 33       	cpi	r24, 0x30	; 48
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <vfprintf+0x2ca>
    1e46:	39 7e       	andi	r19, 0xE9	; 233
    1e48:	09 c0       	rjmp	.+18     	; 0x1e5c <vfprintf+0x2dc>
    1e4a:	32 ff       	sbrs	r19, 2
    1e4c:	06 c0       	rjmp	.+12     	; 0x1e5a <vfprintf+0x2da>
    1e4e:	b3 94       	inc	r11
    1e50:	b3 94       	inc	r11
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <vfprintf+0x2dc>
    1e54:	83 2f       	mov	r24, r19
    1e56:	86 78       	andi	r24, 0x86	; 134
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <vfprintf+0x2dc>
    1e5a:	b3 94       	inc	r11
    1e5c:	33 fd       	sbrc	r19, 3
    1e5e:	13 c0       	rjmp	.+38     	; 0x1e86 <vfprintf+0x306>
    1e60:	30 ff       	sbrs	r19, 0
    1e62:	06 c0       	rjmp	.+12     	; 0x1e70 <vfprintf+0x2f0>
    1e64:	5a 2c       	mov	r5, r10
    1e66:	b3 14       	cp	r11, r3
    1e68:	18 f4       	brcc	.+6      	; 0x1e70 <vfprintf+0x2f0>
    1e6a:	53 0c       	add	r5, r3
    1e6c:	5b 18       	sub	r5, r11
    1e6e:	b3 2c       	mov	r11, r3
    1e70:	b3 14       	cp	r11, r3
    1e72:	68 f4       	brcc	.+26     	; 0x1e8e <vfprintf+0x30e>
    1e74:	b7 01       	movw	r22, r14
    1e76:	80 e2       	ldi	r24, 0x20	; 32
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	3c 87       	std	Y+12, r19	; 0x0c
    1e7c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1e80:	b3 94       	inc	r11
    1e82:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e84:	f5 cf       	rjmp	.-22     	; 0x1e70 <vfprintf+0x2f0>
    1e86:	b3 14       	cp	r11, r3
    1e88:	10 f4       	brcc	.+4      	; 0x1e8e <vfprintf+0x30e>
    1e8a:	3b 18       	sub	r3, r11
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <vfprintf+0x310>
    1e8e:	31 2c       	mov	r3, r1
    1e90:	34 ff       	sbrs	r19, 4
    1e92:	12 c0       	rjmp	.+36     	; 0x1eb8 <vfprintf+0x338>
    1e94:	b7 01       	movw	r22, r14
    1e96:	80 e3       	ldi	r24, 0x30	; 48
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	3c 87       	std	Y+12, r19	; 0x0c
    1e9c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1ea0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ea2:	32 ff       	sbrs	r19, 2
    1ea4:	17 c0       	rjmp	.+46     	; 0x1ed4 <vfprintf+0x354>
    1ea6:	31 fd       	sbrc	r19, 1
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <vfprintf+0x330>
    1eaa:	88 e7       	ldi	r24, 0x78	; 120
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <vfprintf+0x334>
    1eb0:	88 e5       	ldi	r24, 0x58	; 88
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	b7 01       	movw	r22, r14
    1eb6:	0c c0       	rjmp	.+24     	; 0x1ed0 <vfprintf+0x350>
    1eb8:	83 2f       	mov	r24, r19
    1eba:	86 78       	andi	r24, 0x86	; 134
    1ebc:	59 f0       	breq	.+22     	; 0x1ed4 <vfprintf+0x354>
    1ebe:	31 ff       	sbrs	r19, 1
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x346>
    1ec2:	8b e2       	ldi	r24, 0x2B	; 43
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <vfprintf+0x348>
    1ec6:	80 e2       	ldi	r24, 0x20	; 32
    1ec8:	37 fd       	sbrc	r19, 7
    1eca:	8d e2       	ldi	r24, 0x2D	; 45
    1ecc:	b7 01       	movw	r22, r14
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1ed4:	a5 14       	cp	r10, r5
    1ed6:	38 f4       	brcc	.+14     	; 0x1ee6 <vfprintf+0x366>
    1ed8:	b7 01       	movw	r22, r14
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1ee2:	5a 94       	dec	r5
    1ee4:	f7 cf       	rjmp	.-18     	; 0x1ed4 <vfprintf+0x354>
    1ee6:	aa 94       	dec	r10
    1ee8:	f4 01       	movw	r30, r8
    1eea:	ea 0d       	add	r30, r10
    1eec:	f1 1d       	adc	r31, r1
    1eee:	80 81       	ld	r24, Z
    1ef0:	b7 01       	movw	r22, r14
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1ef8:	a1 10       	cpse	r10, r1
    1efa:	f5 cf       	rjmp	.-22     	; 0x1ee6 <vfprintf+0x366>
    1efc:	33 20       	and	r3, r3
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <vfprintf+0x382>
    1f00:	51 ce       	rjmp	.-862    	; 0x1ba4 <vfprintf+0x24>
    1f02:	b7 01       	movw	r22, r14
    1f04:	80 e2       	ldi	r24, 0x20	; 32
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <fputc>
    1f0c:	3a 94       	dec	r3
    1f0e:	f6 cf       	rjmp	.-20     	; 0x1efc <vfprintf+0x37c>
    1f10:	f7 01       	movw	r30, r14
    1f12:	86 81       	ldd	r24, Z+6	; 0x06
    1f14:	97 81       	ldd	r25, Z+7	; 0x07
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <vfprintf+0x39c>
    1f18:	8f ef       	ldi	r24, 0xFF	; 255
    1f1a:	9f ef       	ldi	r25, 0xFF	; 255
    1f1c:	2c 96       	adiw	r28, 0x0c	; 12
    1f1e:	e2 e1       	ldi	r30, 0x12	; 18
    1f20:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__epilogue_restores__>

00001f24 <strnlen_P>:
    1f24:	fc 01       	movw	r30, r24
    1f26:	05 90       	lpm	r0, Z+
    1f28:	61 50       	subi	r22, 0x01	; 1
    1f2a:	70 40       	sbci	r23, 0x00	; 0
    1f2c:	01 10       	cpse	r0, r1
    1f2e:	d8 f7       	brcc	.-10     	; 0x1f26 <strnlen_P+0x2>
    1f30:	80 95       	com	r24
    1f32:	90 95       	com	r25
    1f34:	8e 0f       	add	r24, r30
    1f36:	9f 1f       	adc	r25, r31
    1f38:	08 95       	ret

00001f3a <strnlen>:
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	61 50       	subi	r22, 0x01	; 1
    1f3e:	70 40       	sbci	r23, 0x00	; 0
    1f40:	01 90       	ld	r0, Z+
    1f42:	01 10       	cpse	r0, r1
    1f44:	d8 f7       	brcc	.-10     	; 0x1f3c <strnlen+0x2>
    1f46:	80 95       	com	r24
    1f48:	90 95       	com	r25
    1f4a:	8e 0f       	add	r24, r30
    1f4c:	9f 1f       	adc	r25, r31
    1f4e:	08 95       	ret

00001f50 <fputc>:
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	fb 01       	movw	r30, r22
    1f5a:	23 81       	ldd	r18, Z+3	; 0x03
    1f5c:	21 fd       	sbrc	r18, 1
    1f5e:	03 c0       	rjmp	.+6      	; 0x1f66 <fputc+0x16>
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	9f ef       	ldi	r25, 0xFF	; 255
    1f64:	28 c0       	rjmp	.+80     	; 0x1fb6 <fputc+0x66>
    1f66:	22 ff       	sbrs	r18, 2
    1f68:	16 c0       	rjmp	.+44     	; 0x1f96 <fputc+0x46>
    1f6a:	46 81       	ldd	r20, Z+6	; 0x06
    1f6c:	57 81       	ldd	r21, Z+7	; 0x07
    1f6e:	24 81       	ldd	r18, Z+4	; 0x04
    1f70:	35 81       	ldd	r19, Z+5	; 0x05
    1f72:	42 17       	cp	r20, r18
    1f74:	53 07       	cpc	r21, r19
    1f76:	44 f4       	brge	.+16     	; 0x1f88 <fputc+0x38>
    1f78:	a0 81       	ld	r26, Z
    1f7a:	b1 81       	ldd	r27, Z+1	; 0x01
    1f7c:	9d 01       	movw	r18, r26
    1f7e:	2f 5f       	subi	r18, 0xFF	; 255
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	31 83       	std	Z+1, r19	; 0x01
    1f84:	20 83       	st	Z, r18
    1f86:	8c 93       	st	X, r24
    1f88:	26 81       	ldd	r18, Z+6	; 0x06
    1f8a:	37 81       	ldd	r19, Z+7	; 0x07
    1f8c:	2f 5f       	subi	r18, 0xFF	; 255
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	37 83       	std	Z+7, r19	; 0x07
    1f92:	26 83       	std	Z+6, r18	; 0x06
    1f94:	10 c0       	rjmp	.+32     	; 0x1fb6 <fputc+0x66>
    1f96:	eb 01       	movw	r28, r22
    1f98:	09 2f       	mov	r16, r25
    1f9a:	18 2f       	mov	r17, r24
    1f9c:	00 84       	ldd	r0, Z+8	; 0x08
    1f9e:	f1 85       	ldd	r31, Z+9	; 0x09
    1fa0:	e0 2d       	mov	r30, r0
    1fa2:	09 95       	icall
    1fa4:	89 2b       	or	r24, r25
    1fa6:	e1 f6       	brne	.-72     	; 0x1f60 <fputc+0x10>
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	9f 81       	ldd	r25, Y+7	; 0x07
    1fac:	01 96       	adiw	r24, 0x01	; 1
    1fae:	9f 83       	std	Y+7, r25	; 0x07
    1fb0:	8e 83       	std	Y+6, r24	; 0x06
    1fb2:	81 2f       	mov	r24, r17
    1fb4:	90 2f       	mov	r25, r16
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	08 95       	ret

00001fc0 <__ultoa_invert>:
    1fc0:	fa 01       	movw	r30, r20
    1fc2:	aa 27       	eor	r26, r26
    1fc4:	28 30       	cpi	r18, 0x08	; 8
    1fc6:	51 f1       	breq	.+84     	; 0x201c <__ultoa_invert+0x5c>
    1fc8:	20 31       	cpi	r18, 0x10	; 16
    1fca:	81 f1       	breq	.+96     	; 0x202c <__ultoa_invert+0x6c>
    1fcc:	e8 94       	clt
    1fce:	6f 93       	push	r22
    1fd0:	6e 7f       	andi	r22, 0xFE	; 254
    1fd2:	6e 5f       	subi	r22, 0xFE	; 254
    1fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fda:	af 4f       	sbci	r26, 0xFF	; 255
    1fdc:	b1 e0       	ldi	r27, 0x01	; 1
    1fde:	3e d0       	rcall	.+124    	; 0x205c <__ultoa_invert+0x9c>
    1fe0:	b4 e0       	ldi	r27, 0x04	; 4
    1fe2:	3c d0       	rcall	.+120    	; 0x205c <__ultoa_invert+0x9c>
    1fe4:	67 0f       	add	r22, r23
    1fe6:	78 1f       	adc	r23, r24
    1fe8:	89 1f       	adc	r24, r25
    1fea:	9a 1f       	adc	r25, r26
    1fec:	a1 1d       	adc	r26, r1
    1fee:	68 0f       	add	r22, r24
    1ff0:	79 1f       	adc	r23, r25
    1ff2:	8a 1f       	adc	r24, r26
    1ff4:	91 1d       	adc	r25, r1
    1ff6:	a1 1d       	adc	r26, r1
    1ff8:	6a 0f       	add	r22, r26
    1ffa:	71 1d       	adc	r23, r1
    1ffc:	81 1d       	adc	r24, r1
    1ffe:	91 1d       	adc	r25, r1
    2000:	a1 1d       	adc	r26, r1
    2002:	20 d0       	rcall	.+64     	; 0x2044 <__ultoa_invert+0x84>
    2004:	09 f4       	brne	.+2      	; 0x2008 <__ultoa_invert+0x48>
    2006:	68 94       	set
    2008:	3f 91       	pop	r19
    200a:	2a e0       	ldi	r18, 0x0A	; 10
    200c:	26 9f       	mul	r18, r22
    200e:	11 24       	eor	r1, r1
    2010:	30 19       	sub	r19, r0
    2012:	30 5d       	subi	r19, 0xD0	; 208
    2014:	31 93       	st	Z+, r19
    2016:	de f6       	brtc	.-74     	; 0x1fce <__ultoa_invert+0xe>
    2018:	cf 01       	movw	r24, r30
    201a:	08 95       	ret
    201c:	46 2f       	mov	r20, r22
    201e:	47 70       	andi	r20, 0x07	; 7
    2020:	40 5d       	subi	r20, 0xD0	; 208
    2022:	41 93       	st	Z+, r20
    2024:	b3 e0       	ldi	r27, 0x03	; 3
    2026:	0f d0       	rcall	.+30     	; 0x2046 <__ultoa_invert+0x86>
    2028:	c9 f7       	brne	.-14     	; 0x201c <__ultoa_invert+0x5c>
    202a:	f6 cf       	rjmp	.-20     	; 0x2018 <__ultoa_invert+0x58>
    202c:	46 2f       	mov	r20, r22
    202e:	4f 70       	andi	r20, 0x0F	; 15
    2030:	40 5d       	subi	r20, 0xD0	; 208
    2032:	4a 33       	cpi	r20, 0x3A	; 58
    2034:	18 f0       	brcs	.+6      	; 0x203c <__ultoa_invert+0x7c>
    2036:	49 5d       	subi	r20, 0xD9	; 217
    2038:	31 fd       	sbrc	r19, 1
    203a:	40 52       	subi	r20, 0x20	; 32
    203c:	41 93       	st	Z+, r20
    203e:	02 d0       	rcall	.+4      	; 0x2044 <__ultoa_invert+0x84>
    2040:	a9 f7       	brne	.-22     	; 0x202c <__ultoa_invert+0x6c>
    2042:	ea cf       	rjmp	.-44     	; 0x2018 <__ultoa_invert+0x58>
    2044:	b4 e0       	ldi	r27, 0x04	; 4
    2046:	a6 95       	lsr	r26
    2048:	97 95       	ror	r25
    204a:	87 95       	ror	r24
    204c:	77 95       	ror	r23
    204e:	67 95       	ror	r22
    2050:	ba 95       	dec	r27
    2052:	c9 f7       	brne	.-14     	; 0x2046 <__ultoa_invert+0x86>
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	61 05       	cpc	r22, r1
    2058:	71 05       	cpc	r23, r1
    205a:	08 95       	ret
    205c:	9b 01       	movw	r18, r22
    205e:	ac 01       	movw	r20, r24
    2060:	0a 2e       	mov	r0, r26
    2062:	06 94       	lsr	r0
    2064:	57 95       	ror	r21
    2066:	47 95       	ror	r20
    2068:	37 95       	ror	r19
    206a:	27 95       	ror	r18
    206c:	ba 95       	dec	r27
    206e:	c9 f7       	brne	.-14     	; 0x2062 <__ultoa_invert+0xa2>
    2070:	62 0f       	add	r22, r18
    2072:	73 1f       	adc	r23, r19
    2074:	84 1f       	adc	r24, r20
    2076:	95 1f       	adc	r25, r21
    2078:	a0 1d       	adc	r26, r0
    207a:	08 95       	ret

0000207c <__prologue_saves__>:
    207c:	2f 92       	push	r2
    207e:	3f 92       	push	r3
    2080:	4f 92       	push	r4
    2082:	5f 92       	push	r5
    2084:	6f 92       	push	r6
    2086:	7f 92       	push	r7
    2088:	8f 92       	push	r8
    208a:	9f 92       	push	r9
    208c:	af 92       	push	r10
    208e:	bf 92       	push	r11
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	ca 1b       	sub	r28, r26
    20a6:	db 0b       	sbc	r29, r27
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	09 94       	ijmp

000020b4 <__epilogue_restores__>:
    20b4:	2a 88       	ldd	r2, Y+18	; 0x12
    20b6:	39 88       	ldd	r3, Y+17	; 0x11
    20b8:	48 88       	ldd	r4, Y+16	; 0x10
    20ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    20bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    20be:	7d 84       	ldd	r7, Y+13	; 0x0d
    20c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    20c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    20c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    20c6:	b9 84       	ldd	r11, Y+9	; 0x09
    20c8:	c8 84       	ldd	r12, Y+8	; 0x08
    20ca:	df 80       	ldd	r13, Y+7	; 0x07
    20cc:	ee 80       	ldd	r14, Y+6	; 0x06
    20ce:	fd 80       	ldd	r15, Y+5	; 0x05
    20d0:	0c 81       	ldd	r16, Y+4	; 0x04
    20d2:	1b 81       	ldd	r17, Y+3	; 0x03
    20d4:	aa 81       	ldd	r26, Y+2	; 0x02
    20d6:	b9 81       	ldd	r27, Y+1	; 0x01
    20d8:	ce 0f       	add	r28, r30
    20da:	d1 1d       	adc	r29, r1
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	ed 01       	movw	r28, r26
    20e8:	08 95       	ret

000020ea <_exit>:
    20ea:	f8 94       	cli

000020ec <__stop_program>:
    20ec:	ff cf       	rjmp	.-2      	; 0x20ec <__stop_program>
