
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .text         00000496  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000496  0000050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000180a  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4f  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a87  00000000  00000000  00002929  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  000033b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051c  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000de7  00000000  00000000  00003b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00004943  2**0
=======
  0 .text         00000494  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000494  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001807  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a34  00000000  00000000  00001ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a94  00000000  00000000  00002907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000028c  00000000  00000000  0000339c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000525  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dee  00000000  00000000  00003b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000493b  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
<<<<<<< Updated upstream
  66:	e6 e9       	ldi	r30, 0x96	; 150
=======
  66:	e4 e9       	ldi	r30, 0x94	; 148
>>>>>>> Stashed changes
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
<<<<<<< Updated upstream
  76:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  7a:	0c 94 49 02 	jmp	0x492	; 0x492 <_exit>
=======
  76:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  7a:	0c 94 48 02 	jmp	0x490	; 0x490 <_exit>
>>>>>>> Stashed changes

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KeyPadAPP>:



void KeyPadAPP(void)
{
	LCD_init();
<<<<<<< Updated upstream
  82:	0e 94 01 01 	call	0x202	; 0x202 <LCD_init>
	KEYPAD_Init();
  86:	0e 94 5f 00 	call	0xbe	; 0xbe <KEYPAD_Init>
=======
  82:	0e 94 00 01 	call	0x200	; 0x200 <LCD_init>
	KEYPAD_Init();
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <KEYPAD_Init>
	disp_charXY(1,1,'x');
  8a:	48 e7       	ldi	r20, 0x78	; 120
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 46 01 	call	0x28c	; 0x28c <disp_charXY>
	u8 _key=0;
>>>>>>> Stashed changes
	while(1)
	{
		if (GetKey())
  8a:	0e 94 72 00 	call	0xe4	; 0xe4 <GetKey>
  8e:	88 23       	and	r24, r24
  90:	e1 f3       	breq	.-8      	; 0x8a <KeyPadAPP+0x8>
		{
<<<<<<< Updated upstream
			disp_charXY(1,1,GetKey());
  92:	0e 94 72 00 	call	0xe4	; 0xe4 <GetKey>
  96:	48 2f       	mov	r20, r24
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 47 01 	call	0x28e	; 0x28e <disp_charXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	81 ee       	ldi	r24, 0xE1	; 225
  a4:	94 e0       	ldi	r25, 0x04	; 4
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <KeyPadAPP+0x24>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <KeyPadAPP+0x2e>
  b0:	00 00       	nop
  b2:	eb cf       	rjmp	.-42     	; 0x8a <KeyPadAPP+0x8>

000000b4 <main>:
=======
			disp_charXY(1,1,_key);
  9c:	48 2f       	mov	r20, r24
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 46 01 	call	0x28c	; 0x28c <disp_charXY>
  a6:	f6 cf       	rjmp	.-20     	; 0x94 <KeyPadAPP+0x12>

000000a8 <main>:
>>>>>>> Stashed changes
#include "includes.h"
#include "LCD.h"
#include <math.h>
int main(void)
{
	KeyPadAPP();
  b4:	0e 94 41 00 	call	0x82	; 0x82 <KeyPadAPP>
}
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <KEYPAD_Init>:
};


void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
<<<<<<< Updated upstream
=======
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	60 ef       	ldi	r22, 0xF0	; 240
  b6:	81 e3       	ldi	r24, 0x31	; 49
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 39 02 	call	0x472	; 0x472 <pinsDirection>
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
>>>>>>> Stashed changes
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	60 ef       	ldi	r22, 0xF0	; 240
  c2:	81 e3       	ldi	r24, 0x31	; 49
  c4:	90 e0       	ldi	r25, 0x00	; 0
<<<<<<< Updated upstream
  c6:	0e 94 3a 02 	call	0x474	; 0x474 <pinsDirection>
=======
  c6:	0e 94 2a 02 	call	0x454	; 0x454 <writePins>
>>>>>>> Stashed changes
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	68 e7       	ldi	r22, 0x78	; 120
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	90 e0       	ldi	r25, 0x00	; 0
<<<<<<< Updated upstream
  d2:	0e 94 3a 02 	call	0x474	; 0x474 <pinsDirection>
=======
  d2:	0e 94 39 02 	call	0x472	; 0x472 <pinsDirection>
>>>>>>> Stashed changes
	writePins(&COL_PORT,COL_PINS,HIGH);
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	68 e7       	ldi	r22, 0x78	; 120
  da:	85 e3       	ldi	r24, 0x35	; 53
  dc:	90 e0       	ldi	r25, 0x00	; 0
<<<<<<< Updated upstream
  de:	0e 94 2b 02 	call	0x456	; 0x456 <writePins>
=======
  de:	0e 94 2a 02 	call	0x454	; 0x454 <writePins>
>>>>>>> Stashed changes
  e2:	08 95       	ret

000000e4 <GetKey>:
}



u8 GetKey(void)
{
<<<<<<< Updated upstream
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	u8 key=0;
	u8 row=0,col=0;
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	60 ef       	ldi	r22, 0xF0	; 240
  ee:	82 e3       	ldi	r24, 0x32	; 50
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 2b 02 	call	0x456	; 0x456 <writePins>
	for (row=PD4;row<=PD7;row++)
  f6:	dc e1       	ldi	r29, 0x1C	; 28



u8 GetKey(void)
{
	u8 key=0;
  f8:	10 e0       	ldi	r17, 0x00	; 0
	u8 row=0,col=0;
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
	for (row=PD4;row<=PD7;row++)
  fa:	24 c0       	rjmp	.+72     	; 0x144 <GetKey+0x60>
	{
		writePin(row,LOW);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	8d 2f       	mov	r24, r29
 100:	0e 94 50 01 	call	0x2a0	; 0x2a0 <writePin>
		for (col=PC3;col<=PC6;col++)
 104:	c3 e1       	ldi	r28, 0x13	; 19
 106:	17 c0       	rjmp	.+46     	; 0x136 <GetKey+0x52>
		{
			if (!readPin(col))
 108:	8c 2f       	mov	r24, r28
 10a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <readPin>
 10e:	81 11       	cpse	r24, r1
 110:	11 c0       	rjmp	.+34     	; 0x134 <GetKey+0x50>
			{
				key=keys[row-4][col-3];
 112:	8d 2f       	mov	r24, r29
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	04 97       	sbiw	r24, 0x04	; 4
 118:	2c 2f       	mov	r18, r28
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	23 50       	subi	r18, 0x03	; 3
 11e:	31 09       	sbc	r19, r1
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	80 5a       	subi	r24, 0xA0	; 160
 12a:	9f 4f       	sbci	r25, 0xFF	; 255
 12c:	fc 01       	movw	r30, r24
 12e:	e2 0f       	add	r30, r18
 130:	f3 1f       	adc	r31, r19
 132:	10 81       	ld	r17, Z
	u8 row=0,col=0;
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
	for (row=PD4;row<=PD7;row++)
=======
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	u8 key=0;
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
  e8:	dc e1       	ldi	r29, 0x1C	; 28
  ea:	2c c0       	rjmp	.+88     	; 0x144 <GetKey+0x60>
	{
		writePin(row,LOW);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8d 2f       	mov	r24, r29
  f0:	0e 94 4f 01 	call	0x29e	; 0x29e <writePin>
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
  f4:	c3 e1       	ldi	r28, 0x13	; 19
  f6:	1f c0       	rjmp	.+62     	; 0x136 <GetKey+0x52>
		{
			if (!readPin(col))
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <readPin>
  fe:	81 11       	cpse	r24, r1
 100:	19 c0       	rjmp	.+50     	; 0x134 <GetKey+0x50>
			{
				while(!readPin(col));
 102:	8c 2f       	mov	r24, r28
 104:	0e 94 e5 01 	call	0x3ca	; 0x3ca <readPin>
 108:	88 23       	and	r24, r24
 10a:	d9 f3       	breq	.-10     	; 0x102 <GetKey+0x1e>
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
 10c:	ed 2f       	mov	r30, r29
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	9f 01       	movw	r18, r30
 112:	2c 51       	subi	r18, 0x1C	; 28
 114:	31 09       	sbc	r19, r1
 116:	ec 2f       	mov	r30, r28
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	cf 01       	movw	r24, r30
 11c:	43 97       	sbiw	r24, 0x13	; 19
 11e:	f9 01       	movw	r30, r18
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	e0 5a       	subi	r30, 0xA0	; 160
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	e8 0f       	add	r30, r24
 12e:	f9 1f       	adc	r31, r25
 130:	80 81       	ld	r24, Z
				return key;
 132:	0b c0       	rjmp	.+22     	; 0x14a <GetKey+0x66>
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
>>>>>>> Stashed changes
	{
		writePin(row,LOW);
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
 134:	cf 5f       	subi	r28, 0xFF	; 255
 136:	c7 31       	cpi	r28, 0x17	; 23
<<<<<<< Updated upstream
 138:	38 f3       	brcs	.-50     	; 0x108 <GetKey+0x24>
			if (!readPin(col))
			{
				key=keys[row-4][col-3];
=======
 138:	f8 f2       	brcs	.-66     	; 0xf8 <GetKey+0x14>
				while(!readPin(col));
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
				return key;
>>>>>>> Stashed changes
			}	
		}
		writePin(row,HIGH);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	8d 2f       	mov	r24, r29
<<<<<<< Updated upstream
 13e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <writePin>
=======
 13e:	0e 94 4f 01 	call	0x29e	; 0x29e <writePin>
>>>>>>> Stashed changes
u8 GetKey(void)
{
	u8 key=0;
	u8 row=0,col=0;
<<<<<<< Updated upstream
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
	for (row=PD4;row<=PD7;row++)
 142:	df 5f       	subi	r29, 0xFF	; 255
 144:	d0 32       	cpi	r29, 0x20	; 32
 146:	d0 f2       	brcs	.-76     	; 0xfc <GetKey+0x18>
=======
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
 142:	df 5f       	subi	r29, 0xFF	; 255
 144:	d0 32       	cpi	r29, 0x20	; 32
 146:	90 f2       	brcs	.-92     	; 0xec <GetKey+0x8>
				return key;
>>>>>>> Stashed changes
			}	
		}
		writePin(row,HIGH);
	}	
	return key;
<<<<<<< Updated upstream
 148:	81 2f       	mov	r24, r17
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	08 95       	ret

00000152 <LCD_latch>:
=======
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <LCD_latch>:
>>>>>>> Stashed changes
	while(str[indx]!='\0')
	{
		disp_char(indx[str]);
		indx++;
	}
}
<<<<<<< Updated upstream
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	8b e0       	ldi	r24, 0x0B	; 11
 156:	0e 94 50 01 	call	0x2a0	; 0x2a0 <writePin>
 15a:	85 ed       	ldi	r24, 0xD5	; 213
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_latch+0xa>
 160:	00 00       	nop
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	8b e0       	ldi	r24, 0x0B	; 11
 166:	0e 94 50 01 	call	0x2a0	; 0x2a0 <writePin>
 16a:	85 ed       	ldi	r24, 0xD5	; 213
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_latch+0x1a>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <SendToLCD>:
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	60 ef       	ldi	r22, 0xF0	; 240
 17c:	8b e3       	ldi	r24, 0x3B	; 59
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 2b 02 	call	0x456	; 0x456 <writePins>
 184:	6c 2f       	mov	r22, r28
 186:	60 7f       	andi	r22, 0xF0	; 240
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	8b e3       	ldi	r24, 0x3B	; 59
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 2b 02 	call	0x456	; 0x456 <writePins>
 192:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_latch>
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	60 ef       	ldi	r22, 0xF0	; 240
 19a:	8b e3       	ldi	r24, 0x3B	; 59
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 2b 02 	call	0x456	; 0x456 <writePins>
 1a2:	80 e1       	ldi	r24, 0x10	; 16
 1a4:	c8 9f       	mul	r28, r24
 1a6:	b0 01       	movw	r22, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	8b e3       	ldi	r24, 0x3B	; 59
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 2b 02 	call	0x456	; 0x456 <writePins>
 1b4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_latch>
 1b8:	85 ed       	ldi	r24, 0xD5	; 213
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <SendToLCD+0x46>
 1be:	00 00       	nop
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_send_cmd>:
 1c4:	cf 93       	push	r28
 1c6:	c8 2f       	mov	r28, r24
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	89 e0       	ldi	r24, 0x09	; 9
 1cc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <writePin>
 1d0:	8c 2f       	mov	r24, r28
 1d2:	0e 94 ba 00 	call	0x174	; 0x174 <SendToLCD>
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <LCD_CLEAR>:
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_send_cmd>
 1e0:	8f e3       	ldi	r24, 0x3F	; 63
 1e2:	9f e1       	ldi	r25, 0x1F	; 31
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_CLEAR+0xa>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_CLEAR+0x10>
 1ea:	00 00       	nop
 1ec:	08 95       	ret

000001ee <LCD_ret_Home>:
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_send_cmd>
 1f4:	8f e3       	ldi	r24, 0x3F	; 63
 1f6:	9f e1       	ldi	r25, 0x1F	; 31
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_ret_Home+0xa>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_ret_Home+0x10>
 1fe:	00 00       	nop
 200:	08 95       	ret

00000202 <LCD_init>:
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	60 ef       	ldi	r22, 0xF0	; 240
 206:	8a e3       	ldi	r24, 0x3A	; 58
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 3a 02 	call	0x474	; 0x474 <pinsDirection>
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	6e e0       	ldi	r22, 0x0E	; 14
 212:	87 e3       	ldi	r24, 0x37	; 55
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 3a 02 	call	0x474	; 0x474 <pinsDirection>
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8a e0       	ldi	r24, 0x0A	; 10
 21e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <writePin>
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	83 ef       	ldi	r24, 0xF3	; 243
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <LCD_init+0x26>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_init+0x30>
 232:	00 00       	nop
 234:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_ret_Home>
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_send_cmd>
 23e:	8f e0       	ldi	r24, 0x0F	; 15
 240:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_send_cmd>
 244:	80 e1       	ldi	r24, 0x10	; 16
 246:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_send_cmd>
 24a:	88 e2       	ldi	r24, 0x28	; 40
 24c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_send_cmd>
 250:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_CLEAR>
 254:	08 95       	ret

00000256 <LCD_send_data>:
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	89 e0       	ldi	r24, 0x09	; 9
 25e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <writePin>
 262:	8c 2f       	mov	r24, r28
 264:	0e 94 ba 00 	call	0x174	; 0x174 <SendToLCD>
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <disp_char>:
 26c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_send_data>
 270:	08 95       	ret

00000272 <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
	if (row==1)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	29 f4       	brne	.+10     	; 0x280 <LCD_GOTXY+0xe>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
 276:	8f e7       	ldi	r24, 0x7F	; 127
 278:	86 0f       	add	r24, r22
 27a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_send_cmd>
 27e:	08 95       	ret
	}
	else if(row==2)
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	21 f4       	brne	.+8      	; 0x28c <LCD_GOTXY+0x1a>
	{
		LCD_send_cmd(DDRAM_ADD+0x40+col-1);	
 284:	8f eb       	ldi	r24, 0xBF	; 191
 286:	86 0f       	add	r24, r22
 288:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_send_cmd>
 28c:	08 95       	ret

0000028e <disp_charXY>:
=======
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	8b e0       	ldi	r24, 0x0B	; 11
 154:	0e 94 4f 01 	call	0x29e	; 0x29e <writePin>
 158:	85 ed       	ldi	r24, 0xD5	; 213
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_latch+0xa>
 15e:	00 00       	nop
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	8b e0       	ldi	r24, 0x0B	; 11
 164:	0e 94 4f 01 	call	0x29e	; 0x29e <writePin>
 168:	85 ed       	ldi	r24, 0xD5	; 213
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_latch+0x1a>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <SendToLCD>:
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	60 ef       	ldi	r22, 0xF0	; 240
 17a:	8b e3       	ldi	r24, 0x3B	; 59
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 2a 02 	call	0x454	; 0x454 <writePins>
 182:	6c 2f       	mov	r22, r28
 184:	60 7f       	andi	r22, 0xF0	; 240
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	8b e3       	ldi	r24, 0x3B	; 59
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 2a 02 	call	0x454	; 0x454 <writePins>
 190:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_latch>
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	60 ef       	ldi	r22, 0xF0	; 240
 198:	8b e3       	ldi	r24, 0x3B	; 59
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 2a 02 	call	0x454	; 0x454 <writePins>
 1a0:	80 e1       	ldi	r24, 0x10	; 16
 1a2:	c8 9f       	mul	r28, r24
 1a4:	b0 01       	movw	r22, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	8b e3       	ldi	r24, 0x3B	; 59
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 2a 02 	call	0x454	; 0x454 <writePins>
 1b2:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_latch>
 1b6:	85 ed       	ldi	r24, 0xD5	; 213
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <SendToLCD+0x46>
 1bc:	00 00       	nop
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <LCD_send_cmd>:
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	89 e0       	ldi	r24, 0x09	; 9
 1ca:	0e 94 4f 01 	call	0x29e	; 0x29e <writePin>
 1ce:	8c 2f       	mov	r24, r28
 1d0:	0e 94 b9 00 	call	0x172	; 0x172 <SendToLCD>
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <LCD_CLEAR>:
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_send_cmd>
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9f e1       	ldi	r25, 0x1F	; 31
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_CLEAR+0xa>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_CLEAR+0x10>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <LCD_ret_Home>:
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_send_cmd>
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	9f e1       	ldi	r25, 0x1F	; 31
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD_ret_Home+0xa>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_ret_Home+0x10>
 1fc:	00 00       	nop
 1fe:	08 95       	ret

00000200 <LCD_init>:
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	60 ef       	ldi	r22, 0xF0	; 240
 204:	8a e3       	ldi	r24, 0x3A	; 58
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 39 02 	call	0x472	; 0x472 <pinsDirection>
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	6e e0       	ldi	r22, 0x0E	; 14
 210:	87 e3       	ldi	r24, 0x37	; 55
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 39 02 	call	0x472	; 0x472 <pinsDirection>
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	0e 94 4f 01 	call	0x29e	; 0x29e <writePin>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	83 ef       	ldi	r24, 0xF3	; 243
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <LCD_init+0x26>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_init+0x30>
 230:	00 00       	nop
 232:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_ret_Home>
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_send_cmd>
 23c:	8f e0       	ldi	r24, 0x0F	; 15
 23e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_send_cmd>
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_send_cmd>
 248:	88 e2       	ldi	r24, 0x28	; 40
 24a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_send_cmd>
 24e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_CLEAR>
 252:	08 95       	ret

00000254 <LCD_send_data>:
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	89 e0       	ldi	r24, 0x09	; 9
 25c:	0e 94 4f 01 	call	0x29e	; 0x29e <writePin>
 260:	8c 2f       	mov	r24, r28
 262:	0e 94 b9 00 	call	0x172	; 0x172 <SendToLCD>
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <disp_char>:
 26a:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_data>
 26e:	08 95       	ret

00000270 <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
	if (row==1)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	29 f4       	brne	.+10     	; 0x27e <LCD_GOTXY+0xe>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
 274:	8f e7       	ldi	r24, 0x7F	; 127
 276:	86 0f       	add	r24, r22
 278:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_send_cmd>
 27c:	08 95       	ret
	}
	else if(row==2)
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	21 f4       	brne	.+8      	; 0x28a <LCD_GOTXY+0x1a>
	{
		LCD_send_cmd(DDRAM_ADD+0x40+col-1);	
 282:	8f eb       	ldi	r24, 0xBF	; 191
 284:	86 0f       	add	r24, r22
 286:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_send_cmd>
 28a:	08 95       	ret

0000028c <disp_charXY>:
>>>>>>> Stashed changes
{
	LCD_send_data(letter);
}

void disp_charXY(u8 row,u8 col,u8 letter)
{
<<<<<<< Updated upstream
 28e:	cf 93       	push	r28
 290:	c4 2f       	mov	r28, r20
	LCD_GOTXY(row,col);
 292:	0e 94 39 01 	call	0x272	; 0x272 <LCD_GOTXY>
	disp_char(letter);	
 296:	8c 2f       	mov	r24, r28
 298:	0e 94 36 01 	call	0x26c	; 0x26c <disp_char>
}
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <writePin>:
=======
 28c:	cf 93       	push	r28
 28e:	c4 2f       	mov	r28, r20
	LCD_GOTXY(row,col);
 290:	0e 94 38 01 	call	0x270	; 0x270 <LCD_GOTXY>
	disp_char(letter);	
 294:	8c 2f       	mov	r24, r28
 296:	0e 94 35 01 	call	0x26a	; 0x26a <disp_char>
}
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <writePin>:
>>>>>>> Stashed changes
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
		if(direction == OUTPUT)
			SETBit(DDRD,(pinNo-24));
		else if(direction == INPUT)
			CLRBit(DDRD,(pinNo-24));
<<<<<<< Updated upstream
 2a0:	88 30       	cpi	r24, 0x08	; 8
 2a2:	f8 f4       	brcc	.+62     	; 0x2e2 <writePin+0x42>
 2a4:	61 30       	cpi	r22, 0x01	; 1
 2a6:	69 f4       	brne	.+26     	; 0x2c2 <writePin+0x22>
 2a8:	4b b3       	in	r20, 0x1b	; 27
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	b9 01       	movw	r22, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <writePin+0x16>
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	8a 95       	dec	r24
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <writePin+0x12>
 2ba:	cb 01       	movw	r24, r22
 2bc:	84 2b       	or	r24, r20
 2be:	8b bb       	out	0x1b, r24	; 27
 2c0:	08 95       	ret
 2c2:	61 11       	cpse	r22, r1
 2c4:	82 c0       	rjmp	.+260    	; 0x3ca <writePin+0x12a>
 2c6:	4b b3       	in	r20, 0x1b	; 27
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	b9 01       	movw	r22, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <writePin+0x34>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <writePin+0x30>
 2d8:	cb 01       	movw	r24, r22
 2da:	80 95       	com	r24
 2dc:	84 23       	and	r24, r20
 2de:	8b bb       	out	0x1b, r24	; 27
 2e0:	08 95       	ret
 2e2:	98 ef       	ldi	r25, 0xF8	; 248
 2e4:	98 0f       	add	r25, r24
 2e6:	98 30       	cpi	r25, 0x08	; 8
 2e8:	18 f5       	brcc	.+70     	; 0x330 <writePin+0x90>
 2ea:	61 30       	cpi	r22, 0x01	; 1
 2ec:	79 f4       	brne	.+30     	; 0x30c <writePin+0x6c>
 2ee:	48 b3       	in	r20, 0x18	; 24
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 97       	sbiw	r24, 0x08	; 8
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	b9 01       	movw	r22, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <writePin+0x60>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	8a 95       	dec	r24
 302:	e2 f7       	brpl	.-8      	; 0x2fc <writePin+0x5c>
 304:	cb 01       	movw	r24, r22
 306:	84 2b       	or	r24, r20
 308:	88 bb       	out	0x18, r24	; 24
 30a:	08 95       	ret
 30c:	61 11       	cpse	r22, r1
 30e:	5d c0       	rjmp	.+186    	; 0x3ca <writePin+0x12a>
 310:	48 b3       	in	r20, 0x18	; 24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	08 97       	sbiw	r24, 0x08	; 8
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	b9 01       	movw	r22, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <writePin+0x82>
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	8a 95       	dec	r24
 324:	e2 f7       	brpl	.-8      	; 0x31e <writePin+0x7e>
 326:	cb 01       	movw	r24, r22
 328:	80 95       	com	r24
 32a:	84 23       	and	r24, r20
 32c:	88 bb       	out	0x18, r24	; 24
 32e:	08 95       	ret
 330:	90 ef       	ldi	r25, 0xF0	; 240
 332:	98 0f       	add	r25, r24
 334:	98 30       	cpi	r25, 0x08	; 8
 336:	18 f5       	brcc	.+70     	; 0x37e <writePin+0xde>
 338:	61 30       	cpi	r22, 0x01	; 1
 33a:	79 f4       	brne	.+30     	; 0x35a <writePin+0xba>
 33c:	45 b3       	in	r20, 0x15	; 21
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	40 97       	sbiw	r24, 0x10	; 16
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	b9 01       	movw	r22, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <writePin+0xae>
 34a:	66 0f       	add	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	8a 95       	dec	r24
 350:	e2 f7       	brpl	.-8      	; 0x34a <writePin+0xaa>
 352:	cb 01       	movw	r24, r22
 354:	84 2b       	or	r24, r20
 356:	85 bb       	out	0x15, r24	; 21
 358:	08 95       	ret
 35a:	61 11       	cpse	r22, r1
 35c:	36 c0       	rjmp	.+108    	; 0x3ca <writePin+0x12a>
 35e:	45 b3       	in	r20, 0x15	; 21
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	40 97       	sbiw	r24, 0x10	; 16
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	b9 01       	movw	r22, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <writePin+0xd0>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	8a 95       	dec	r24
 372:	e2 f7       	brpl	.-8      	; 0x36c <writePin+0xcc>
 374:	cb 01       	movw	r24, r22
 376:	80 95       	com	r24
 378:	84 23       	and	r24, r20
 37a:	85 bb       	out	0x15, r24	; 21
 37c:	08 95       	ret
 37e:	98 ee       	ldi	r25, 0xE8	; 232
 380:	98 0f       	add	r25, r24
 382:	98 30       	cpi	r25, 0x08	; 8
 384:	10 f5       	brcc	.+68     	; 0x3ca <writePin+0x12a>
 386:	61 30       	cpi	r22, 0x01	; 1
 388:	79 f4       	brne	.+30     	; 0x3a8 <writePin+0x108>
 38a:	42 b3       	in	r20, 0x12	; 18
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	48 97       	sbiw	r24, 0x18	; 24
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	b9 01       	movw	r22, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <writePin+0xfc>
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	8a 95       	dec	r24
 39e:	e2 f7       	brpl	.-8      	; 0x398 <writePin+0xf8>
 3a0:	cb 01       	movw	r24, r22
 3a2:	84 2b       	or	r24, r20
 3a4:	82 bb       	out	0x12, r24	; 18
 3a6:	08 95       	ret
 3a8:	61 11       	cpse	r22, r1
 3aa:	0f c0       	rjmp	.+30     	; 0x3ca <writePin+0x12a>
 3ac:	42 b3       	in	r20, 0x12	; 18
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	48 97       	sbiw	r24, 0x18	; 24
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	b9 01       	movw	r22, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <writePin+0x11e>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	8a 95       	dec	r24
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <writePin+0x11a>
 3c2:	cb 01       	movw	r24, r22
 3c4:	80 95       	com	r24
 3c6:	84 23       	and	r24, r20
 3c8:	82 bb       	out	0x12, r24	; 18
 3ca:	08 95       	ret

000003cc <readPin>:
=======
 29e:	88 30       	cpi	r24, 0x08	; 8
 2a0:	f8 f4       	brcc	.+62     	; 0x2e0 <writePin+0x42>
 2a2:	61 30       	cpi	r22, 0x01	; 1
 2a4:	69 f4       	brne	.+26     	; 0x2c0 <writePin+0x22>
 2a6:	4b b3       	in	r20, 0x1b	; 27
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	b9 01       	movw	r22, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <writePin+0x16>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	8a 95       	dec	r24
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <writePin+0x12>
 2b8:	cb 01       	movw	r24, r22
 2ba:	84 2b       	or	r24, r20
 2bc:	8b bb       	out	0x1b, r24	; 27
 2be:	08 95       	ret
 2c0:	61 11       	cpse	r22, r1
 2c2:	82 c0       	rjmp	.+260    	; 0x3c8 <writePin+0x12a>
 2c4:	4b b3       	in	r20, 0x1b	; 27
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	b9 01       	movw	r22, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <writePin+0x34>
 2ce:	66 0f       	add	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	8a 95       	dec	r24
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <writePin+0x30>
 2d6:	cb 01       	movw	r24, r22
 2d8:	80 95       	com	r24
 2da:	84 23       	and	r24, r20
 2dc:	8b bb       	out	0x1b, r24	; 27
 2de:	08 95       	ret
 2e0:	98 ef       	ldi	r25, 0xF8	; 248
 2e2:	98 0f       	add	r25, r24
 2e4:	98 30       	cpi	r25, 0x08	; 8
 2e6:	18 f5       	brcc	.+70     	; 0x32e <writePin+0x90>
 2e8:	61 30       	cpi	r22, 0x01	; 1
 2ea:	79 f4       	brne	.+30     	; 0x30a <writePin+0x6c>
 2ec:	48 b3       	in	r20, 0x18	; 24
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	08 97       	sbiw	r24, 0x08	; 8
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <writePin+0x60>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	8a 95       	dec	r24
 300:	e2 f7       	brpl	.-8      	; 0x2fa <writePin+0x5c>
 302:	cb 01       	movw	r24, r22
 304:	84 2b       	or	r24, r20
 306:	88 bb       	out	0x18, r24	; 24
 308:	08 95       	ret
 30a:	61 11       	cpse	r22, r1
 30c:	5d c0       	rjmp	.+186    	; 0x3c8 <writePin+0x12a>
 30e:	48 b3       	in	r20, 0x18	; 24
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	08 97       	sbiw	r24, 0x08	; 8
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	b9 01       	movw	r22, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <writePin+0x82>
 31c:	66 0f       	add	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	8a 95       	dec	r24
 322:	e2 f7       	brpl	.-8      	; 0x31c <writePin+0x7e>
 324:	cb 01       	movw	r24, r22
 326:	80 95       	com	r24
 328:	84 23       	and	r24, r20
 32a:	88 bb       	out	0x18, r24	; 24
 32c:	08 95       	ret
 32e:	90 ef       	ldi	r25, 0xF0	; 240
 330:	98 0f       	add	r25, r24
 332:	98 30       	cpi	r25, 0x08	; 8
 334:	18 f5       	brcc	.+70     	; 0x37c <writePin+0xde>
 336:	61 30       	cpi	r22, 0x01	; 1
 338:	79 f4       	brne	.+30     	; 0x358 <writePin+0xba>
 33a:	45 b3       	in	r20, 0x15	; 21
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	40 97       	sbiw	r24, 0x10	; 16
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	b9 01       	movw	r22, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <writePin+0xae>
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	8a 95       	dec	r24
 34e:	e2 f7       	brpl	.-8      	; 0x348 <writePin+0xaa>
 350:	cb 01       	movw	r24, r22
 352:	84 2b       	or	r24, r20
 354:	85 bb       	out	0x15, r24	; 21
 356:	08 95       	ret
 358:	61 11       	cpse	r22, r1
 35a:	36 c0       	rjmp	.+108    	; 0x3c8 <writePin+0x12a>
 35c:	45 b3       	in	r20, 0x15	; 21
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	40 97       	sbiw	r24, 0x10	; 16
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	b9 01       	movw	r22, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <writePin+0xd0>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	8a 95       	dec	r24
 370:	e2 f7       	brpl	.-8      	; 0x36a <writePin+0xcc>
 372:	cb 01       	movw	r24, r22
 374:	80 95       	com	r24
 376:	84 23       	and	r24, r20
 378:	85 bb       	out	0x15, r24	; 21
 37a:	08 95       	ret
 37c:	98 ee       	ldi	r25, 0xE8	; 232
 37e:	98 0f       	add	r25, r24
 380:	98 30       	cpi	r25, 0x08	; 8
 382:	10 f5       	brcc	.+68     	; 0x3c8 <writePin+0x12a>
 384:	61 30       	cpi	r22, 0x01	; 1
 386:	79 f4       	brne	.+30     	; 0x3a6 <writePin+0x108>
 388:	42 b3       	in	r20, 0x12	; 18
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	48 97       	sbiw	r24, 0x18	; 24
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	b9 01       	movw	r22, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <writePin+0xfc>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	8a 95       	dec	r24
 39c:	e2 f7       	brpl	.-8      	; 0x396 <writePin+0xf8>
 39e:	cb 01       	movw	r24, r22
 3a0:	84 2b       	or	r24, r20
 3a2:	82 bb       	out	0x12, r24	; 18
 3a4:	08 95       	ret
 3a6:	61 11       	cpse	r22, r1
 3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <writePin+0x12a>
 3aa:	42 b3       	in	r20, 0x12	; 18
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	48 97       	sbiw	r24, 0x18	; 24
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <writePin+0x11e>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <writePin+0x11a>
 3c0:	cb 01       	movw	r24, r22
 3c2:	80 95       	com	r24
 3c4:	84 23       	and	r24, r20
 3c6:	82 bb       	out	0x12, r24	; 18
 3c8:	08 95       	ret

000003ca <readPin>:
>>>>>>> Stashed changes
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PA0)&&(pinNo<=PA7))
<<<<<<< Updated upstream
 3cc:	88 30       	cpi	r24, 0x08	; 8
 3ce:	58 f4       	brcc	.+22     	; 0x3e6 <readPin+0x1a>
		result=GETBit(PINA,pinNo);
 3d0:	29 b3       	in	r18, 0x19	; 25
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	a9 01       	movw	r20, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <readPin+0x10>
 3d8:	55 95       	asr	r21
 3da:	47 95       	ror	r20
 3dc:	8a 95       	dec	r24
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <readPin+0xc>
 3e0:	ca 01       	movw	r24, r20
 3e2:	81 70       	andi	r24, 0x01	; 1
 3e4:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
 3e6:	98 ef       	ldi	r25, 0xF8	; 248
 3e8:	98 0f       	add	r25, r24
 3ea:	98 30       	cpi	r25, 0x08	; 8
 3ec:	70 f4       	brcc	.+28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		result=GETBit(PINB,pinNo-8);
 3ee:	96 b3       	in	r25, 0x16	; 22
 3f0:	28 2f       	mov	r18, r24
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	28 50       	subi	r18, 0x08	; 8
 3f6:	31 09       	sbc	r19, r1
 3f8:	89 2f       	mov	r24, r25
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	95 95       	asr	r25
 400:	87 95       	ror	r24
 402:	2a 95       	dec	r18
 404:	e2 f7       	brpl	.-8      	; 0x3fe <readPin+0x32>
 406:	81 70       	andi	r24, 0x01	; 1
 408:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
 40a:	90 ef       	ldi	r25, 0xF0	; 240
 40c:	98 0f       	add	r25, r24
 40e:	98 30       	cpi	r25, 0x08	; 8
 410:	70 f4       	brcc	.+28     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		result=GETBit(PINC,pinNo-16);
 412:	93 b3       	in	r25, 0x13	; 19
 414:	28 2f       	mov	r18, r24
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	20 51       	subi	r18, 0x10	; 16
 41a:	31 09       	sbc	r19, r1
 41c:	89 2f       	mov	r24, r25
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	95 95       	asr	r25
 424:	87 95       	ror	r24
 426:	2a 95       	dec	r18
 428:	e2 f7       	brpl	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42a:	81 70       	andi	r24, 0x01	; 1
 42c:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
 42e:	98 ee       	ldi	r25, 0xE8	; 232
 430:	98 0f       	add	r25, r24
 432:	98 30       	cpi	r25, 0x08	; 8
 434:	70 f4       	brcc	.+28     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		result=GETBit(PIND,pinNo-24);
 436:	90 b3       	in	r25, 0x10	; 16
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	28 51       	subi	r18, 0x18	; 24
 43e:	31 09       	sbc	r19, r1
 440:	89 2f       	mov	r24, r25
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	95 95       	asr	r25
 448:	87 95       	ror	r24
 44a:	2a 95       	dec	r18
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44e:	81 70       	andi	r24, 0x01	; 1
 450:	08 95       	ret
=======
 3ca:	88 30       	cpi	r24, 0x08	; 8
 3cc:	58 f4       	brcc	.+22     	; 0x3e4 <readPin+0x1a>
		result=GETBit(PINA,pinNo);
 3ce:	29 b3       	in	r18, 0x19	; 25
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	a9 01       	movw	r20, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <readPin+0x10>
 3d6:	55 95       	asr	r21
 3d8:	47 95       	ror	r20
 3da:	8a 95       	dec	r24
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <readPin+0xc>
 3de:	ca 01       	movw	r24, r20
 3e0:	81 70       	andi	r24, 0x01	; 1
 3e2:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
 3e4:	98 ef       	ldi	r25, 0xF8	; 248
 3e6:	98 0f       	add	r25, r24
 3e8:	98 30       	cpi	r25, 0x08	; 8
 3ea:	70 f4       	brcc	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		result=GETBit(PINB,pinNo-8);
 3ec:	96 b3       	in	r25, 0x16	; 22
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	28 50       	subi	r18, 0x08	; 8
 3f4:	31 09       	sbc	r19, r1
 3f6:	89 2f       	mov	r24, r25
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	95 95       	asr	r25
 3fe:	87 95       	ror	r24
 400:	2a 95       	dec	r18
 402:	e2 f7       	brpl	.-8      	; 0x3fc <readPin+0x32>
 404:	81 70       	andi	r24, 0x01	; 1
 406:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
 408:	90 ef       	ldi	r25, 0xF0	; 240
 40a:	98 0f       	add	r25, r24
 40c:	98 30       	cpi	r25, 0x08	; 8
 40e:	70 f4       	brcc	.+28     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		result=GETBit(PINC,pinNo-16);
 410:	93 b3       	in	r25, 0x13	; 19
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	20 51       	subi	r18, 0x10	; 16
 418:	31 09       	sbc	r19, r1
 41a:	89 2f       	mov	r24, r25
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	95 95       	asr	r25
 422:	87 95       	ror	r24
 424:	2a 95       	dec	r18
 426:	e2 f7       	brpl	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	81 70       	andi	r24, 0x01	; 1
 42a:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
 42c:	98 ee       	ldi	r25, 0xE8	; 232
 42e:	98 0f       	add	r25, r24
 430:	98 30       	cpi	r25, 0x08	; 8
 432:	70 f4       	brcc	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		result=GETBit(PIND,pinNo-24);
 434:	90 b3       	in	r25, 0x10	; 16
 436:	28 2f       	mov	r18, r24
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	28 51       	subi	r18, 0x18	; 24
 43c:	31 09       	sbc	r19, r1
 43e:	89 2f       	mov	r24, r25
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	2a 95       	dec	r18
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	81 70       	andi	r24, 0x01	; 1
 44e:	08 95       	ret
>>>>>>> Stashed changes
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
<<<<<<< Updated upstream
 452:	80 e0       	ldi	r24, 0x00	; 0
=======
 450:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> Stashed changes
		result=GETBit(PINC,pinNo-16);
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,pinNo-24);
	else{}
	return result;
}
<<<<<<< Updated upstream
 454:	08 95       	ret

00000456 <writePins>:
=======
 452:	08 95       	ret

00000454 <writePins>:
>>>>>>> Stashed changes
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
<<<<<<< Updated upstream
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	29 f4       	brne	.+10     	; 0x464 <writePins+0xe>
		SETBits(*port,mask);
 45a:	fc 01       	movw	r30, r24
 45c:	20 81       	ld	r18, Z
 45e:	62 2b       	or	r22, r18
 460:	60 83       	st	Z, r22
 462:	08 95       	ret
	else if(logic==LOW)
 464:	41 11       	cpse	r20, r1
 466:	05 c0       	rjmp	.+10     	; 0x472 <writePins+0x1c>
		CLRBits(*port,mask);
 468:	fc 01       	movw	r30, r24
 46a:	20 81       	ld	r18, Z
 46c:	60 95       	com	r22
 46e:	62 23       	and	r22, r18
 470:	60 83       	st	Z, r22
 472:	08 95       	ret

00000474 <pinsDirection>:
=======
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	29 f4       	brne	.+10     	; 0x462 <writePins+0xe>
		SETBits(*port,mask);
 458:	fc 01       	movw	r30, r24
 45a:	20 81       	ld	r18, Z
 45c:	62 2b       	or	r22, r18
 45e:	60 83       	st	Z, r22
 460:	08 95       	ret
	else if(logic==LOW)
 462:	41 11       	cpse	r20, r1
 464:	05 c0       	rjmp	.+10     	; 0x470 <writePins+0x1c>
		CLRBits(*port,mask);
 466:	fc 01       	movw	r30, r24
 468:	20 81       	ld	r18, Z
 46a:	60 95       	com	r22
 46c:	62 23       	and	r22, r18
 46e:	60 83       	st	Z, r22
 470:	08 95       	ret

00000472 <pinsDirection>:
>>>>>>> Stashed changes
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
<<<<<<< Updated upstream
 474:	41 30       	cpi	r20, 0x01	; 1
 476:	29 f4       	brne	.+10     	; 0x482 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 478:	fc 01       	movw	r30, r24
 47a:	20 81       	ld	r18, Z
 47c:	62 2b       	or	r22, r18
 47e:	60 83       	st	Z, r22
 480:	08 95       	ret
	else if(direction == INPUT)
 482:	41 11       	cpse	r20, r1
 484:	05 c0       	rjmp	.+10     	; 0x490 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 486:	fc 01       	movw	r30, r24
 488:	20 81       	ld	r18, Z
 48a:	60 95       	com	r22
 48c:	62 23       	and	r22, r18
 48e:	60 83       	st	Z, r22
 490:	08 95       	ret

00000492 <_exit>:
 492:	f8 94       	cli

00000494 <__stop_program>:
 494:	ff cf       	rjmp	.-2      	; 0x494 <__stop_program>
=======
 472:	41 30       	cpi	r20, 0x01	; 1
 474:	29 f4       	brne	.+10     	; 0x480 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 476:	fc 01       	movw	r30, r24
 478:	20 81       	ld	r18, Z
 47a:	62 2b       	or	r22, r18
 47c:	60 83       	st	Z, r22
 47e:	08 95       	ret
	else if(direction == INPUT)
 480:	41 11       	cpse	r20, r1
 482:	05 c0       	rjmp	.+10     	; 0x48e <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 484:	fc 01       	movw	r30, r24
 486:	20 81       	ld	r18, Z
 488:	60 95       	com	r22
 48a:	62 23       	and	r22, r18
 48c:	60 83       	st	Z, r22
 48e:	08 95       	ret

00000490 <_exit>:
 490:	f8 94       	cli

00000492 <__stop_program>:
 492:	ff cf       	rjmp	.-2      	; 0x492 <__stop_program>
>>>>>>> Stashed changes
