
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e5  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e0  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dd  00000000  00000000  000011a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000316  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000340  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "includes.h"

int main(void)
{
pinDirection(PD3,OUTPUT);
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	8b e1       	ldi	r24, 0x1B	; 27
  70:	0e 94 d5 00 	call	0x1aa	; 0x1aa <pinDirection>
writePin(PD3,HIGH);
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	8b e1       	ldi	r24, 0x1B	; 27
  78:	0e 94 3f 00 	call	0x7e	; 0x7e <writePin>
  7c:	ff cf       	rjmp	.-2      	; 0x7c <main+0x10>

0000007e <writePin>:
 *  Author: Mohamed
 */ 
#include "includes.h"

void writePin(u8 pinNo,u8 logic){
	if((pinNo>=PA0)&&(pinNo<=PA7)){
  7e:	88 30       	cpi	r24, 0x08	; 8
  80:	f8 f4       	brcc	.+62     	; 0xc0 <writePin+0x42>
		if(logic==HIGH)
  82:	61 30       	cpi	r22, 0x01	; 1
  84:	69 f4       	brne	.+26     	; 0xa0 <writePin+0x22>
		SETBit(PORTA,pinNo);
  86:	4b b3       	in	r20, 0x1b	; 27
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	b9 01       	movw	r22, r18
  8e:	02 c0       	rjmp	.+4      	; 0x94 <writePin+0x16>
  90:	66 0f       	add	r22, r22
  92:	77 1f       	adc	r23, r23
  94:	8a 95       	dec	r24
  96:	e2 f7       	brpl	.-8      	; 0x90 <writePin+0x12>
  98:	cb 01       	movw	r24, r22
  9a:	84 2b       	or	r24, r20
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	08 95       	ret
		else if(logic==LOW)
  a0:	61 11       	cpse	r22, r1
  a2:	82 c0       	rjmp	.+260    	; 0x1a8 <writePin+0x12a>
		CLRBit(PORTA,pinNo);
  a4:	4b b3       	in	r20, 0x1b	; 27
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	b9 01       	movw	r22, r18
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <writePin+0x34>
  ae:	66 0f       	add	r22, r22
  b0:	77 1f       	adc	r23, r23
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <writePin+0x30>
  b6:	cb 01       	movw	r24, r22
  b8:	80 95       	com	r24
  ba:	84 23       	and	r24, r20
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	08 95       	ret
		else{}
	}
	else if((pinNo>=PB0)&&(pinNo<=PB7)){
  c0:	98 ef       	ldi	r25, 0xF8	; 248
  c2:	98 0f       	add	r25, r24
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	18 f5       	brcc	.+70     	; 0x10e <writePin+0x90>
		if(logic==HIGH)
  c8:	61 30       	cpi	r22, 0x01	; 1
  ca:	79 f4       	brne	.+30     	; 0xea <writePin+0x6c>
		SETBit(PORTB,(pinNo-8));
  cc:	48 b3       	in	r20, 0x18	; 24
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 97       	sbiw	r24, 0x08	; 8
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	b9 01       	movw	r22, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <writePin+0x60>
  da:	66 0f       	add	r22, r22
  dc:	77 1f       	adc	r23, r23
  de:	8a 95       	dec	r24
  e0:	e2 f7       	brpl	.-8      	; 0xda <writePin+0x5c>
  e2:	cb 01       	movw	r24, r22
  e4:	84 2b       	or	r24, r20
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	08 95       	ret
		else if(logic==LOW)
  ea:	61 11       	cpse	r22, r1
  ec:	5d c0       	rjmp	.+186    	; 0x1a8 <writePin+0x12a>
		CLRBit(PORTB,(pinNo-8));
  ee:	48 b3       	in	r20, 0x18	; 24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 97       	sbiw	r24, 0x08	; 8
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	b9 01       	movw	r22, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <writePin+0x82>
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	8a 95       	dec	r24
 102:	e2 f7       	brpl	.-8      	; 0xfc <writePin+0x7e>
 104:	cb 01       	movw	r24, r22
 106:	80 95       	com	r24
 108:	84 23       	and	r24, r20
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	08 95       	ret
		else{}
	}
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
 10e:	90 ef       	ldi	r25, 0xF0	; 240
 110:	98 0f       	add	r25, r24
 112:	98 30       	cpi	r25, 0x08	; 8
 114:	18 f5       	brcc	.+70     	; 0x15c <writePin+0xde>
		if(logic==HIGH)
 116:	61 30       	cpi	r22, 0x01	; 1
 118:	79 f4       	brne	.+30     	; 0x138 <writePin+0xba>
		SETBit(PORTC,(pinNo-16));
 11a:	45 b3       	in	r20, 0x15	; 21
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	40 97       	sbiw	r24, 0x10	; 16
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <writePin+0xae>
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	8a 95       	dec	r24
 12e:	e2 f7       	brpl	.-8      	; 0x128 <writePin+0xaa>
 130:	cb 01       	movw	r24, r22
 132:	84 2b       	or	r24, r20
 134:	85 bb       	out	0x15, r24	; 21
 136:	08 95       	ret
		else if(logic==LOW)
 138:	61 11       	cpse	r22, r1
 13a:	36 c0       	rjmp	.+108    	; 0x1a8 <writePin+0x12a>
		CLRBit(PORTC,(pinNo-16));
 13c:	45 b3       	in	r20, 0x15	; 21
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	40 97       	sbiw	r24, 0x10	; 16
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	b9 01       	movw	r22, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <writePin+0xd0>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	8a 95       	dec	r24
 150:	e2 f7       	brpl	.-8      	; 0x14a <writePin+0xcc>
 152:	cb 01       	movw	r24, r22
 154:	80 95       	com	r24
 156:	84 23       	and	r24, r20
 158:	85 bb       	out	0x15, r24	; 21
 15a:	08 95       	ret
		else{}
	}
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
 15c:	98 ee       	ldi	r25, 0xE8	; 232
 15e:	98 0f       	add	r25, r24
 160:	98 30       	cpi	r25, 0x08	; 8
 162:	10 f5       	brcc	.+68     	; 0x1a8 <writePin+0x12a>
		if(logic==HIGH)
 164:	61 30       	cpi	r22, 0x01	; 1
 166:	79 f4       	brne	.+30     	; 0x186 <writePin+0x108>
		SETBit(PORTD,(pinNo-24));
 168:	42 b3       	in	r20, 0x12	; 18
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	48 97       	sbiw	r24, 0x18	; 24
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	b9 01       	movw	r22, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <writePin+0xfc>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	8a 95       	dec	r24
 17c:	e2 f7       	brpl	.-8      	; 0x176 <writePin+0xf8>
 17e:	cb 01       	movw	r24, r22
 180:	84 2b       	or	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret
		else if(logic==LOW)
 186:	61 11       	cpse	r22, r1
 188:	0f c0       	rjmp	.+30     	; 0x1a8 <writePin+0x12a>
		CLRBit(PORTD,(pinNo-24));
 18a:	42 b3       	in	r20, 0x12	; 18
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	48 97       	sbiw	r24, 0x18	; 24
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	b9 01       	movw	r22, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <writePin+0x11e>
 198:	66 0f       	add	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <writePin+0x11a>
 1a0:	cb 01       	movw	r24, r22
 1a2:	80 95       	com	r24
 1a4:	84 23       	and	r24, r20
 1a6:	82 bb       	out	0x12, r24	; 18
 1a8:	08 95       	ret

000001aa <pinDirection>:
		else{}
	}
	else{}
}
void pinDirection(u8 pinNo, u8 direction){
	if((pinNo >= PA0) && (pinNo <= PA7)){
 1aa:	88 30       	cpi	r24, 0x08	; 8
 1ac:	f8 f4       	brcc	.+62     	; 0x1ec <pinDirection+0x42>
		if(direction == OUTPUT)
 1ae:	61 30       	cpi	r22, 0x01	; 1
 1b0:	69 f4       	brne	.+26     	; 0x1cc <pinDirection+0x22>
		SETBit(DDRA,pinNo);
 1b2:	4a b3       	in	r20, 0x1a	; 26
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	b9 01       	movw	r22, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <pinDirection+0x16>
 1bc:	66 0f       	add	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	8a 95       	dec	r24
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <pinDirection+0x12>
 1c4:	cb 01       	movw	r24, r22
 1c6:	84 2b       	or	r24, r20
 1c8:	8a bb       	out	0x1a, r24	; 26
 1ca:	08 95       	ret
		else if(direction == INPUT)
 1cc:	61 11       	cpse	r22, r1
 1ce:	82 c0       	rjmp	.+260    	; 0x2d4 <pinDirection+0x12a>
		CLRBit(DDRA,pinNo);
 1d0:	4a b3       	in	r20, 0x1a	; 26
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <pinDirection+0x34>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	8a 95       	dec	r24
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <pinDirection+0x30>
 1e2:	cb 01       	movw	r24, r22
 1e4:	80 95       	com	r24
 1e6:	84 23       	and	r24, r20
 1e8:	8a bb       	out	0x1a, r24	; 26
 1ea:	08 95       	ret
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
 1ec:	98 ef       	ldi	r25, 0xF8	; 248
 1ee:	98 0f       	add	r25, r24
 1f0:	98 30       	cpi	r25, 0x08	; 8
 1f2:	18 f5       	brcc	.+70     	; 0x23a <pinDirection+0x90>
		if(direction == OUTPUT)
 1f4:	61 30       	cpi	r22, 0x01	; 1
 1f6:	79 f4       	brne	.+30     	; 0x216 <pinDirection+0x6c>
		SETBit(DDRB,(pinNo-8));
 1f8:	47 b3       	in	r20, 0x17	; 23
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 97       	sbiw	r24, 0x08	; 8
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	b9 01       	movw	r22, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <pinDirection+0x60>
 206:	66 0f       	add	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	8a 95       	dec	r24
 20c:	e2 f7       	brpl	.-8      	; 0x206 <pinDirection+0x5c>
 20e:	cb 01       	movw	r24, r22
 210:	84 2b       	or	r24, r20
 212:	87 bb       	out	0x17, r24	; 23
 214:	08 95       	ret
		else if(direction == LOW)
 216:	61 11       	cpse	r22, r1
 218:	5d c0       	rjmp	.+186    	; 0x2d4 <pinDirection+0x12a>
		CLRBit(DDRB,(pinNo-8));
 21a:	47 b3       	in	r20, 0x17	; 23
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 97       	sbiw	r24, 0x08	; 8
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <pinDirection+0x82>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <pinDirection+0x7e>
 230:	cb 01       	movw	r24, r22
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	87 bb       	out	0x17, r24	; 23
 238:	08 95       	ret
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
 23a:	90 ef       	ldi	r25, 0xF0	; 240
 23c:	98 0f       	add	r25, r24
 23e:	98 30       	cpi	r25, 0x08	; 8
 240:	18 f5       	brcc	.+70     	; 0x288 <pinDirection+0xde>
		if(direction == OUTPUT)
 242:	61 30       	cpi	r22, 0x01	; 1
 244:	79 f4       	brne	.+30     	; 0x264 <pinDirection+0xba>
		SETBit(DDRC,(pinNo-16));
 246:	44 b3       	in	r20, 0x14	; 20
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	40 97       	sbiw	r24, 0x10	; 16
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <pinDirection+0xae>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <pinDirection+0xaa>
 25c:	cb 01       	movw	r24, r22
 25e:	84 2b       	or	r24, r20
 260:	84 bb       	out	0x14, r24	; 20
 262:	08 95       	ret
		else if(direction==INPUT)
 264:	61 11       	cpse	r22, r1
 266:	36 c0       	rjmp	.+108    	; 0x2d4 <pinDirection+0x12a>
		CLRBit(DDRC,(pinNo-16));
 268:	44 b3       	in	r20, 0x14	; 20
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	40 97       	sbiw	r24, 0x10	; 16
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	b9 01       	movw	r22, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <pinDirection+0xd0>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <pinDirection+0xcc>
 27e:	cb 01       	movw	r24, r22
 280:	80 95       	com	r24
 282:	84 23       	and	r24, r20
 284:	84 bb       	out	0x14, r24	; 20
 286:	08 95       	ret
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
 288:	98 ee       	ldi	r25, 0xE8	; 232
 28a:	98 0f       	add	r25, r24
 28c:	98 30       	cpi	r25, 0x08	; 8
 28e:	10 f5       	brcc	.+68     	; 0x2d4 <pinDirection+0x12a>
		if(direction == OUTPUT)
 290:	61 30       	cpi	r22, 0x01	; 1
 292:	79 f4       	brne	.+30     	; 0x2b2 <pinDirection+0x108>
		SETBit(DDRD,(pinNo-24));
 294:	41 b3       	in	r20, 0x11	; 17
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	48 97       	sbiw	r24, 0x18	; 24
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	b9 01       	movw	r22, r18
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <pinDirection+0xfc>
 2a2:	66 0f       	add	r22, r22
 2a4:	77 1f       	adc	r23, r23
 2a6:	8a 95       	dec	r24
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <pinDirection+0xf8>
 2aa:	cb 01       	movw	r24, r22
 2ac:	84 2b       	or	r24, r20
 2ae:	81 bb       	out	0x11, r24	; 17
 2b0:	08 95       	ret
		else if(direction == INPUT)
 2b2:	61 11       	cpse	r22, r1
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <pinDirection+0x12a>
		CLRBit(DDRD,(pinNo-24));
 2b6:	41 b3       	in	r20, 0x11	; 17
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	48 97       	sbiw	r24, 0x18	; 24
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	b9 01       	movw	r22, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <pinDirection+0x11e>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	8a 95       	dec	r24
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <pinDirection+0x11a>
 2cc:	cb 01       	movw	r24, r22
 2ce:	80 95       	com	r24
 2d0:	84 23       	and	r24, r20
 2d2:	81 bb       	out	0x11, r24	; 17
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
