
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000cd0  00000d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800064  00800064  00000d68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024f2  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be0  00000000  00000000  00003472  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d54  00000000  00000000  00004052  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072d  00000000  00000000  000050e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef0  00000000  00000000  0000580d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000066fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 66 06 	jmp	0xccc	; 0xccc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#error define includes.h file
#endif


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a8 97       	sbiw	r28, 0x28	; 40
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	u8 value,i,lati_value[20],lati_dir, longi_value[20], longi_dir, alti[5],time[20] ;
	LCD_init();
  a6:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_init>
	UART_INIT(9600);
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	95 e2       	ldi	r25, 0x25	; 37
  ae:	0e 94 e6 02 	call	0x5cc	; 0x5cc <UART_INIT>
	while(1)
	{
		if(UART_RX()=='$' && UART_RX()=='G'&&UART_RX()=='P'&&UART_RX()=='G'&&UART_RX()=='G'&&UART_RX()=='A')
  b2:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
  b6:	84 32       	cpi	r24, 0x24	; 36
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x20>
  ba:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
  be:	87 34       	cpi	r24, 0x47	; 71
  c0:	c1 f7       	brne	.-16     	; 0xb2 <main+0x20>
  c2:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
  c6:	80 35       	cpi	r24, 0x50	; 80
  c8:	a1 f7       	brne	.-24     	; 0xb2 <main+0x20>
  ca:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
  ce:	87 34       	cpi	r24, 0x47	; 71
  d0:	81 f7       	brne	.-32     	; 0xb2 <main+0x20>
  d2:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
  d6:	87 34       	cpi	r24, 0x47	; 71
  d8:	61 f7       	brne	.-40     	; 0xb2 <main+0x20>
  da:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
  de:	81 34       	cpi	r24, 0x41	; 65
  e0:	41 f7       	brne	.-48     	; 0xb2 <main+0x20>
		{
				UART_RX();
  e2:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
				//time
				time[0]=UART_RX();
  e6:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
				value=time[0];
				for(i=1;value!=',';i++)
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x5e>
				{
					time[i]=UART_RX();
  ec:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
		{
				UART_RX();
				//time
				time[0]=UART_RX();
				value=time[0];
				for(i=1;value!=',';i++)
  f0:	8c 32       	cpi	r24, 0x2C	; 44
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x5a>
					time[i]=UART_RX();
					value=time[i];
				}
				time[i-1]=' ';
				//latitude
				lati_value[0]=UART_RX();
  f4:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
  f8:	89 83       	std	Y+1, r24	; 0x01
				value=lati_value[0];
				for(i=1;value!=',';i++)
  fa:	11 e0       	ldi	r17, 0x01	; 1
  fc:	0c c0       	rjmp	.+24     	; 0x116 <main+0x84>
				{
					lati_value[i]=UART_RX();
  fe:	e1 2e       	mov	r14, r17
 100:	f1 2c       	mov	r15, r1
 102:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
 106:	e1 e0       	ldi	r30, 0x01	; 1
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	ee 0d       	add	r30, r14
 110:	ff 1d       	adc	r31, r15
 112:	80 83       	st	Z, r24
				}
				time[i-1]=' ';
				//latitude
				lati_value[0]=UART_RX();
				value=lati_value[0];
				for(i=1;value!=',';i++)
 114:	1f 5f       	subi	r17, 0xFF	; 255
 116:	8c 32       	cpi	r24, 0x2C	; 44
 118:	91 f7       	brne	.-28     	; 0xfe <main+0x6c>
				{
					lati_value[i]=UART_RX();
					value=lati_value[i];
				}
				lati_value[i-1]=' ';
 11a:	e1 2f       	mov	r30, r17
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	8c 0f       	add	r24, r28
 126:	9d 1f       	adc	r25, r29
 128:	e8 0f       	add	r30, r24
 12a:	f9 1f       	adc	r31, r25
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	80 83       	st	Z, r24
				lati_dir=UART_RX();
 130:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
 134:	08 2f       	mov	r16, r24
				value=UART_RX();//remove next comma (,)
 136:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
				//longitude
				longi_value[0]=UART_RX();
 13a:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
 13e:	8d 8b       	std	Y+21, r24	; 0x15
				value=longi_value[0];
				for(i=1;value!=',';i++)
 140:	11 e0       	ldi	r17, 0x01	; 1
 142:	0c c0       	rjmp	.+24     	; 0x15c <main+0xca>
				{
					longi_value[i]=UART_RX();
 144:	e1 2e       	mov	r14, r17
 146:	f1 2c       	mov	r15, r1
 148:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
 14c:	e5 e1       	ldi	r30, 0x15	; 21
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	ee 0d       	add	r30, r14
 156:	ff 1d       	adc	r31, r15
 158:	80 83       	st	Z, r24
				lati_dir=UART_RX();
				value=UART_RX();//remove next comma (,)
				//longitude
				longi_value[0]=UART_RX();
				value=longi_value[0];
				for(i=1;value!=',';i++)
 15a:	1f 5f       	subi	r17, 0xFF	; 255
 15c:	8c 32       	cpi	r24, 0x2C	; 44
 15e:	91 f7       	brne	.-28     	; 0x144 <main+0xb2>
				{
					longi_value[i]=UART_RX();
					value=longi_value[i];
				}
				longi_value[i-1]=' ';
 160:	e1 2f       	mov	r30, r17
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	85 e1       	ldi	r24, 0x15	; 21
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	8c 0f       	add	r24, r28
 16c:	9d 1f       	adc	r25, r29
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	80 83       	st	Z, r24
				longi_dir=UART_RX();
 176:	0e 94 0f 03 	call	0x61e	; 0x61e <UART_RX>
 17a:	18 2f       	mov	r17, r24
				
				//disp_strXY(1,1,time);
				strfToint(lati_value);
 17c:	ce 01       	movw	r24, r28
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <strfToint>
				disp_strXY(1,1,lati_value);
 184:	ae 01       	movw	r20, r28
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <disp_strXY>
 				disp_char(lati_dir);
 192:	80 2f       	mov	r24, r16
 194:	0e 94 da 01 	call	0x3b4	; 0x3b4 <disp_char>
				
				strfToint(longi_value);
 198:	ce 01       	movw	r24, r28
 19a:	45 96       	adiw	r24, 0x15	; 21
 19c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <strfToint>
				disp_strXY(2,1,longi_value);
 1a0:	ae 01       	movw	r20, r28
 1a2:	4b 5e       	subi	r20, 0xEB	; 235
 1a4:	5f 4f       	sbci	r21, 0xFF	; 255
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <disp_strXY>
 				disp_char(longi_dir);
 1ae:	81 2f       	mov	r24, r17
 1b0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <disp_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	23 ed       	ldi	r18, 0xD3	; 211
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x128>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x132>
 1c4:	00 00       	nop
 1c6:	75 cf       	rjmp	.-278    	; 0xb2 <main+0x20>

000001c8 <strfToint>:
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "LCD.h"
void strfToint(u8* strf) //{"12312.1234"} // {"1212.1234"}
{
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	8c 01       	movw	r16, r24
	u8 i=0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
	u8 dotIndex;
	u32 Num;
	while (strf[i]!='.')
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <strfToint+0x18>
		i++;
 1de:	8f 5f       	subi	r24, 0xFF	; 255
void strfToint(u8* strf) //{"12312.1234"} // {"1212.1234"}
{
	u8 i=0;
	u8 dotIndex;
	u32 Num;
	while (strf[i]!='.')
 1e0:	c8 2f       	mov	r28, r24
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	f8 01       	movw	r30, r16
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	90 81       	ld	r25, Z
 1ec:	9e 32       	cpi	r25, 0x2E	; 46
 1ee:	b9 f7       	brne	.-18     	; 0x1de <strfToint+0x16>
		i++;
	dotIndex=i;
	i=i-2;
 1f0:	82 50       	subi	r24, 0x02	; 2
	Num=atoi(&strf[i])*(10000UL);
 1f2:	98 01       	movw	r18, r16
 1f4:	28 0f       	add	r18, r24
 1f6:	31 1d       	adc	r19, r1
 1f8:	c9 01       	movw	r24, r18
 1fa:	0e 94 56 03 	call	0x6ac	; 0x6ac <atoi>
 1fe:	20 e1       	ldi	r18, 0x10	; 16
 200:	37 e2       	ldi	r19, 0x27	; 39
 202:	dc 01       	movw	r26, r24
 204:	0e 94 44 03 	call	0x688	; 0x688 <__usmulhisi3>
 208:	6b 01       	movw	r12, r22
 20a:	7c 01       	movw	r14, r24
	Num=Num+atoi(&strf[dotIndex+1]); /// 121234
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	80 0f       	add	r24, r16
 212:	91 1f       	adc	r25, r17
 214:	0e 94 56 03 	call	0x6ac	; 0x6ac <atoi>
 218:	09 2e       	mov	r0, r25
 21a:	00 0c       	add	r0, r0
 21c:	aa 0b       	sbc	r26, r26
 21e:	bb 0b       	sbc	r27, r27
 220:	a7 01       	movw	r20, r14
 222:	96 01       	movw	r18, r12
 224:	28 0f       	add	r18, r24
 226:	39 1f       	adc	r19, r25
 228:	4a 1f       	adc	r20, r26
 22a:	5b 1f       	adc	r21, r27
	Num=(Num*100)/60UL;
 22c:	a4 e6       	ldi	r26, 0x64	; 100
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	0e 94 4b 03 	call	0x696	; 0x696 <__muluhisi3>
 234:	2c e3       	ldi	r18, 0x3C	; 60
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	0e 94 13 03 	call	0x626	; 0x626 <__udivmodsi4>
	strf[dotIndex-2]='.';
 240:	fe 01       	movw	r30, r28
 242:	32 97       	sbiw	r30, 0x02	; 2
 244:	e0 0f       	add	r30, r16
 246:	f1 1f       	adc	r31, r17
 248:	8e e2       	ldi	r24, 0x2E	; 46
 24a:	80 83       	st	Z, r24
	sprintf(&strf[dotIndex-1],"%u",Num);
 24c:	21 97       	sbiw	r28, 0x01	; 1
 24e:	c0 0f       	add	r28, r16
 250:	d1 1f       	adc	r29, r17
 252:	5f 93       	push	r21
 254:	4f 93       	push	r20
 256:	3f 93       	push	r19
 258:	2f 93       	push	r18
 25a:	80 e6       	ldi	r24, 0x60	; 96
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	9f 93       	push	r25
 260:	8f 93       	push	r24
 262:	df 93       	push	r29
 264:	cf 93       	push	r28
 266:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <sprintf>
	//disp_strXY(1,1,strf);

 26a:	2d b7       	in	r18, 0x3d	; 61
 26c:	3e b7       	in	r19, 0x3e	; 62
 26e:	28 5f       	subi	r18, 0xF8	; 248
 270:	3f 4f       	sbci	r19, 0xFF	; 255
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	3e bf       	out	0x3e, r19	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	2d bf       	out	0x3d, r18	; 61
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	08 95       	ret

0000028e <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	8b e0       	ldi	r24, 0x0B	; 11
 292:	0e 94 10 02 	call	0x420	; 0x420 <writePin>
 296:	87 ec       	ldi	r24, 0xC7	; 199
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_latch+0xc>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_latch+0x12>
 2a0:	00 00       	nop
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	8b e0       	ldi	r24, 0x0B	; 11
 2a6:	0e 94 10 02 	call	0x420	; 0x420 <writePin>
 2aa:	87 ec       	ldi	r24, 0xC7	; 199
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_latch+0x20>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_latch+0x26>
 2b4:	00 00       	nop
 2b6:	08 95       	ret

000002b8 <SendToLCD>:
 2b8:	cf 93       	push	r28
 2ba:	c8 2f       	mov	r28, r24
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	60 ef       	ldi	r22, 0xF0	; 240
 2c0:	8b e3       	ldi	r24, 0x3B	; 59
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 a6 02 	call	0x54c	; 0x54c <writePins>
 2c8:	6c 2f       	mov	r22, r28
 2ca:	60 7f       	andi	r22, 0xF0	; 240
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	8b e3       	ldi	r24, 0x3B	; 59
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 a6 02 	call	0x54c	; 0x54c <writePins>
 2d6:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_latch>
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	60 ef       	ldi	r22, 0xF0	; 240
 2de:	8b e3       	ldi	r24, 0x3B	; 59
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 a6 02 	call	0x54c	; 0x54c <writePins>
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	c8 9f       	mul	r28, r24
 2ea:	b0 01       	movw	r22, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	8b e3       	ldi	r24, 0x3B	; 59
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 a6 02 	call	0x54c	; 0x54c <writePins>
 2f8:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_latch>
 2fc:	87 ec       	ldi	r24, 0xC7	; 199
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <SendToLCD+0x48>
 304:	00 c0       	rjmp	.+0      	; 0x306 <SendToLCD+0x4e>
 306:	00 00       	nop
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <LCD_send_cmd>:
 30c:	cf 93       	push	r28
 30e:	c8 2f       	mov	r28, r24
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	89 e0       	ldi	r24, 0x09	; 9
 314:	0e 94 10 02 	call	0x420	; 0x420 <writePin>
 318:	8c 2f       	mov	r24, r28
 31a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SendToLCD>
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <LCD_CLEAR>:
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_send_cmd>
 328:	8f e3       	ldi	r24, 0x3F	; 63
 32a:	9f e1       	ldi	r25, 0x1F	; 31
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_CLEAR+0xa>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_CLEAR+0x10>
 332:	00 00       	nop
 334:	08 95       	ret

00000336 <LCD_ret_Home>:
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_send_cmd>
 33c:	8f e3       	ldi	r24, 0x3F	; 63
 33e:	9f e1       	ldi	r25, 0x1F	; 31
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_ret_Home+0xa>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_ret_Home+0x10>
 346:	00 00       	nop
 348:	08 95       	ret

0000034a <LCD_init>:
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	60 ef       	ldi	r22, 0xF0	; 240
 34e:	8a e3       	ldi	r24, 0x3A	; 58
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 b5 02 	call	0x56a	; 0x56a <pinsDirection>
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	6e e0       	ldi	r22, 0x0E	; 14
 35a:	87 e3       	ldi	r24, 0x37	; 55
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 b5 02 	call	0x56a	; 0x56a <pinsDirection>
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	8a e0       	ldi	r24, 0x0A	; 10
 366:	0e 94 10 02 	call	0x420	; 0x420 <writePin>
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	83 ef       	ldi	r24, 0xF3	; 243
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <LCD_init+0x26>
 378:	00 c0       	rjmp	.+0      	; 0x37a <LCD_init+0x30>
 37a:	00 00       	nop
 37c:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_ret_Home>
 380:	86 e0       	ldi	r24, 0x06	; 6
 382:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_send_cmd>
 386:	8f e0       	ldi	r24, 0x0F	; 15
 388:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_send_cmd>
 38c:	80 e1       	ldi	r24, 0x10	; 16
 38e:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_send_cmd>
 392:	88 e2       	ldi	r24, 0x28	; 40
 394:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_send_cmd>
 398:	0e 94 91 01 	call	0x322	; 0x322 <LCD_CLEAR>
 39c:	08 95       	ret

0000039e <LCD_send_data>:
 39e:	cf 93       	push	r28
 3a0:	c8 2f       	mov	r28, r24
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	89 e0       	ldi	r24, 0x09	; 9
 3a6:	0e 94 10 02 	call	0x420	; 0x420 <writePin>
 3aa:	8c 2f       	mov	r24, r28
 3ac:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SendToLCD>
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <disp_char>:
 3b4:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_send_data>
 3b8:	08 95       	ret

000003ba <disp_str>:
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	8c 01       	movw	r16, r24
 3c2:	c0 e0       	ldi	r28, 0x00	; 0
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <disp_str+0x12>
 3c6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <disp_char>
 3ca:	cf 5f       	subi	r28, 0xFF	; 255
 3cc:	f8 01       	movw	r30, r16
 3ce:	ec 0f       	add	r30, r28
 3d0:	f1 1d       	adc	r31, r1
 3d2:	80 81       	ld	r24, Z
 3d4:	81 11       	cpse	r24, r1
 3d6:	f7 cf       	rjmp	.-18     	; 0x3c6 <disp_str+0xc>
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	08 95       	ret

000003e0 <LCD_GOTXY>:
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	29 f4       	brne	.+10     	; 0x3ee <LCD_GOTXY+0xe>
 3e4:	8f e7       	ldi	r24, 0x7F	; 127
 3e6:	86 0f       	add	r24, r22
 3e8:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_send_cmd>
 3ec:	08 95       	ret
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	21 f4       	brne	.+8      	; 0x3fa <LCD_GOTXY+0x1a>
 3f2:	8f eb       	ldi	r24, 0xBF	; 191
 3f4:	86 0f       	add	r24, r22
 3f6:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_send_cmd>
 3fa:	08 95       	ret

000003fc <disp_strXY>:
	else{}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
 402:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_GOTXY>
	disp_str(str);
 406:	ce 01       	movw	r24, r28
 408:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disp_str>
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <GLOBAL_INT_EN>:
	}
}

void GLOBAL_INT_EN(void)
{
	writePins( &SREG,0x80,HIGH );
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	60 e8       	ldi	r22, 0x80	; 128
 416:	8f e5       	ldi	r24, 0x5F	; 95
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 a6 02 	call	0x54c	; 0x54c <writePins>
 41e:	08 95       	ret

00000420 <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 420:	88 30       	cpi	r24, 0x08	; 8
 422:	f8 f4       	brcc	.+62     	; 0x462 <writePin+0x42>
 424:	61 30       	cpi	r22, 0x01	; 1
 426:	69 f4       	brne	.+26     	; 0x442 <writePin+0x22>
 428:	4b b3       	in	r20, 0x1b	; 27
 42a:	21 e0       	ldi	r18, 0x01	; 1
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	b9 01       	movw	r22, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <writePin+0x16>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	8a 95       	dec	r24
 438:	e2 f7       	brpl	.-8      	; 0x432 <writePin+0x12>
 43a:	cb 01       	movw	r24, r22
 43c:	84 2b       	or	r24, r20
 43e:	8b bb       	out	0x1b, r24	; 27
 440:	08 95       	ret
 442:	61 11       	cpse	r22, r1
 444:	82 c0       	rjmp	.+260    	; 0x54a <writePin+0x12a>
 446:	4b b3       	in	r20, 0x1b	; 27
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	b9 01       	movw	r22, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <writePin+0x34>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	8a 95       	dec	r24
 456:	e2 f7       	brpl	.-8      	; 0x450 <writePin+0x30>
 458:	cb 01       	movw	r24, r22
 45a:	80 95       	com	r24
 45c:	84 23       	and	r24, r20
 45e:	8b bb       	out	0x1b, r24	; 27
 460:	08 95       	ret
 462:	98 ef       	ldi	r25, 0xF8	; 248
 464:	98 0f       	add	r25, r24
 466:	98 30       	cpi	r25, 0x08	; 8
 468:	18 f5       	brcc	.+70     	; 0x4b0 <writePin+0x90>
 46a:	61 30       	cpi	r22, 0x01	; 1
 46c:	79 f4       	brne	.+30     	; 0x48c <writePin+0x6c>
 46e:	48 b3       	in	r20, 0x18	; 24
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	08 97       	sbiw	r24, 0x08	; 8
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	b9 01       	movw	r22, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <writePin+0x60>
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	8a 95       	dec	r24
 482:	e2 f7       	brpl	.-8      	; 0x47c <writePin+0x5c>
 484:	cb 01       	movw	r24, r22
 486:	84 2b       	or	r24, r20
 488:	88 bb       	out	0x18, r24	; 24
 48a:	08 95       	ret
 48c:	61 11       	cpse	r22, r1
 48e:	5d c0       	rjmp	.+186    	; 0x54a <writePin+0x12a>
 490:	48 b3       	in	r20, 0x18	; 24
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	08 97       	sbiw	r24, 0x08	; 8
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	b9 01       	movw	r22, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <writePin+0x82>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	8a 95       	dec	r24
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <writePin+0x7e>
 4a6:	cb 01       	movw	r24, r22
 4a8:	80 95       	com	r24
 4aa:	84 23       	and	r24, r20
 4ac:	88 bb       	out	0x18, r24	; 24
 4ae:	08 95       	ret
 4b0:	90 ef       	ldi	r25, 0xF0	; 240
 4b2:	98 0f       	add	r25, r24
 4b4:	98 30       	cpi	r25, 0x08	; 8
 4b6:	18 f5       	brcc	.+70     	; 0x4fe <writePin+0xde>
 4b8:	61 30       	cpi	r22, 0x01	; 1
 4ba:	79 f4       	brne	.+30     	; 0x4da <writePin+0xba>
 4bc:	45 b3       	in	r20, 0x15	; 21
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	40 97       	sbiw	r24, 0x10	; 16
 4c2:	21 e0       	ldi	r18, 0x01	; 1
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	b9 01       	movw	r22, r18
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <writePin+0xae>
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	8a 95       	dec	r24
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <writePin+0xaa>
 4d2:	cb 01       	movw	r24, r22
 4d4:	84 2b       	or	r24, r20
 4d6:	85 bb       	out	0x15, r24	; 21
 4d8:	08 95       	ret
 4da:	61 11       	cpse	r22, r1
 4dc:	36 c0       	rjmp	.+108    	; 0x54a <writePin+0x12a>
 4de:	45 b3       	in	r20, 0x15	; 21
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	40 97       	sbiw	r24, 0x10	; 16
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	b9 01       	movw	r22, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <writePin+0xd0>
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <writePin+0xcc>
 4f4:	cb 01       	movw	r24, r22
 4f6:	80 95       	com	r24
 4f8:	84 23       	and	r24, r20
 4fa:	85 bb       	out	0x15, r24	; 21
 4fc:	08 95       	ret
 4fe:	98 ee       	ldi	r25, 0xE8	; 232
 500:	98 0f       	add	r25, r24
 502:	98 30       	cpi	r25, 0x08	; 8
 504:	10 f5       	brcc	.+68     	; 0x54a <writePin+0x12a>
 506:	61 30       	cpi	r22, 0x01	; 1
 508:	79 f4       	brne	.+30     	; 0x528 <writePin+0x108>
 50a:	42 b3       	in	r20, 0x12	; 18
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	48 97       	sbiw	r24, 0x18	; 24
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	b9 01       	movw	r22, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <writePin+0xfc>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <writePin+0xf8>
 520:	cb 01       	movw	r24, r22
 522:	84 2b       	or	r24, r20
 524:	82 bb       	out	0x12, r24	; 18
 526:	08 95       	ret
 528:	61 11       	cpse	r22, r1
 52a:	0f c0       	rjmp	.+30     	; 0x54a <writePin+0x12a>
 52c:	42 b3       	in	r20, 0x12	; 18
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	48 97       	sbiw	r24, 0x18	; 24
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <writePin+0x11e>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	8a 95       	dec	r24
 540:	e2 f7       	brpl	.-8      	; 0x53a <writePin+0x11a>
 542:	cb 01       	movw	r24, r22
 544:	80 95       	com	r24
 546:	84 23       	and	r24, r20
 548:	82 bb       	out	0x12, r24	; 18
 54a:	08 95       	ret

0000054c <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 54c:	41 30       	cpi	r20, 0x01	; 1
 54e:	29 f4       	brne	.+10     	; 0x55a <writePins+0xe>
		SETBits(*port,mask);
 550:	fc 01       	movw	r30, r24
 552:	20 81       	ld	r18, Z
 554:	62 2b       	or	r22, r18
 556:	60 83       	st	Z, r22
 558:	08 95       	ret
	else if(logic==LOW)
 55a:	41 11       	cpse	r20, r1
 55c:	05 c0       	rjmp	.+10     	; 0x568 <writePins+0x1c>
		CLRBits(*port,mask);
 55e:	fc 01       	movw	r30, r24
 560:	20 81       	ld	r18, Z
 562:	60 95       	com	r22
 564:	62 23       	and	r22, r18
 566:	60 83       	st	Z, r22
 568:	08 95       	ret

0000056a <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 56a:	41 30       	cpi	r20, 0x01	; 1
 56c:	29 f4       	brne	.+10     	; 0x578 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 56e:	fc 01       	movw	r30, r24
 570:	20 81       	ld	r18, Z
 572:	62 2b       	or	r22, r18
 574:	60 83       	st	Z, r22
 576:	08 95       	ret
	else if(direction == INPUT)
 578:	41 11       	cpse	r20, r1
 57a:	05 c0       	rjmp	.+10     	; 0x586 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 57c:	fc 01       	movw	r30, r24
 57e:	20 81       	ld	r18, Z
 580:	60 95       	com	r22
 582:	62 23       	and	r22, r18
 584:	60 83       	st	Z, r22
 586:	08 95       	ret

00000588 <__vector_13>:
void UART_TX(u8 data)
{
	UDR=data;
	while(GETBit(UCSRA,UDRE)!=1);	
		
}
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
 596:	ef 93       	push	r30
 598:	ff 93       	push	r31
 59a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 59e:	e8 2f       	mov	r30, r24
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	9c b1       	in	r25, 0x0c	; 12
 5a4:	eb 59       	subi	r30, 0x9B	; 155
 5a6:	ff 4f       	sbci	r31, 0xFF	; 255
 5a8:	90 83       	st	Z, r25
 5aa:	8f 5f       	subi	r24, 0xFF	; 255
 5ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 5b0:	85 30       	cpi	r24, 0x05	; 5
 5b2:	19 f4       	brne	.+6      	; 0x5ba <__vector_13+0x32>
 5b4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <gps+0x6>
 5b8:	f8 94       	cli
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <UART_INIT>:
 5cc:	a0 e0       	ldi	r26, 0x00	; 0
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	aa 1f       	adc	r26, r26
 5d6:	bb 1f       	adc	r27, r27
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	aa 1f       	adc	r26, r26
 5de:	bb 1f       	adc	r27, r27
 5e0:	9c 01       	movw	r18, r24
 5e2:	ad 01       	movw	r20, r26
 5e4:	22 0f       	add	r18, r18
 5e6:	33 1f       	adc	r19, r19
 5e8:	44 1f       	adc	r20, r20
 5ea:	55 1f       	adc	r21, r21
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	44 1f       	adc	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	74 e2       	ldi	r23, 0x24	; 36
 5f8:	84 ef       	ldi	r24, 0xF4	; 244
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 13 03 	call	0x626	; 0x626 <__udivmodsi4>
 600:	21 50       	subi	r18, 0x01	; 1
 602:	31 09       	sbc	r19, r1
 604:	30 bd       	out	0x20, r19	; 32
 606:	29 b9       	out	0x09, r18	; 9
 608:	8a b1       	in	r24, 0x0a	; 10
 60a:	88 60       	ori	r24, 0x08	; 8
 60c:	8a b9       	out	0x0a, r24	; 10
 60e:	8a b1       	in	r24, 0x0a	; 10
 610:	80 61       	ori	r24, 0x10	; 16
 612:	8a b9       	out	0x0a, r24	; 10
 614:	86 e8       	ldi	r24, 0x86	; 134
 616:	80 bd       	out	0x20, r24	; 32
 618:	0e 94 09 02 	call	0x412	; 0x412 <GLOBAL_INT_EN>
 61c:	08 95       	ret

0000061e <UART_RX>:

u8 UART_RX(void)
{
	while(!GETBit(UCSRA,RXC));
 61e:	5f 9b       	sbis	0x0b, 7	; 11
 620:	fe cf       	rjmp	.-4      	; 0x61e <UART_RX>
	return UDR;	
 622:	8c b1       	in	r24, 0x0c	; 12
 624:	08 95       	ret

00000626 <__udivmodsi4>:
 626:	a1 e2       	ldi	r26, 0x21	; 33
 628:	1a 2e       	mov	r1, r26
 62a:	aa 1b       	sub	r26, r26
 62c:	bb 1b       	sub	r27, r27
 62e:	fd 01       	movw	r30, r26
 630:	0d c0       	rjmp	.+26     	; 0x64c <__udivmodsi4_ep>

00000632 <__udivmodsi4_loop>:
 632:	aa 1f       	adc	r26, r26
 634:	bb 1f       	adc	r27, r27
 636:	ee 1f       	adc	r30, r30
 638:	ff 1f       	adc	r31, r31
 63a:	a2 17       	cp	r26, r18
 63c:	b3 07       	cpc	r27, r19
 63e:	e4 07       	cpc	r30, r20
 640:	f5 07       	cpc	r31, r21
 642:	20 f0       	brcs	.+8      	; 0x64c <__udivmodsi4_ep>
 644:	a2 1b       	sub	r26, r18
 646:	b3 0b       	sbc	r27, r19
 648:	e4 0b       	sbc	r30, r20
 64a:	f5 0b       	sbc	r31, r21

0000064c <__udivmodsi4_ep>:
 64c:	66 1f       	adc	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	88 1f       	adc	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	1a 94       	dec	r1
 656:	69 f7       	brne	.-38     	; 0x632 <__udivmodsi4_loop>
 658:	60 95       	com	r22
 65a:	70 95       	com	r23
 65c:	80 95       	com	r24
 65e:	90 95       	com	r25
 660:	9b 01       	movw	r18, r22
 662:	ac 01       	movw	r20, r24
 664:	bd 01       	movw	r22, r26
 666:	cf 01       	movw	r24, r30
 668:	08 95       	ret

0000066a <__umulhisi3>:
 66a:	a2 9f       	mul	r26, r18
 66c:	b0 01       	movw	r22, r0
 66e:	b3 9f       	mul	r27, r19
 670:	c0 01       	movw	r24, r0
 672:	a3 9f       	mul	r26, r19
 674:	70 0d       	add	r23, r0
 676:	81 1d       	adc	r24, r1
 678:	11 24       	eor	r1, r1
 67a:	91 1d       	adc	r25, r1
 67c:	b2 9f       	mul	r27, r18
 67e:	70 0d       	add	r23, r0
 680:	81 1d       	adc	r24, r1
 682:	11 24       	eor	r1, r1
 684:	91 1d       	adc	r25, r1
 686:	08 95       	ret

00000688 <__usmulhisi3>:
 688:	0e 94 35 03 	call	0x66a	; 0x66a <__umulhisi3>

0000068c <__usmulhisi3_tail>:
 68c:	b7 ff       	sbrs	r27, 7
 68e:	08 95       	ret
 690:	82 1b       	sub	r24, r18
 692:	93 0b       	sbc	r25, r19
 694:	08 95       	ret

00000696 <__muluhisi3>:
 696:	0e 94 35 03 	call	0x66a	; 0x66a <__umulhisi3>
 69a:	a5 9f       	mul	r26, r21
 69c:	90 0d       	add	r25, r0
 69e:	b4 9f       	mul	r27, r20
 6a0:	90 0d       	add	r25, r0
 6a2:	a4 9f       	mul	r26, r20
 6a4:	80 0d       	add	r24, r0
 6a6:	91 1d       	adc	r25, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	08 95       	ret

000006ac <atoi>:
 6ac:	fc 01       	movw	r30, r24
 6ae:	88 27       	eor	r24, r24
 6b0:	99 27       	eor	r25, r25
 6b2:	e8 94       	clt
 6b4:	21 91       	ld	r18, Z+
 6b6:	20 32       	cpi	r18, 0x20	; 32
 6b8:	e9 f3       	breq	.-6      	; 0x6b4 <atoi+0x8>
 6ba:	29 30       	cpi	r18, 0x09	; 9
 6bc:	10 f0       	brcs	.+4      	; 0x6c2 <atoi+0x16>
 6be:	2e 30       	cpi	r18, 0x0E	; 14
 6c0:	c8 f3       	brcs	.-14     	; 0x6b4 <atoi+0x8>
 6c2:	2b 32       	cpi	r18, 0x2B	; 43
 6c4:	41 f0       	breq	.+16     	; 0x6d6 <atoi+0x2a>
 6c6:	2d 32       	cpi	r18, 0x2D	; 45
 6c8:	39 f4       	brne	.+14     	; 0x6d8 <atoi+0x2c>
 6ca:	68 94       	set
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <atoi+0x2a>
 6ce:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__mulhi_const_10>
 6d2:	82 0f       	add	r24, r18
 6d4:	91 1d       	adc	r25, r1
 6d6:	21 91       	ld	r18, Z+
 6d8:	20 53       	subi	r18, 0x30	; 48
 6da:	2a 30       	cpi	r18, 0x0A	; 10
 6dc:	c0 f3       	brcs	.-16     	; 0x6ce <atoi+0x22>
 6de:	1e f4       	brtc	.+6      	; 0x6e6 <atoi+0x3a>
 6e0:	90 95       	com	r25
 6e2:	81 95       	neg	r24
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	08 95       	ret

000006e8 <__mulhi_const_10>:
 6e8:	7a e0       	ldi	r23, 0x0A	; 10
 6ea:	97 9f       	mul	r25, r23
 6ec:	90 2d       	mov	r25, r0
 6ee:	87 9f       	mul	r24, r23
 6f0:	80 2d       	mov	r24, r0
 6f2:	91 0d       	add	r25, r1
 6f4:	11 24       	eor	r1, r1
 6f6:	08 95       	ret

000006f8 <sprintf>:
 6f8:	ae e0       	ldi	r26, 0x0E	; 14
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	e2 e8       	ldi	r30, 0x82	; 130
 6fe:	f3 e0       	ldi	r31, 0x03	; 3
 700:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__prologue_saves__+0x1c>
 704:	0d 89       	ldd	r16, Y+21	; 0x15
 706:	1e 89       	ldd	r17, Y+22	; 0x16
 708:	86 e0       	ldi	r24, 0x06	; 6
 70a:	8c 83       	std	Y+4, r24	; 0x04
 70c:	1a 83       	std	Y+2, r17	; 0x02
 70e:	09 83       	std	Y+1, r16	; 0x01
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	9f e7       	ldi	r25, 0x7F	; 127
 714:	9e 83       	std	Y+6, r25	; 0x06
 716:	8d 83       	std	Y+5, r24	; 0x05
 718:	ae 01       	movw	r20, r28
 71a:	47 5e       	subi	r20, 0xE7	; 231
 71c:	5f 4f       	sbci	r21, 0xFF	; 255
 71e:	6f 89       	ldd	r22, Y+23	; 0x17
 720:	78 8d       	ldd	r23, Y+24	; 0x18
 722:	ce 01       	movw	r24, r28
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	0e 94 9e 03 	call	0x73c	; 0x73c <vfprintf>
 72a:	ef 81       	ldd	r30, Y+7	; 0x07
 72c:	f8 85       	ldd	r31, Y+8	; 0x08
 72e:	e0 0f       	add	r30, r16
 730:	f1 1f       	adc	r31, r17
 732:	10 82       	st	Z, r1
 734:	2e 96       	adiw	r28, 0x0e	; 14
 736:	e4 e0       	ldi	r30, 0x04	; 4
 738:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__epilogue_restores__+0x1c>

0000073c <vfprintf>:
 73c:	ab e0       	ldi	r26, 0x0B	; 11
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	e4 ea       	ldi	r30, 0xA4	; 164
 742:	f3 e0       	ldi	r31, 0x03	; 3
 744:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__prologue_saves__>
 748:	6c 01       	movw	r12, r24
 74a:	7b 01       	movw	r14, r22
 74c:	8a 01       	movw	r16, r20
 74e:	fc 01       	movw	r30, r24
 750:	17 82       	std	Z+7, r1	; 0x07
 752:	16 82       	std	Z+6, r1	; 0x06
 754:	83 81       	ldd	r24, Z+3	; 0x03
 756:	81 ff       	sbrs	r24, 1
 758:	cc c1       	rjmp	.+920    	; 0xaf2 <__stack+0x293>
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	3c 01       	movw	r6, r24
 760:	f6 01       	movw	r30, r12
 762:	93 81       	ldd	r25, Z+3	; 0x03
 764:	f7 01       	movw	r30, r14
 766:	93 fd       	sbrc	r25, 3
 768:	85 91       	lpm	r24, Z+
 76a:	93 ff       	sbrs	r25, 3
 76c:	81 91       	ld	r24, Z+
 76e:	7f 01       	movw	r14, r30
 770:	88 23       	and	r24, r24
 772:	09 f4       	brne	.+2      	; 0x776 <vfprintf+0x3a>
 774:	ba c1       	rjmp	.+884    	; 0xaea <__stack+0x28b>
 776:	85 32       	cpi	r24, 0x25	; 37
 778:	39 f4       	brne	.+14     	; 0x788 <vfprintf+0x4c>
 77a:	93 fd       	sbrc	r25, 3
 77c:	85 91       	lpm	r24, Z+
 77e:	93 ff       	sbrs	r25, 3
 780:	81 91       	ld	r24, Z+
 782:	7f 01       	movw	r14, r30
 784:	85 32       	cpi	r24, 0x25	; 37
 786:	29 f4       	brne	.+10     	; 0x792 <vfprintf+0x56>
 788:	b6 01       	movw	r22, r12
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 95 05 	call	0xb2a	; 0xb2a <fputc>
 790:	e7 cf       	rjmp	.-50     	; 0x760 <vfprintf+0x24>
 792:	91 2c       	mov	r9, r1
 794:	21 2c       	mov	r2, r1
 796:	31 2c       	mov	r3, r1
 798:	ff e1       	ldi	r31, 0x1F	; 31
 79a:	f3 15       	cp	r31, r3
 79c:	d8 f0       	brcs	.+54     	; 0x7d4 <vfprintf+0x98>
 79e:	8b 32       	cpi	r24, 0x2B	; 43
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <vfprintf+0x84>
 7a2:	38 f4       	brcc	.+14     	; 0x7b2 <vfprintf+0x76>
 7a4:	80 32       	cpi	r24, 0x20	; 32
 7a6:	79 f0       	breq	.+30     	; 0x7c6 <vfprintf+0x8a>
 7a8:	83 32       	cpi	r24, 0x23	; 35
 7aa:	a1 f4       	brne	.+40     	; 0x7d4 <vfprintf+0x98>
 7ac:	23 2d       	mov	r18, r3
 7ae:	20 61       	ori	r18, 0x10	; 16
 7b0:	1d c0       	rjmp	.+58     	; 0x7ec <vfprintf+0xb0>
 7b2:	8d 32       	cpi	r24, 0x2D	; 45
 7b4:	61 f0       	breq	.+24     	; 0x7ce <vfprintf+0x92>
 7b6:	80 33       	cpi	r24, 0x30	; 48
 7b8:	69 f4       	brne	.+26     	; 0x7d4 <vfprintf+0x98>
 7ba:	23 2d       	mov	r18, r3
 7bc:	21 60       	ori	r18, 0x01	; 1
 7be:	16 c0       	rjmp	.+44     	; 0x7ec <vfprintf+0xb0>
 7c0:	83 2d       	mov	r24, r3
 7c2:	82 60       	ori	r24, 0x02	; 2
 7c4:	38 2e       	mov	r3, r24
 7c6:	e3 2d       	mov	r30, r3
 7c8:	e4 60       	ori	r30, 0x04	; 4
 7ca:	3e 2e       	mov	r3, r30
 7cc:	2a c0       	rjmp	.+84     	; 0x822 <vfprintf+0xe6>
 7ce:	f3 2d       	mov	r31, r3
 7d0:	f8 60       	ori	r31, 0x08	; 8
 7d2:	1d c0       	rjmp	.+58     	; 0x80e <vfprintf+0xd2>
 7d4:	37 fc       	sbrc	r3, 7
 7d6:	2d c0       	rjmp	.+90     	; 0x832 <vfprintf+0xf6>
 7d8:	20 ed       	ldi	r18, 0xD0	; 208
 7da:	28 0f       	add	r18, r24
 7dc:	2a 30       	cpi	r18, 0x0A	; 10
 7de:	40 f0       	brcs	.+16     	; 0x7f0 <vfprintf+0xb4>
 7e0:	8e 32       	cpi	r24, 0x2E	; 46
 7e2:	b9 f4       	brne	.+46     	; 0x812 <vfprintf+0xd6>
 7e4:	36 fc       	sbrc	r3, 6
 7e6:	81 c1       	rjmp	.+770    	; 0xaea <__stack+0x28b>
 7e8:	23 2d       	mov	r18, r3
 7ea:	20 64       	ori	r18, 0x40	; 64
 7ec:	32 2e       	mov	r3, r18
 7ee:	19 c0       	rjmp	.+50     	; 0x822 <vfprintf+0xe6>
 7f0:	36 fe       	sbrs	r3, 6
 7f2:	06 c0       	rjmp	.+12     	; 0x800 <vfprintf+0xc4>
 7f4:	8a e0       	ldi	r24, 0x0A	; 10
 7f6:	98 9e       	mul	r9, r24
 7f8:	20 0d       	add	r18, r0
 7fa:	11 24       	eor	r1, r1
 7fc:	92 2e       	mov	r9, r18
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <vfprintf+0xe6>
 800:	ea e0       	ldi	r30, 0x0A	; 10
 802:	2e 9e       	mul	r2, r30
 804:	20 0d       	add	r18, r0
 806:	11 24       	eor	r1, r1
 808:	22 2e       	mov	r2, r18
 80a:	f3 2d       	mov	r31, r3
 80c:	f0 62       	ori	r31, 0x20	; 32
 80e:	3f 2e       	mov	r3, r31
 810:	08 c0       	rjmp	.+16     	; 0x822 <vfprintf+0xe6>
 812:	8c 36       	cpi	r24, 0x6C	; 108
 814:	21 f4       	brne	.+8      	; 0x81e <vfprintf+0xe2>
 816:	83 2d       	mov	r24, r3
 818:	80 68       	ori	r24, 0x80	; 128
 81a:	38 2e       	mov	r3, r24
 81c:	02 c0       	rjmp	.+4      	; 0x822 <vfprintf+0xe6>
 81e:	88 36       	cpi	r24, 0x68	; 104
 820:	41 f4       	brne	.+16     	; 0x832 <vfprintf+0xf6>
 822:	f7 01       	movw	r30, r14
 824:	93 fd       	sbrc	r25, 3
 826:	85 91       	lpm	r24, Z+
 828:	93 ff       	sbrs	r25, 3
 82a:	81 91       	ld	r24, Z+
 82c:	7f 01       	movw	r14, r30
 82e:	81 11       	cpse	r24, r1
 830:	b3 cf       	rjmp	.-154    	; 0x798 <vfprintf+0x5c>
 832:	98 2f       	mov	r25, r24
 834:	9f 7d       	andi	r25, 0xDF	; 223
 836:	95 54       	subi	r25, 0x45	; 69
 838:	93 30       	cpi	r25, 0x03	; 3
 83a:	28 f4       	brcc	.+10     	; 0x846 <vfprintf+0x10a>
 83c:	0c 5f       	subi	r16, 0xFC	; 252
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	9f e3       	ldi	r25, 0x3F	; 63
 842:	99 83       	std	Y+1, r25	; 0x01
 844:	0d c0       	rjmp	.+26     	; 0x860 <__stack+0x1>
 846:	83 36       	cpi	r24, 0x63	; 99
 848:	31 f0       	breq	.+12     	; 0x856 <vfprintf+0x11a>
 84a:	83 37       	cpi	r24, 0x73	; 115
 84c:	71 f0       	breq	.+28     	; 0x86a <__stack+0xb>
 84e:	83 35       	cpi	r24, 0x53	; 83
 850:	09 f0       	breq	.+2      	; 0x854 <vfprintf+0x118>
 852:	59 c0       	rjmp	.+178    	; 0x906 <__stack+0xa7>
 854:	21 c0       	rjmp	.+66     	; 0x898 <__stack+0x39>
 856:	f8 01       	movw	r30, r16
 858:	80 81       	ld	r24, Z
 85a:	89 83       	std	Y+1, r24	; 0x01
 85c:	0e 5f       	subi	r16, 0xFE	; 254
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
 860:	88 24       	eor	r8, r8
 862:	83 94       	inc	r8
 864:	91 2c       	mov	r9, r1
 866:	53 01       	movw	r10, r6
 868:	13 c0       	rjmp	.+38     	; 0x890 <__stack+0x31>
 86a:	28 01       	movw	r4, r16
 86c:	f2 e0       	ldi	r31, 0x02	; 2
 86e:	4f 0e       	add	r4, r31
 870:	51 1c       	adc	r5, r1
 872:	f8 01       	movw	r30, r16
 874:	a0 80       	ld	r10, Z
 876:	b1 80       	ldd	r11, Z+1	; 0x01
 878:	36 fe       	sbrs	r3, 6
 87a:	03 c0       	rjmp	.+6      	; 0x882 <__stack+0x23>
 87c:	69 2d       	mov	r22, r9
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	6f ef       	ldi	r22, 0xFF	; 255
 884:	7f ef       	ldi	r23, 0xFF	; 255
 886:	c5 01       	movw	r24, r10
 888:	0e 94 8a 05 	call	0xb14	; 0xb14 <strnlen>
 88c:	4c 01       	movw	r8, r24
 88e:	82 01       	movw	r16, r4
 890:	f3 2d       	mov	r31, r3
 892:	ff 77       	andi	r31, 0x7F	; 127
 894:	3f 2e       	mov	r3, r31
 896:	16 c0       	rjmp	.+44     	; 0x8c4 <__stack+0x65>
 898:	28 01       	movw	r4, r16
 89a:	22 e0       	ldi	r18, 0x02	; 2
 89c:	42 0e       	add	r4, r18
 89e:	51 1c       	adc	r5, r1
 8a0:	f8 01       	movw	r30, r16
 8a2:	a0 80       	ld	r10, Z
 8a4:	b1 80       	ldd	r11, Z+1	; 0x01
 8a6:	36 fe       	sbrs	r3, 6
 8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <__stack+0x51>
 8aa:	69 2d       	mov	r22, r9
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
 8b0:	6f ef       	ldi	r22, 0xFF	; 255
 8b2:	7f ef       	ldi	r23, 0xFF	; 255
 8b4:	c5 01       	movw	r24, r10
 8b6:	0e 94 7f 05 	call	0xafe	; 0xafe <strnlen_P>
 8ba:	4c 01       	movw	r8, r24
 8bc:	f3 2d       	mov	r31, r3
 8be:	f0 68       	ori	r31, 0x80	; 128
 8c0:	3f 2e       	mov	r3, r31
 8c2:	82 01       	movw	r16, r4
 8c4:	33 fc       	sbrc	r3, 3
 8c6:	1b c0       	rjmp	.+54     	; 0x8fe <__stack+0x9f>
 8c8:	82 2d       	mov	r24, r2
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	88 16       	cp	r8, r24
 8ce:	99 06       	cpc	r9, r25
 8d0:	b0 f4       	brcc	.+44     	; 0x8fe <__stack+0x9f>
 8d2:	b6 01       	movw	r22, r12
 8d4:	80 e2       	ldi	r24, 0x20	; 32
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 95 05 	call	0xb2a	; 0xb2a <fputc>
 8dc:	2a 94       	dec	r2
 8de:	f4 cf       	rjmp	.-24     	; 0x8c8 <__stack+0x69>
 8e0:	f5 01       	movw	r30, r10
 8e2:	37 fc       	sbrc	r3, 7
 8e4:	85 91       	lpm	r24, Z+
 8e6:	37 fe       	sbrs	r3, 7
 8e8:	81 91       	ld	r24, Z+
 8ea:	5f 01       	movw	r10, r30
 8ec:	b6 01       	movw	r22, r12
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 95 05 	call	0xb2a	; 0xb2a <fputc>
 8f4:	21 10       	cpse	r2, r1
 8f6:	2a 94       	dec	r2
 8f8:	21 e0       	ldi	r18, 0x01	; 1
 8fa:	82 1a       	sub	r8, r18
 8fc:	91 08       	sbc	r9, r1
 8fe:	81 14       	cp	r8, r1
 900:	91 04       	cpc	r9, r1
 902:	71 f7       	brne	.-36     	; 0x8e0 <__stack+0x81>
 904:	e8 c0       	rjmp	.+464    	; 0xad6 <__stack+0x277>
 906:	84 36       	cpi	r24, 0x64	; 100
 908:	11 f0       	breq	.+4      	; 0x90e <__stack+0xaf>
 90a:	89 36       	cpi	r24, 0x69	; 105
 90c:	41 f5       	brne	.+80     	; 0x95e <__stack+0xff>
 90e:	f8 01       	movw	r30, r16
 910:	37 fe       	sbrs	r3, 7
 912:	07 c0       	rjmp	.+14     	; 0x922 <__stack+0xc3>
 914:	60 81       	ld	r22, Z
 916:	71 81       	ldd	r23, Z+1	; 0x01
 918:	82 81       	ldd	r24, Z+2	; 0x02
 91a:	93 81       	ldd	r25, Z+3	; 0x03
 91c:	0c 5f       	subi	r16, 0xFC	; 252
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
 920:	08 c0       	rjmp	.+16     	; 0x932 <__stack+0xd3>
 922:	60 81       	ld	r22, Z
 924:	71 81       	ldd	r23, Z+1	; 0x01
 926:	07 2e       	mov	r0, r23
 928:	00 0c       	add	r0, r0
 92a:	88 0b       	sbc	r24, r24
 92c:	99 0b       	sbc	r25, r25
 92e:	0e 5f       	subi	r16, 0xFE	; 254
 930:	1f 4f       	sbci	r17, 0xFF	; 255
 932:	f3 2d       	mov	r31, r3
 934:	ff 76       	andi	r31, 0x6F	; 111
 936:	3f 2e       	mov	r3, r31
 938:	97 ff       	sbrs	r25, 7
 93a:	09 c0       	rjmp	.+18     	; 0x94e <__stack+0xef>
 93c:	90 95       	com	r25
 93e:	80 95       	com	r24
 940:	70 95       	com	r23
 942:	61 95       	neg	r22
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8f 4f       	sbci	r24, 0xFF	; 255
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	f0 68       	ori	r31, 0x80	; 128
 94c:	3f 2e       	mov	r3, r31
 94e:	2a e0       	ldi	r18, 0x0A	; 10
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	a3 01       	movw	r20, r6
 954:	0e 94 d1 05 	call	0xba2	; 0xba2 <__ultoa_invert>
 958:	88 2e       	mov	r8, r24
 95a:	86 18       	sub	r8, r6
 95c:	45 c0       	rjmp	.+138    	; 0x9e8 <__stack+0x189>
 95e:	85 37       	cpi	r24, 0x75	; 117
 960:	31 f4       	brne	.+12     	; 0x96e <__stack+0x10f>
 962:	23 2d       	mov	r18, r3
 964:	2f 7e       	andi	r18, 0xEF	; 239
 966:	b2 2e       	mov	r11, r18
 968:	2a e0       	ldi	r18, 0x0A	; 10
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	25 c0       	rjmp	.+74     	; 0x9b8 <__stack+0x159>
 96e:	93 2d       	mov	r25, r3
 970:	99 7f       	andi	r25, 0xF9	; 249
 972:	b9 2e       	mov	r11, r25
 974:	8f 36       	cpi	r24, 0x6F	; 111
 976:	c1 f0       	breq	.+48     	; 0x9a8 <__stack+0x149>
 978:	18 f4       	brcc	.+6      	; 0x980 <__stack+0x121>
 97a:	88 35       	cpi	r24, 0x58	; 88
 97c:	79 f0       	breq	.+30     	; 0x99c <__stack+0x13d>
 97e:	b5 c0       	rjmp	.+362    	; 0xaea <__stack+0x28b>
 980:	80 37       	cpi	r24, 0x70	; 112
 982:	19 f0       	breq	.+6      	; 0x98a <__stack+0x12b>
 984:	88 37       	cpi	r24, 0x78	; 120
 986:	21 f0       	breq	.+8      	; 0x990 <__stack+0x131>
 988:	b0 c0       	rjmp	.+352    	; 0xaea <__stack+0x28b>
 98a:	e9 2f       	mov	r30, r25
 98c:	e0 61       	ori	r30, 0x10	; 16
 98e:	be 2e       	mov	r11, r30
 990:	b4 fe       	sbrs	r11, 4
 992:	0d c0       	rjmp	.+26     	; 0x9ae <__stack+0x14f>
 994:	fb 2d       	mov	r31, r11
 996:	f4 60       	ori	r31, 0x04	; 4
 998:	bf 2e       	mov	r11, r31
 99a:	09 c0       	rjmp	.+18     	; 0x9ae <__stack+0x14f>
 99c:	34 fe       	sbrs	r3, 4
 99e:	0a c0       	rjmp	.+20     	; 0x9b4 <__stack+0x155>
 9a0:	29 2f       	mov	r18, r25
 9a2:	26 60       	ori	r18, 0x06	; 6
 9a4:	b2 2e       	mov	r11, r18
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <__stack+0x155>
 9a8:	28 e0       	ldi	r18, 0x08	; 8
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <__stack+0x159>
 9ae:	20 e1       	ldi	r18, 0x10	; 16
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <__stack+0x159>
 9b4:	20 e1       	ldi	r18, 0x10	; 16
 9b6:	32 e0       	ldi	r19, 0x02	; 2
 9b8:	f8 01       	movw	r30, r16
 9ba:	b7 fe       	sbrs	r11, 7
 9bc:	07 c0       	rjmp	.+14     	; 0x9cc <__stack+0x16d>
 9be:	60 81       	ld	r22, Z
 9c0:	71 81       	ldd	r23, Z+1	; 0x01
 9c2:	82 81       	ldd	r24, Z+2	; 0x02
 9c4:	93 81       	ldd	r25, Z+3	; 0x03
 9c6:	0c 5f       	subi	r16, 0xFC	; 252
 9c8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <__stack+0x179>
 9cc:	60 81       	ld	r22, Z
 9ce:	71 81       	ldd	r23, Z+1	; 0x01
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 5f       	subi	r16, 0xFE	; 254
 9d6:	1f 4f       	sbci	r17, 0xFF	; 255
 9d8:	a3 01       	movw	r20, r6
 9da:	0e 94 d1 05 	call	0xba2	; 0xba2 <__ultoa_invert>
 9de:	88 2e       	mov	r8, r24
 9e0:	86 18       	sub	r8, r6
 9e2:	fb 2d       	mov	r31, r11
 9e4:	ff 77       	andi	r31, 0x7F	; 127
 9e6:	3f 2e       	mov	r3, r31
 9e8:	36 fe       	sbrs	r3, 6
 9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__stack+0x1a7>
 9ec:	23 2d       	mov	r18, r3
 9ee:	2e 7f       	andi	r18, 0xFE	; 254
 9f0:	a2 2e       	mov	r10, r18
 9f2:	89 14       	cp	r8, r9
 9f4:	58 f4       	brcc	.+22     	; 0xa0c <__stack+0x1ad>
 9f6:	34 fe       	sbrs	r3, 4
 9f8:	0b c0       	rjmp	.+22     	; 0xa10 <__stack+0x1b1>
 9fa:	32 fc       	sbrc	r3, 2
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <__stack+0x1b1>
 9fe:	83 2d       	mov	r24, r3
 a00:	8e 7e       	andi	r24, 0xEE	; 238
 a02:	a8 2e       	mov	r10, r24
 a04:	05 c0       	rjmp	.+10     	; 0xa10 <__stack+0x1b1>
 a06:	b8 2c       	mov	r11, r8
 a08:	a3 2c       	mov	r10, r3
 a0a:	03 c0       	rjmp	.+6      	; 0xa12 <__stack+0x1b3>
 a0c:	b8 2c       	mov	r11, r8
 a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__stack+0x1b3>
 a10:	b9 2c       	mov	r11, r9
 a12:	a4 fe       	sbrs	r10, 4
 a14:	0f c0       	rjmp	.+30     	; 0xa34 <__stack+0x1d5>
 a16:	fe 01       	movw	r30, r28
 a18:	e8 0d       	add	r30, r8
 a1a:	f1 1d       	adc	r31, r1
 a1c:	80 81       	ld	r24, Z
 a1e:	80 33       	cpi	r24, 0x30	; 48
 a20:	21 f4       	brne	.+8      	; 0xa2a <__stack+0x1cb>
 a22:	9a 2d       	mov	r25, r10
 a24:	99 7e       	andi	r25, 0xE9	; 233
 a26:	a9 2e       	mov	r10, r25
 a28:	09 c0       	rjmp	.+18     	; 0xa3c <__stack+0x1dd>
 a2a:	a2 fe       	sbrs	r10, 2
 a2c:	06 c0       	rjmp	.+12     	; 0xa3a <__stack+0x1db>
 a2e:	b3 94       	inc	r11
 a30:	b3 94       	inc	r11
 a32:	04 c0       	rjmp	.+8      	; 0xa3c <__stack+0x1dd>
 a34:	8a 2d       	mov	r24, r10
 a36:	86 78       	andi	r24, 0x86	; 134
 a38:	09 f0       	breq	.+2      	; 0xa3c <__stack+0x1dd>
 a3a:	b3 94       	inc	r11
 a3c:	a3 fc       	sbrc	r10, 3
 a3e:	11 c0       	rjmp	.+34     	; 0xa62 <__stack+0x203>
 a40:	a0 fe       	sbrs	r10, 0
 a42:	06 c0       	rjmp	.+12     	; 0xa50 <__stack+0x1f1>
 a44:	b2 14       	cp	r11, r2
 a46:	88 f4       	brcc	.+34     	; 0xa6a <__stack+0x20b>
 a48:	28 0c       	add	r2, r8
 a4a:	92 2c       	mov	r9, r2
 a4c:	9b 18       	sub	r9, r11
 a4e:	0e c0       	rjmp	.+28     	; 0xa6c <__stack+0x20d>
 a50:	b2 14       	cp	r11, r2
 a52:	60 f4       	brcc	.+24     	; 0xa6c <__stack+0x20d>
 a54:	b6 01       	movw	r22, r12
 a56:	80 e2       	ldi	r24, 0x20	; 32
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 94 95 05 	call	0xb2a	; 0xb2a <fputc>
 a5e:	b3 94       	inc	r11
 a60:	f7 cf       	rjmp	.-18     	; 0xa50 <__stack+0x1f1>
 a62:	b2 14       	cp	r11, r2
 a64:	18 f4       	brcc	.+6      	; 0xa6c <__stack+0x20d>
 a66:	2b 18       	sub	r2, r11
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x20f>
 a6a:	98 2c       	mov	r9, r8
 a6c:	21 2c       	mov	r2, r1
 a6e:	a4 fe       	sbrs	r10, 4
 a70:	10 c0       	rjmp	.+32     	; 0xa92 <__stack+0x233>
 a72:	b6 01       	movw	r22, r12
 a74:	80 e3       	ldi	r24, 0x30	; 48
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	0e 94 95 05 	call	0xb2a	; 0xb2a <fputc>
 a7c:	a2 fe       	sbrs	r10, 2
 a7e:	17 c0       	rjmp	.+46     	; 0xaae <__stack+0x24f>
 a80:	a1 fc       	sbrc	r10, 1
 a82:	03 c0       	rjmp	.+6      	; 0xa8a <__stack+0x22b>
 a84:	88 e7       	ldi	r24, 0x78	; 120
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <__stack+0x22f>
 a8a:	88 e5       	ldi	r24, 0x58	; 88
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	b6 01       	movw	r22, r12
 a90:	0c c0       	rjmp	.+24     	; 0xaaa <__stack+0x24b>
 a92:	8a 2d       	mov	r24, r10
 a94:	86 78       	andi	r24, 0x86	; 134
 a96:	59 f0       	breq	.+22     	; 0xaae <__stack+0x24f>
 a98:	a1 fe       	sbrs	r10, 1
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <__stack+0x241>
 a9c:	8b e2       	ldi	r24, 0x2B	; 43
 a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <__stack+0x243>
 aa0:	80 e2       	ldi	r24, 0x20	; 32
 aa2:	a7 fc       	sbrc	r10, 7
 aa4:	8d e2       	ldi	r24, 0x2D	; 45
 aa6:	b6 01       	movw	r22, r12
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 95 05 	call	0xb2a	; 0xb2a <fputc>
 aae:	89 14       	cp	r8, r9
 ab0:	38 f4       	brcc	.+14     	; 0xac0 <__stack+0x261>
 ab2:	b6 01       	movw	r22, r12
 ab4:	80 e3       	ldi	r24, 0x30	; 48
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 95 05 	call	0xb2a	; 0xb2a <fputc>
 abc:	9a 94       	dec	r9
 abe:	f7 cf       	rjmp	.-18     	; 0xaae <__stack+0x24f>
 ac0:	8a 94       	dec	r8
 ac2:	f3 01       	movw	r30, r6
 ac4:	e8 0d       	add	r30, r8
 ac6:	f1 1d       	adc	r31, r1
 ac8:	80 81       	ld	r24, Z
 aca:	b6 01       	movw	r22, r12
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 95 05 	call	0xb2a	; 0xb2a <fputc>
 ad2:	81 10       	cpse	r8, r1
 ad4:	f5 cf       	rjmp	.-22     	; 0xac0 <__stack+0x261>
 ad6:	22 20       	and	r2, r2
 ad8:	09 f4       	brne	.+2      	; 0xadc <__stack+0x27d>
 ada:	42 ce       	rjmp	.-892    	; 0x760 <vfprintf+0x24>
 adc:	b6 01       	movw	r22, r12
 ade:	80 e2       	ldi	r24, 0x20	; 32
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 95 05 	call	0xb2a	; 0xb2a <fputc>
 ae6:	2a 94       	dec	r2
 ae8:	f6 cf       	rjmp	.-20     	; 0xad6 <__stack+0x277>
 aea:	f6 01       	movw	r30, r12
 aec:	86 81       	ldd	r24, Z+6	; 0x06
 aee:	97 81       	ldd	r25, Z+7	; 0x07
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__stack+0x297>
 af2:	8f ef       	ldi	r24, 0xFF	; 255
 af4:	9f ef       	ldi	r25, 0xFF	; 255
 af6:	2b 96       	adiw	r28, 0x0b	; 11
 af8:	e2 e1       	ldi	r30, 0x12	; 18
 afa:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__epilogue_restores__>

00000afe <strnlen_P>:
 afe:	fc 01       	movw	r30, r24
 b00:	05 90       	lpm	r0, Z+
 b02:	61 50       	subi	r22, 0x01	; 1
 b04:	70 40       	sbci	r23, 0x00	; 0
 b06:	01 10       	cpse	r0, r1
 b08:	d8 f7       	brcc	.-10     	; 0xb00 <strnlen_P+0x2>
 b0a:	80 95       	com	r24
 b0c:	90 95       	com	r25
 b0e:	8e 0f       	add	r24, r30
 b10:	9f 1f       	adc	r25, r31
 b12:	08 95       	ret

00000b14 <strnlen>:
 b14:	fc 01       	movw	r30, r24
 b16:	61 50       	subi	r22, 0x01	; 1
 b18:	70 40       	sbci	r23, 0x00	; 0
 b1a:	01 90       	ld	r0, Z+
 b1c:	01 10       	cpse	r0, r1
 b1e:	d8 f7       	brcc	.-10     	; 0xb16 <strnlen+0x2>
 b20:	80 95       	com	r24
 b22:	90 95       	com	r25
 b24:	8e 0f       	add	r24, r30
 b26:	9f 1f       	adc	r25, r31
 b28:	08 95       	ret

00000b2a <fputc>:
 b2a:	0f 93       	push	r16
 b2c:	1f 93       	push	r17
 b2e:	cf 93       	push	r28
 b30:	df 93       	push	r29
 b32:	fb 01       	movw	r30, r22
 b34:	23 81       	ldd	r18, Z+3	; 0x03
 b36:	21 fd       	sbrc	r18, 1
 b38:	03 c0       	rjmp	.+6      	; 0xb40 <fputc+0x16>
 b3a:	8f ef       	ldi	r24, 0xFF	; 255
 b3c:	9f ef       	ldi	r25, 0xFF	; 255
 b3e:	2c c0       	rjmp	.+88     	; 0xb98 <fputc+0x6e>
 b40:	22 ff       	sbrs	r18, 2
 b42:	16 c0       	rjmp	.+44     	; 0xb70 <fputc+0x46>
 b44:	46 81       	ldd	r20, Z+6	; 0x06
 b46:	57 81       	ldd	r21, Z+7	; 0x07
 b48:	24 81       	ldd	r18, Z+4	; 0x04
 b4a:	35 81       	ldd	r19, Z+5	; 0x05
 b4c:	42 17       	cp	r20, r18
 b4e:	53 07       	cpc	r21, r19
 b50:	44 f4       	brge	.+16     	; 0xb62 <fputc+0x38>
 b52:	a0 81       	ld	r26, Z
 b54:	b1 81       	ldd	r27, Z+1	; 0x01
 b56:	9d 01       	movw	r18, r26
 b58:	2f 5f       	subi	r18, 0xFF	; 255
 b5a:	3f 4f       	sbci	r19, 0xFF	; 255
 b5c:	31 83       	std	Z+1, r19	; 0x01
 b5e:	20 83       	st	Z, r18
 b60:	8c 93       	st	X, r24
 b62:	26 81       	ldd	r18, Z+6	; 0x06
 b64:	37 81       	ldd	r19, Z+7	; 0x07
 b66:	2f 5f       	subi	r18, 0xFF	; 255
 b68:	3f 4f       	sbci	r19, 0xFF	; 255
 b6a:	37 83       	std	Z+7, r19	; 0x07
 b6c:	26 83       	std	Z+6, r18	; 0x06
 b6e:	14 c0       	rjmp	.+40     	; 0xb98 <fputc+0x6e>
 b70:	8b 01       	movw	r16, r22
 b72:	ec 01       	movw	r28, r24
 b74:	fb 01       	movw	r30, r22
 b76:	00 84       	ldd	r0, Z+8	; 0x08
 b78:	f1 85       	ldd	r31, Z+9	; 0x09
 b7a:	e0 2d       	mov	r30, r0
 b7c:	09 95       	icall
 b7e:	89 2b       	or	r24, r25
 b80:	e1 f6       	brne	.-72     	; 0xb3a <fputc+0x10>
 b82:	d8 01       	movw	r26, r16
 b84:	16 96       	adiw	r26, 0x06	; 6
 b86:	8d 91       	ld	r24, X+
 b88:	9c 91       	ld	r25, X
 b8a:	17 97       	sbiw	r26, 0x07	; 7
 b8c:	01 96       	adiw	r24, 0x01	; 1
 b8e:	17 96       	adiw	r26, 0x07	; 7
 b90:	9c 93       	st	X, r25
 b92:	8e 93       	st	-X, r24
 b94:	16 97       	sbiw	r26, 0x06	; 6
 b96:	ce 01       	movw	r24, r28
 b98:	df 91       	pop	r29
 b9a:	cf 91       	pop	r28
 b9c:	1f 91       	pop	r17
 b9e:	0f 91       	pop	r16
 ba0:	08 95       	ret

00000ba2 <__ultoa_invert>:
 ba2:	fa 01       	movw	r30, r20
 ba4:	aa 27       	eor	r26, r26
 ba6:	28 30       	cpi	r18, 0x08	; 8
 ba8:	51 f1       	breq	.+84     	; 0xbfe <__ultoa_invert+0x5c>
 baa:	20 31       	cpi	r18, 0x10	; 16
 bac:	81 f1       	breq	.+96     	; 0xc0e <__ultoa_invert+0x6c>
 bae:	e8 94       	clt
 bb0:	6f 93       	push	r22
 bb2:	6e 7f       	andi	r22, 0xFE	; 254
 bb4:	6e 5f       	subi	r22, 0xFE	; 254
 bb6:	7f 4f       	sbci	r23, 0xFF	; 255
 bb8:	8f 4f       	sbci	r24, 0xFF	; 255
 bba:	9f 4f       	sbci	r25, 0xFF	; 255
 bbc:	af 4f       	sbci	r26, 0xFF	; 255
 bbe:	b1 e0       	ldi	r27, 0x01	; 1
 bc0:	3e d0       	rcall	.+124    	; 0xc3e <__ultoa_invert+0x9c>
 bc2:	b4 e0       	ldi	r27, 0x04	; 4
 bc4:	3c d0       	rcall	.+120    	; 0xc3e <__ultoa_invert+0x9c>
 bc6:	67 0f       	add	r22, r23
 bc8:	78 1f       	adc	r23, r24
 bca:	89 1f       	adc	r24, r25
 bcc:	9a 1f       	adc	r25, r26
 bce:	a1 1d       	adc	r26, r1
 bd0:	68 0f       	add	r22, r24
 bd2:	79 1f       	adc	r23, r25
 bd4:	8a 1f       	adc	r24, r26
 bd6:	91 1d       	adc	r25, r1
 bd8:	a1 1d       	adc	r26, r1
 bda:	6a 0f       	add	r22, r26
 bdc:	71 1d       	adc	r23, r1
 bde:	81 1d       	adc	r24, r1
 be0:	91 1d       	adc	r25, r1
 be2:	a1 1d       	adc	r26, r1
 be4:	20 d0       	rcall	.+64     	; 0xc26 <__ultoa_invert+0x84>
 be6:	09 f4       	brne	.+2      	; 0xbea <__ultoa_invert+0x48>
 be8:	68 94       	set
 bea:	3f 91       	pop	r19
 bec:	2a e0       	ldi	r18, 0x0A	; 10
 bee:	26 9f       	mul	r18, r22
 bf0:	11 24       	eor	r1, r1
 bf2:	30 19       	sub	r19, r0
 bf4:	30 5d       	subi	r19, 0xD0	; 208
 bf6:	31 93       	st	Z+, r19
 bf8:	de f6       	brtc	.-74     	; 0xbb0 <__ultoa_invert+0xe>
 bfa:	cf 01       	movw	r24, r30
 bfc:	08 95       	ret
 bfe:	46 2f       	mov	r20, r22
 c00:	47 70       	andi	r20, 0x07	; 7
 c02:	40 5d       	subi	r20, 0xD0	; 208
 c04:	41 93       	st	Z+, r20
 c06:	b3 e0       	ldi	r27, 0x03	; 3
 c08:	0f d0       	rcall	.+30     	; 0xc28 <__ultoa_invert+0x86>
 c0a:	c9 f7       	brne	.-14     	; 0xbfe <__ultoa_invert+0x5c>
 c0c:	f6 cf       	rjmp	.-20     	; 0xbfa <__ultoa_invert+0x58>
 c0e:	46 2f       	mov	r20, r22
 c10:	4f 70       	andi	r20, 0x0F	; 15
 c12:	40 5d       	subi	r20, 0xD0	; 208
 c14:	4a 33       	cpi	r20, 0x3A	; 58
 c16:	18 f0       	brcs	.+6      	; 0xc1e <__ultoa_invert+0x7c>
 c18:	49 5d       	subi	r20, 0xD9	; 217
 c1a:	31 fd       	sbrc	r19, 1
 c1c:	40 52       	subi	r20, 0x20	; 32
 c1e:	41 93       	st	Z+, r20
 c20:	02 d0       	rcall	.+4      	; 0xc26 <__ultoa_invert+0x84>
 c22:	a9 f7       	brne	.-22     	; 0xc0e <__ultoa_invert+0x6c>
 c24:	ea cf       	rjmp	.-44     	; 0xbfa <__ultoa_invert+0x58>
 c26:	b4 e0       	ldi	r27, 0x04	; 4
 c28:	a6 95       	lsr	r26
 c2a:	97 95       	ror	r25
 c2c:	87 95       	ror	r24
 c2e:	77 95       	ror	r23
 c30:	67 95       	ror	r22
 c32:	ba 95       	dec	r27
 c34:	c9 f7       	brne	.-14     	; 0xc28 <__ultoa_invert+0x86>
 c36:	00 97       	sbiw	r24, 0x00	; 0
 c38:	61 05       	cpc	r22, r1
 c3a:	71 05       	cpc	r23, r1
 c3c:	08 95       	ret
 c3e:	9b 01       	movw	r18, r22
 c40:	ac 01       	movw	r20, r24
 c42:	0a 2e       	mov	r0, r26
 c44:	06 94       	lsr	r0
 c46:	57 95       	ror	r21
 c48:	47 95       	ror	r20
 c4a:	37 95       	ror	r19
 c4c:	27 95       	ror	r18
 c4e:	ba 95       	dec	r27
 c50:	c9 f7       	brne	.-14     	; 0xc44 <__ultoa_invert+0xa2>
 c52:	62 0f       	add	r22, r18
 c54:	73 1f       	adc	r23, r19
 c56:	84 1f       	adc	r24, r20
 c58:	95 1f       	adc	r25, r21
 c5a:	a0 1d       	adc	r26, r0
 c5c:	08 95       	ret

00000c5e <__prologue_saves__>:
 c5e:	2f 92       	push	r2
 c60:	3f 92       	push	r3
 c62:	4f 92       	push	r4
 c64:	5f 92       	push	r5
 c66:	6f 92       	push	r6
 c68:	7f 92       	push	r7
 c6a:	8f 92       	push	r8
 c6c:	9f 92       	push	r9
 c6e:	af 92       	push	r10
 c70:	bf 92       	push	r11
 c72:	cf 92       	push	r12
 c74:	df 92       	push	r13
 c76:	ef 92       	push	r14
 c78:	ff 92       	push	r15
 c7a:	0f 93       	push	r16
 c7c:	1f 93       	push	r17
 c7e:	cf 93       	push	r28
 c80:	df 93       	push	r29
 c82:	cd b7       	in	r28, 0x3d	; 61
 c84:	de b7       	in	r29, 0x3e	; 62
 c86:	ca 1b       	sub	r28, r26
 c88:	db 0b       	sbc	r29, r27
 c8a:	0f b6       	in	r0, 0x3f	; 63
 c8c:	f8 94       	cli
 c8e:	de bf       	out	0x3e, r29	; 62
 c90:	0f be       	out	0x3f, r0	; 63
 c92:	cd bf       	out	0x3d, r28	; 61
 c94:	09 94       	ijmp

00000c96 <__epilogue_restores__>:
 c96:	2a 88       	ldd	r2, Y+18	; 0x12
 c98:	39 88       	ldd	r3, Y+17	; 0x11
 c9a:	48 88       	ldd	r4, Y+16	; 0x10
 c9c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c9e:	6e 84       	ldd	r6, Y+14	; 0x0e
 ca0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ca2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ca4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ca6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ca8:	b9 84       	ldd	r11, Y+9	; 0x09
 caa:	c8 84       	ldd	r12, Y+8	; 0x08
 cac:	df 80       	ldd	r13, Y+7	; 0x07
 cae:	ee 80       	ldd	r14, Y+6	; 0x06
 cb0:	fd 80       	ldd	r15, Y+5	; 0x05
 cb2:	0c 81       	ldd	r16, Y+4	; 0x04
 cb4:	1b 81       	ldd	r17, Y+3	; 0x03
 cb6:	aa 81       	ldd	r26, Y+2	; 0x02
 cb8:	b9 81       	ldd	r27, Y+1	; 0x01
 cba:	ce 0f       	add	r28, r30
 cbc:	d1 1d       	adc	r29, r1
 cbe:	0f b6       	in	r0, 0x3f	; 63
 cc0:	f8 94       	cli
 cc2:	de bf       	out	0x3e, r29	; 62
 cc4:	0f be       	out	0x3f, r0	; 63
 cc6:	cd bf       	out	0x3d, r28	; 61
 cc8:	ed 01       	movw	r28, r26
 cca:	08 95       	ret

00000ccc <_exit>:
 ccc:	f8 94       	cli

00000cce <__stop_program>:
 cce:	ff cf       	rjmp	.-2      	; 0xcce <__stop_program>
