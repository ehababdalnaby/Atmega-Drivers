
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000cbc  00000d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800064  00800064  00000d54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024e2  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd3  00000000  00000000  0000344e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3f  00000000  00000000  00004021  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073c  00000000  00000000  00004f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ee0  00000000  00000000  000056d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000065b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#error define includes.h file
#endif


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	6e 97       	sbiw	r28, 0x1e	; 30
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	unsigned char value,i,lati_value[15],lati_dir, longi_value[15], longi_dir, alti[5],time[15] ;
	LCD_init();
  a6:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_init>
	UART_INIT(9600);
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	95 e2       	ldi	r25, 0x25	; 37
  ae:	0e 94 fd 02 	call	0x5fa	; 0x5fa <UART_INIT>
	while(1)
	{
		if(UART_RX()=='$' && UART_RX()=='G'&&UART_RX()=='P'&&UART_RX()=='G'&&UART_RX()=='G'&&UART_RX()=='A')
  b2:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
  b6:	84 32       	cpi	r24, 0x24	; 36
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x20>
  ba:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
  be:	87 34       	cpi	r24, 0x47	; 71
  c0:	c1 f7       	brne	.-16     	; 0xb2 <main+0x20>
  c2:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
  c6:	80 35       	cpi	r24, 0x50	; 80
  c8:	a1 f7       	brne	.-24     	; 0xb2 <main+0x20>
  ca:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
  ce:	87 34       	cpi	r24, 0x47	; 71
  d0:	81 f7       	brne	.-32     	; 0xb2 <main+0x20>
  d2:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
  d6:	87 34       	cpi	r24, 0x47	; 71
  d8:	61 f7       	brne	.-40     	; 0xb2 <main+0x20>
  da:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
  de:	81 34       	cpi	r24, 0x41	; 65
  e0:	41 f7       	brne	.-48     	; 0xb2 <main+0x20>
		{
				UART_RX();
  e2:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
				//time
				time[0]=UART_RX();
  e6:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
				value=time[0];
				for(i=1;value!=',';i++)
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x5e>
				{
					time[i]=UART_RX();
  ec:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
		{
				UART_RX();
				//time
				time[0]=UART_RX();
				value=time[0];
				for(i=1;value!=',';i++)
  f0:	8c 32       	cpi	r24, 0x2C	; 44
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x5a>
					time[i]=UART_RX();
					value=time[i];
				}
				time[i-1]=' ';
				//latitude
				lati_value[0]=UART_RX();
  f4:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
  f8:	89 83       	std	Y+1, r24	; 0x01
				value=lati_value[0];
				for(i=1;value!=',';i++)
  fa:	11 e0       	ldi	r17, 0x01	; 1
  fc:	0c c0       	rjmp	.+24     	; 0x116 <main+0x84>
				{
					lati_value[i]=UART_RX();
  fe:	e1 2e       	mov	r14, r17
 100:	f1 2c       	mov	r15, r1
 102:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
 106:	e1 e0       	ldi	r30, 0x01	; 1
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	ee 0d       	add	r30, r14
 110:	ff 1d       	adc	r31, r15
 112:	80 83       	st	Z, r24
				}
				time[i-1]=' ';
				//latitude
				lati_value[0]=UART_RX();
				value=lati_value[0];
				for(i=1;value!=',';i++)
 114:	1f 5f       	subi	r17, 0xFF	; 255
 116:	8c 32       	cpi	r24, 0x2C	; 44
 118:	91 f7       	brne	.-28     	; 0xfe <main+0x6c>
				{
					lati_value[i]=UART_RX();
					value=lati_value[i];
				}
				lati_value[i-1]=' ';
 11a:	e1 2f       	mov	r30, r17
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	8c 0f       	add	r24, r28
 126:	9d 1f       	adc	r25, r29
 128:	e8 0f       	add	r30, r24
 12a:	f9 1f       	adc	r31, r25
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	80 83       	st	Z, r24
				lati_dir=UART_RX();
 130:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
 134:	08 2f       	mov	r16, r24
				value=UART_RX();//remove next comma (,)
 136:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
				//longitude
				longi_value[0]=UART_RX();
 13a:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
 13e:	88 8b       	std	Y+16, r24	; 0x10
				value=longi_value[0];
				for(i=1;value!=',';i++)
 140:	11 e0       	ldi	r17, 0x01	; 1
 142:	0c c0       	rjmp	.+24     	; 0x15c <main+0xca>
				{
					longi_value[i]=UART_RX();
 144:	e1 2e       	mov	r14, r17
 146:	f1 2c       	mov	r15, r1
 148:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
 14c:	e0 e1       	ldi	r30, 0x10	; 16
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	ee 0d       	add	r30, r14
 156:	ff 1d       	adc	r31, r15
 158:	80 83       	st	Z, r24
				lati_dir=UART_RX();
				value=UART_RX();//remove next comma (,)
				//longitude
				longi_value[0]=UART_RX();
				value=longi_value[0];
				for(i=1;value!=',';i++)
 15a:	1f 5f       	subi	r17, 0xFF	; 255
 15c:	8c 32       	cpi	r24, 0x2C	; 44
 15e:	91 f7       	brne	.-28     	; 0x144 <main+0xb2>
				{
					longi_value[i]=UART_RX();
					value=longi_value[i];
				}
				longi_value[i-1]=' ';
 160:	e1 2f       	mov	r30, r17
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	80 e1       	ldi	r24, 0x10	; 16
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	8c 0f       	add	r24, r28
 16c:	9d 1f       	adc	r25, r29
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	80 83       	st	Z, r24
				longi_dir=UART_RX();
 176:	0e 94 26 03 	call	0x64c	; 0x64c <UART_RX>
 17a:	18 2f       	mov	r17, r24
				
				//disp_strXY(1,1,time);
				strfToint(lati_value);
 17c:	ce 01       	movw	r24, r28
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <strfToint>
				disp_strXY(1,1,lati_value);
 184:	ae 01       	movw	r20, r28
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 15 02 	call	0x42a	; 0x42a <disp_strXY>
				disp_char(lati_dir);
 192:	80 2f       	mov	r24, r16
 194:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <disp_char>
				
				strfToint(longi_value);
 198:	ce 01       	movw	r24, r28
 19a:	40 96       	adiw	r24, 0x10	; 16
 19c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <strfToint>
				disp_strXY(2,1,longi_value);
 1a0:	ae 01       	movw	r20, r28
 1a2:	40 5f       	subi	r20, 0xF0	; 240
 1a4:	5f 4f       	sbci	r21, 0xFF	; 255
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 15 02 	call	0x42a	; 0x42a <disp_strXY>
				disp_char(longi_dir);
 1ae:	81 2f       	mov	r24, r17
 1b0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <disp_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	23 ed       	ldi	r18, 0xD3	; 211
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x128>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x132>
 1c4:	00 00       	nop
 1c6:	75 cf       	rjmp	.-278    	; 0xb2 <main+0x20>

000001c8 <strfToint>:
#include "GPS.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
void strfToint(u8* strf) //{"12312.1234"} // {"1212.1234"}
{
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	8c 01       	movw	r16, r24
	u8 i=0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
	u8 dotIndex;
	u32 Num;
	while (strf[i]!='.')
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <strfToint+0x18>
		i++;
 1de:	8f 5f       	subi	r24, 0xFF	; 255
void strfToint(u8* strf) //{"12312.1234"} // {"1212.1234"}
{
	u8 i=0;
	u8 dotIndex;
	u32 Num;
	while (strf[i]!='.')
 1e0:	c8 2f       	mov	r28, r24
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	f8 01       	movw	r30, r16
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	90 81       	ld	r25, Z
 1ec:	9e 32       	cpi	r25, 0x2E	; 46
 1ee:	b9 f7       	brne	.-18     	; 0x1de <strfToint+0x16>
		i++;
	dotIndex=i;
	i=i-2;
 1f0:	82 50       	subi	r24, 0x02	; 2
	Num=atoi(&strf[i])*(10000);
 1f2:	68 01       	movw	r12, r16
 1f4:	c8 0e       	add	r12, r24
 1f6:	d1 1c       	adc	r13, r1
 1f8:	c6 01       	movw	r24, r12
 1fa:	0e 94 4c 03 	call	0x698	; 0x698 <atoi>
 1fe:	20 e1       	ldi	r18, 0x10	; 16
 200:	37 e2       	ldi	r19, 0x27	; 39
 202:	7c 01       	movw	r14, r24
 204:	e2 9e       	mul	r14, r18
 206:	c0 01       	movw	r24, r0
 208:	e3 9e       	mul	r14, r19
 20a:	90 0d       	add	r25, r0
 20c:	f2 9e       	mul	r15, r18
 20e:	90 0d       	add	r25, r0
 210:	11 24       	eor	r1, r1
 212:	6c 01       	movw	r12, r24
 214:	99 0f       	add	r25, r25
 216:	ee 08       	sbc	r14, r14
 218:	ff 08       	sbc	r15, r15
	Num=Num+atoi(&strf[dotIndex+1]); /// 121234
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	80 0f       	add	r24, r16
 220:	91 1f       	adc	r25, r17
 222:	0e 94 4c 03 	call	0x698	; 0x698 <atoi>
 226:	09 2e       	mov	r0, r25
 228:	00 0c       	add	r0, r0
 22a:	aa 0b       	sbc	r26, r26
 22c:	bb 0b       	sbc	r27, r27
 22e:	8c 0d       	add	r24, r12
 230:	9d 1d       	adc	r25, r13
 232:	ae 1d       	adc	r26, r14
 234:	bf 1d       	adc	r27, r15
	Num=(Num*10)/60;
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	ac 01       	movw	r20, r24
 240:	bd 01       	movw	r22, r26
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	66 1f       	adc	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	44 0f       	add	r20, r20
 24c:	55 1f       	adc	r21, r21
 24e:	66 1f       	adc	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	6c 01       	movw	r12, r24
 254:	7d 01       	movw	r14, r26
 256:	c4 0e       	add	r12, r20
 258:	d5 1e       	adc	r13, r21
 25a:	e6 1e       	adc	r14, r22
 25c:	f7 1e       	adc	r15, r23
 25e:	c7 01       	movw	r24, r14
 260:	b6 01       	movw	r22, r12
 262:	2c e3       	ldi	r18, 0x3C	; 60
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	0e 94 2a 03 	call	0x654	; 0x654 <__udivmodsi4>
	strf[dotIndex-2]='.';
 26e:	fe 01       	movw	r30, r28
 270:	32 97       	sbiw	r30, 0x02	; 2
 272:	e0 0f       	add	r30, r16
 274:	f1 1f       	adc	r31, r17
 276:	8e e2       	ldi	r24, 0x2E	; 46
 278:	80 83       	st	Z, r24
	sprintf(&strf[dotIndex-1],"%u",Num);
 27a:	21 97       	sbiw	r28, 0x01	; 1
 27c:	c0 0f       	add	r28, r16
 27e:	d1 1f       	adc	r29, r17
 280:	5f 93       	push	r21
 282:	4f 93       	push	r20
 284:	3f 93       	push	r19
 286:	2f 93       	push	r18
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9f 93       	push	r25
 28e:	8f 93       	push	r24
 290:	df 93       	push	r29
 292:	cf 93       	push	r28
 294:	0e 94 72 03 	call	0x6e4	; 0x6e4 <sprintf>
 298:	2d b7       	in	r18, 0x3d	; 61
 29a:	3e b7       	in	r19, 0x3e	; 62
 29c:	28 5f       	subi	r18, 0xF8	; 248
 29e:	3f 4f       	sbci	r19, 0xFF	; 255
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	3e bf       	out	0x3e, r19	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	2d bf       	out	0x3d, r18	; 61
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	df 90       	pop	r13
 2b8:	cf 90       	pop	r12
 2ba:	08 95       	ret

000002bc <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	8b e0       	ldi	r24, 0x0B	; 11
 2c0:	0e 94 27 02 	call	0x44e	; 0x44e <writePin>
 2c4:	87 ec       	ldi	r24, 0xC7	; 199
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_latch+0xc>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_latch+0x12>
 2ce:	00 00       	nop
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	8b e0       	ldi	r24, 0x0B	; 11
 2d4:	0e 94 27 02 	call	0x44e	; 0x44e <writePin>
 2d8:	87 ec       	ldi	r24, 0xC7	; 199
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_latch+0x20>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_latch+0x26>
 2e2:	00 00       	nop
 2e4:	08 95       	ret

000002e6 <SendToLCD>:
 2e6:	cf 93       	push	r28
 2e8:	c8 2f       	mov	r28, r24
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	60 ef       	ldi	r22, 0xF0	; 240
 2ee:	8b e3       	ldi	r24, 0x3B	; 59
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 bd 02 	call	0x57a	; 0x57a <writePins>
 2f6:	6c 2f       	mov	r22, r28
 2f8:	60 7f       	andi	r22, 0xF0	; 240
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	8b e3       	ldi	r24, 0x3B	; 59
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 bd 02 	call	0x57a	; 0x57a <writePins>
 304:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_latch>
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	60 ef       	ldi	r22, 0xF0	; 240
 30c:	8b e3       	ldi	r24, 0x3B	; 59
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 bd 02 	call	0x57a	; 0x57a <writePins>
 314:	80 e1       	ldi	r24, 0x10	; 16
 316:	c8 9f       	mul	r28, r24
 318:	b0 01       	movw	r22, r0
 31a:	11 24       	eor	r1, r1
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	8b e3       	ldi	r24, 0x3B	; 59
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 bd 02 	call	0x57a	; 0x57a <writePins>
 326:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_latch>
 32a:	87 ec       	ldi	r24, 0xC7	; 199
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <SendToLCD+0x48>
 332:	00 c0       	rjmp	.+0      	; 0x334 <SendToLCD+0x4e>
 334:	00 00       	nop
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <LCD_send_cmd>:
 33a:	cf 93       	push	r28
 33c:	c8 2f       	mov	r28, r24
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	89 e0       	ldi	r24, 0x09	; 9
 342:	0e 94 27 02 	call	0x44e	; 0x44e <writePin>
 346:	8c 2f       	mov	r24, r28
 348:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SendToLCD>
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <LCD_CLEAR>:
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_cmd>
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9f e1       	ldi	r25, 0x1F	; 31
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_CLEAR+0xa>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_CLEAR+0x10>
 360:	00 00       	nop
 362:	08 95       	ret

00000364 <LCD_ret_Home>:
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_cmd>
 36a:	8f e3       	ldi	r24, 0x3F	; 63
 36c:	9f e1       	ldi	r25, 0x1F	; 31
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_ret_Home+0xa>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_ret_Home+0x10>
 374:	00 00       	nop
 376:	08 95       	ret

00000378 <LCD_init>:
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	60 ef       	ldi	r22, 0xF0	; 240
 37c:	8a e3       	ldi	r24, 0x3A	; 58
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 cc 02 	call	0x598	; 0x598 <pinsDirection>
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	6e e0       	ldi	r22, 0x0E	; 14
 388:	87 e3       	ldi	r24, 0x37	; 55
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 cc 02 	call	0x598	; 0x598 <pinsDirection>
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	8a e0       	ldi	r24, 0x0A	; 10
 394:	0e 94 27 02 	call	0x44e	; 0x44e <writePin>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	83 ef       	ldi	r24, 0xF3	; 243
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <LCD_init+0x26>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_init+0x30>
 3a8:	00 00       	nop
 3aa:	0e 94 b2 01 	call	0x364	; 0x364 <LCD_ret_Home>
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_cmd>
 3b4:	8f e0       	ldi	r24, 0x0F	; 15
 3b6:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_cmd>
 3ba:	80 e1       	ldi	r24, 0x10	; 16
 3bc:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_cmd>
 3c0:	88 e2       	ldi	r24, 0x28	; 40
 3c2:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_cmd>
 3c6:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_CLEAR>
 3ca:	08 95       	ret

000003cc <LCD_send_data>:
 3cc:	cf 93       	push	r28
 3ce:	c8 2f       	mov	r28, r24
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	89 e0       	ldi	r24, 0x09	; 9
 3d4:	0e 94 27 02 	call	0x44e	; 0x44e <writePin>
 3d8:	8c 2f       	mov	r24, r28
 3da:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SendToLCD>
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <disp_char>:
 3e2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_send_data>
 3e6:	08 95       	ret

000003e8 <disp_str>:
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	8c 01       	movw	r16, r24
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <disp_str+0x12>
 3f4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <disp_char>
 3f8:	cf 5f       	subi	r28, 0xFF	; 255
 3fa:	f8 01       	movw	r30, r16
 3fc:	ec 0f       	add	r30, r28
 3fe:	f1 1d       	adc	r31, r1
 400:	80 81       	ld	r24, Z
 402:	81 11       	cpse	r24, r1
 404:	f7 cf       	rjmp	.-18     	; 0x3f4 <disp_str+0xc>
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <LCD_GOTXY>:
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	29 f4       	brne	.+10     	; 0x41c <LCD_GOTXY+0xe>
 412:	8f e7       	ldi	r24, 0x7F	; 127
 414:	86 0f       	add	r24, r22
 416:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_cmd>
 41a:	08 95       	ret
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	21 f4       	brne	.+8      	; 0x428 <LCD_GOTXY+0x1a>
 420:	8f eb       	ldi	r24, 0xBF	; 191
 422:	86 0f       	add	r24, r22
 424:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_cmd>
 428:	08 95       	ret

0000042a <disp_strXY>:
	else{}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
 430:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_GOTXY>
	disp_str(str);
 434:	ce 01       	movw	r24, r28
 436:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <disp_str>
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <GLOBAL_INT_EN>:
	}
}

void GLOBAL_INT_EN(void)
{
	writePins( &SREG,0x80,HIGH );
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	60 e8       	ldi	r22, 0x80	; 128
 444:	8f e5       	ldi	r24, 0x5F	; 95
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 bd 02 	call	0x57a	; 0x57a <writePins>
 44c:	08 95       	ret

0000044e <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 44e:	88 30       	cpi	r24, 0x08	; 8
 450:	f8 f4       	brcc	.+62     	; 0x490 <writePin+0x42>
 452:	61 30       	cpi	r22, 0x01	; 1
 454:	69 f4       	brne	.+26     	; 0x470 <writePin+0x22>
 456:	4b b3       	in	r20, 0x1b	; 27
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	b9 01       	movw	r22, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <writePin+0x16>
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	8a 95       	dec	r24
 466:	e2 f7       	brpl	.-8      	; 0x460 <writePin+0x12>
 468:	cb 01       	movw	r24, r22
 46a:	84 2b       	or	r24, r20
 46c:	8b bb       	out	0x1b, r24	; 27
 46e:	08 95       	ret
 470:	61 11       	cpse	r22, r1
 472:	82 c0       	rjmp	.+260    	; 0x578 <writePin+0x12a>
 474:	4b b3       	in	r20, 0x1b	; 27
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	b9 01       	movw	r22, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <writePin+0x34>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	8a 95       	dec	r24
 484:	e2 f7       	brpl	.-8      	; 0x47e <writePin+0x30>
 486:	cb 01       	movw	r24, r22
 488:	80 95       	com	r24
 48a:	84 23       	and	r24, r20
 48c:	8b bb       	out	0x1b, r24	; 27
 48e:	08 95       	ret
 490:	98 ef       	ldi	r25, 0xF8	; 248
 492:	98 0f       	add	r25, r24
 494:	98 30       	cpi	r25, 0x08	; 8
 496:	18 f5       	brcc	.+70     	; 0x4de <writePin+0x90>
 498:	61 30       	cpi	r22, 0x01	; 1
 49a:	79 f4       	brne	.+30     	; 0x4ba <writePin+0x6c>
 49c:	48 b3       	in	r20, 0x18	; 24
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	08 97       	sbiw	r24, 0x08	; 8
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	b9 01       	movw	r22, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <writePin+0x60>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	8a 95       	dec	r24
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <writePin+0x5c>
 4b2:	cb 01       	movw	r24, r22
 4b4:	84 2b       	or	r24, r20
 4b6:	88 bb       	out	0x18, r24	; 24
 4b8:	08 95       	ret
 4ba:	61 11       	cpse	r22, r1
 4bc:	5d c0       	rjmp	.+186    	; 0x578 <writePin+0x12a>
 4be:	48 b3       	in	r20, 0x18	; 24
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	08 97       	sbiw	r24, 0x08	; 8
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	b9 01       	movw	r22, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <writePin+0x82>
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	8a 95       	dec	r24
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <writePin+0x7e>
 4d4:	cb 01       	movw	r24, r22
 4d6:	80 95       	com	r24
 4d8:	84 23       	and	r24, r20
 4da:	88 bb       	out	0x18, r24	; 24
 4dc:	08 95       	ret
 4de:	90 ef       	ldi	r25, 0xF0	; 240
 4e0:	98 0f       	add	r25, r24
 4e2:	98 30       	cpi	r25, 0x08	; 8
 4e4:	18 f5       	brcc	.+70     	; 0x52c <writePin+0xde>
 4e6:	61 30       	cpi	r22, 0x01	; 1
 4e8:	79 f4       	brne	.+30     	; 0x508 <writePin+0xba>
 4ea:	45 b3       	in	r20, 0x15	; 21
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	40 97       	sbiw	r24, 0x10	; 16
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	b9 01       	movw	r22, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <writePin+0xae>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <writePin+0xaa>
 500:	cb 01       	movw	r24, r22
 502:	84 2b       	or	r24, r20
 504:	85 bb       	out	0x15, r24	; 21
 506:	08 95       	ret
 508:	61 11       	cpse	r22, r1
 50a:	36 c0       	rjmp	.+108    	; 0x578 <writePin+0x12a>
 50c:	45 b3       	in	r20, 0x15	; 21
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	40 97       	sbiw	r24, 0x10	; 16
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	b9 01       	movw	r22, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <writePin+0xd0>
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	8a 95       	dec	r24
 520:	e2 f7       	brpl	.-8      	; 0x51a <writePin+0xcc>
 522:	cb 01       	movw	r24, r22
 524:	80 95       	com	r24
 526:	84 23       	and	r24, r20
 528:	85 bb       	out	0x15, r24	; 21
 52a:	08 95       	ret
 52c:	98 ee       	ldi	r25, 0xE8	; 232
 52e:	98 0f       	add	r25, r24
 530:	98 30       	cpi	r25, 0x08	; 8
 532:	10 f5       	brcc	.+68     	; 0x578 <writePin+0x12a>
 534:	61 30       	cpi	r22, 0x01	; 1
 536:	79 f4       	brne	.+30     	; 0x556 <writePin+0x108>
 538:	42 b3       	in	r20, 0x12	; 18
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	48 97       	sbiw	r24, 0x18	; 24
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	b9 01       	movw	r22, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <writePin+0xfc>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	8a 95       	dec	r24
 54c:	e2 f7       	brpl	.-8      	; 0x546 <writePin+0xf8>
 54e:	cb 01       	movw	r24, r22
 550:	84 2b       	or	r24, r20
 552:	82 bb       	out	0x12, r24	; 18
 554:	08 95       	ret
 556:	61 11       	cpse	r22, r1
 558:	0f c0       	rjmp	.+30     	; 0x578 <writePin+0x12a>
 55a:	42 b3       	in	r20, 0x12	; 18
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	48 97       	sbiw	r24, 0x18	; 24
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	b9 01       	movw	r22, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <writePin+0x11e>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	8a 95       	dec	r24
 56e:	e2 f7       	brpl	.-8      	; 0x568 <writePin+0x11a>
 570:	cb 01       	movw	r24, r22
 572:	80 95       	com	r24
 574:	84 23       	and	r24, r20
 576:	82 bb       	out	0x12, r24	; 18
 578:	08 95       	ret

0000057a <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 57a:	41 30       	cpi	r20, 0x01	; 1
 57c:	29 f4       	brne	.+10     	; 0x588 <writePins+0xe>
		SETBits(*port,mask);
 57e:	fc 01       	movw	r30, r24
 580:	20 81       	ld	r18, Z
 582:	62 2b       	or	r22, r18
 584:	60 83       	st	Z, r22
 586:	08 95       	ret
	else if(logic==LOW)
 588:	41 11       	cpse	r20, r1
 58a:	05 c0       	rjmp	.+10     	; 0x596 <writePins+0x1c>
		CLRBits(*port,mask);
 58c:	fc 01       	movw	r30, r24
 58e:	20 81       	ld	r18, Z
 590:	60 95       	com	r22
 592:	62 23       	and	r22, r18
 594:	60 83       	st	Z, r22
 596:	08 95       	ret

00000598 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 598:	41 30       	cpi	r20, 0x01	; 1
 59a:	29 f4       	brne	.+10     	; 0x5a6 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 59c:	fc 01       	movw	r30, r24
 59e:	20 81       	ld	r18, Z
 5a0:	62 2b       	or	r22, r18
 5a2:	60 83       	st	Z, r22
 5a4:	08 95       	ret
	else if(direction == INPUT)
 5a6:	41 11       	cpse	r20, r1
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 81       	ld	r18, Z
 5ae:	60 95       	com	r22
 5b0:	62 23       	and	r22, r18
 5b2:	60 83       	st	Z, r22
 5b4:	08 95       	ret

000005b6 <__vector_13>:
void UART_TX(u8 data)
{
	UDR=data;
	while(GETBit(UCSRA,UDRE)!=1);	
		
}
 5b6:	1f 92       	push	r1
 5b8:	0f 92       	push	r0
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	8f 93       	push	r24
 5c2:	9f 93       	push	r25
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
 5c8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 5cc:	e8 2f       	mov	r30, r24
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	9c b1       	in	r25, 0x0c	; 12
 5d2:	eb 59       	subi	r30, 0x9B	; 155
 5d4:	ff 4f       	sbci	r31, 0xFF	; 255
 5d6:	90 83       	st	Z, r25
 5d8:	8f 5f       	subi	r24, 0xFF	; 255
 5da:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 5de:	85 30       	cpi	r24, 0x05	; 5
 5e0:	19 f4       	brne	.+6      	; 0x5e8 <__vector_13+0x32>
 5e2:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <gps+0x6>
 5e6:	f8 94       	cli
 5e8:	ff 91       	pop	r31
 5ea:	ef 91       	pop	r30
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <UART_INIT>:
 5fa:	a0 e0       	ldi	r26, 0x00	; 0
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	aa 1f       	adc	r26, r26
 604:	bb 1f       	adc	r27, r27
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	aa 1f       	adc	r26, r26
 60c:	bb 1f       	adc	r27, r27
 60e:	9c 01       	movw	r18, r24
 610:	ad 01       	movw	r20, r26
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	44 1f       	adc	r20, r20
 618:	55 1f       	adc	r21, r21
 61a:	22 0f       	add	r18, r18
 61c:	33 1f       	adc	r19, r19
 61e:	44 1f       	adc	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	74 e2       	ldi	r23, 0x24	; 36
 626:	84 ef       	ldi	r24, 0xF4	; 244
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 2a 03 	call	0x654	; 0x654 <__udivmodsi4>
 62e:	21 50       	subi	r18, 0x01	; 1
 630:	31 09       	sbc	r19, r1
 632:	30 bd       	out	0x20, r19	; 32
 634:	29 b9       	out	0x09, r18	; 9
 636:	8a b1       	in	r24, 0x0a	; 10
 638:	88 60       	ori	r24, 0x08	; 8
 63a:	8a b9       	out	0x0a, r24	; 10
 63c:	8a b1       	in	r24, 0x0a	; 10
 63e:	80 61       	ori	r24, 0x10	; 16
 640:	8a b9       	out	0x0a, r24	; 10
 642:	86 e8       	ldi	r24, 0x86	; 134
 644:	80 bd       	out	0x20, r24	; 32
 646:	0e 94 20 02 	call	0x440	; 0x440 <GLOBAL_INT_EN>
 64a:	08 95       	ret

0000064c <UART_RX>:

u8 UART_RX(void)
{
	while(!GETBit(UCSRA,RXC));
 64c:	5f 9b       	sbis	0x0b, 7	; 11
 64e:	fe cf       	rjmp	.-4      	; 0x64c <UART_RX>
	return UDR;	
 650:	8c b1       	in	r24, 0x0c	; 12
 652:	08 95       	ret

00000654 <__udivmodsi4>:
 654:	a1 e2       	ldi	r26, 0x21	; 33
 656:	1a 2e       	mov	r1, r26
 658:	aa 1b       	sub	r26, r26
 65a:	bb 1b       	sub	r27, r27
 65c:	fd 01       	movw	r30, r26
 65e:	0d c0       	rjmp	.+26     	; 0x67a <__udivmodsi4_ep>

00000660 <__udivmodsi4_loop>:
 660:	aa 1f       	adc	r26, r26
 662:	bb 1f       	adc	r27, r27
 664:	ee 1f       	adc	r30, r30
 666:	ff 1f       	adc	r31, r31
 668:	a2 17       	cp	r26, r18
 66a:	b3 07       	cpc	r27, r19
 66c:	e4 07       	cpc	r30, r20
 66e:	f5 07       	cpc	r31, r21
 670:	20 f0       	brcs	.+8      	; 0x67a <__udivmodsi4_ep>
 672:	a2 1b       	sub	r26, r18
 674:	b3 0b       	sbc	r27, r19
 676:	e4 0b       	sbc	r30, r20
 678:	f5 0b       	sbc	r31, r21

0000067a <__udivmodsi4_ep>:
 67a:	66 1f       	adc	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	1a 94       	dec	r1
 684:	69 f7       	brne	.-38     	; 0x660 <__udivmodsi4_loop>
 686:	60 95       	com	r22
 688:	70 95       	com	r23
 68a:	80 95       	com	r24
 68c:	90 95       	com	r25
 68e:	9b 01       	movw	r18, r22
 690:	ac 01       	movw	r20, r24
 692:	bd 01       	movw	r22, r26
 694:	cf 01       	movw	r24, r30
 696:	08 95       	ret

00000698 <atoi>:
 698:	fc 01       	movw	r30, r24
 69a:	88 27       	eor	r24, r24
 69c:	99 27       	eor	r25, r25
 69e:	e8 94       	clt
 6a0:	21 91       	ld	r18, Z+
 6a2:	20 32       	cpi	r18, 0x20	; 32
 6a4:	e9 f3       	breq	.-6      	; 0x6a0 <atoi+0x8>
 6a6:	29 30       	cpi	r18, 0x09	; 9
 6a8:	10 f0       	brcs	.+4      	; 0x6ae <atoi+0x16>
 6aa:	2e 30       	cpi	r18, 0x0E	; 14
 6ac:	c8 f3       	brcs	.-14     	; 0x6a0 <atoi+0x8>
 6ae:	2b 32       	cpi	r18, 0x2B	; 43
 6b0:	41 f0       	breq	.+16     	; 0x6c2 <atoi+0x2a>
 6b2:	2d 32       	cpi	r18, 0x2D	; 45
 6b4:	39 f4       	brne	.+14     	; 0x6c4 <atoi+0x2c>
 6b6:	68 94       	set
 6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <atoi+0x2a>
 6ba:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__mulhi_const_10>
 6be:	82 0f       	add	r24, r18
 6c0:	91 1d       	adc	r25, r1
 6c2:	21 91       	ld	r18, Z+
 6c4:	20 53       	subi	r18, 0x30	; 48
 6c6:	2a 30       	cpi	r18, 0x0A	; 10
 6c8:	c0 f3       	brcs	.-16     	; 0x6ba <atoi+0x22>
 6ca:	1e f4       	brtc	.+6      	; 0x6d2 <atoi+0x3a>
 6cc:	90 95       	com	r25
 6ce:	81 95       	neg	r24
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	08 95       	ret

000006d4 <__mulhi_const_10>:
 6d4:	7a e0       	ldi	r23, 0x0A	; 10
 6d6:	97 9f       	mul	r25, r23
 6d8:	90 2d       	mov	r25, r0
 6da:	87 9f       	mul	r24, r23
 6dc:	80 2d       	mov	r24, r0
 6de:	91 0d       	add	r25, r1
 6e0:	11 24       	eor	r1, r1
 6e2:	08 95       	ret

000006e4 <sprintf>:
 6e4:	ae e0       	ldi	r26, 0x0E	; 14
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	e8 e7       	ldi	r30, 0x78	; 120
 6ea:	f3 e0       	ldi	r31, 0x03	; 3
 6ec:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__prologue_saves__+0x1c>
 6f0:	0d 89       	ldd	r16, Y+21	; 0x15
 6f2:	1e 89       	ldd	r17, Y+22	; 0x16
 6f4:	86 e0       	ldi	r24, 0x06	; 6
 6f6:	8c 83       	std	Y+4, r24	; 0x04
 6f8:	1a 83       	std	Y+2, r17	; 0x02
 6fa:	09 83       	std	Y+1, r16	; 0x01
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	9f e7       	ldi	r25, 0x7F	; 127
 700:	9e 83       	std	Y+6, r25	; 0x06
 702:	8d 83       	std	Y+5, r24	; 0x05
 704:	ae 01       	movw	r20, r28
 706:	47 5e       	subi	r20, 0xE7	; 231
 708:	5f 4f       	sbci	r21, 0xFF	; 255
 70a:	6f 89       	ldd	r22, Y+23	; 0x17
 70c:	78 8d       	ldd	r23, Y+24	; 0x18
 70e:	ce 01       	movw	r24, r28
 710:	01 96       	adiw	r24, 0x01	; 1
 712:	0e 94 94 03 	call	0x728	; 0x728 <vfprintf>
 716:	ef 81       	ldd	r30, Y+7	; 0x07
 718:	f8 85       	ldd	r31, Y+8	; 0x08
 71a:	e0 0f       	add	r30, r16
 71c:	f1 1f       	adc	r31, r17
 71e:	10 82       	st	Z, r1
 720:	2e 96       	adiw	r28, 0x0e	; 14
 722:	e4 e0       	ldi	r30, 0x04	; 4
 724:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__epilogue_restores__+0x1c>

00000728 <vfprintf>:
 728:	ab e0       	ldi	r26, 0x0B	; 11
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	ea e9       	ldi	r30, 0x9A	; 154
 72e:	f3 e0       	ldi	r31, 0x03	; 3
 730:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__prologue_saves__>
 734:	6c 01       	movw	r12, r24
 736:	7b 01       	movw	r14, r22
 738:	8a 01       	movw	r16, r20
 73a:	fc 01       	movw	r30, r24
 73c:	17 82       	std	Z+7, r1	; 0x07
 73e:	16 82       	std	Z+6, r1	; 0x06
 740:	83 81       	ldd	r24, Z+3	; 0x03
 742:	81 ff       	sbrs	r24, 1
 744:	cc c1       	rjmp	.+920    	; 0xade <__stack+0x27f>
 746:	ce 01       	movw	r24, r28
 748:	01 96       	adiw	r24, 0x01	; 1
 74a:	3c 01       	movw	r6, r24
 74c:	f6 01       	movw	r30, r12
 74e:	93 81       	ldd	r25, Z+3	; 0x03
 750:	f7 01       	movw	r30, r14
 752:	93 fd       	sbrc	r25, 3
 754:	85 91       	lpm	r24, Z+
 756:	93 ff       	sbrs	r25, 3
 758:	81 91       	ld	r24, Z+
 75a:	7f 01       	movw	r14, r30
 75c:	88 23       	and	r24, r24
 75e:	09 f4       	brne	.+2      	; 0x762 <vfprintf+0x3a>
 760:	ba c1       	rjmp	.+884    	; 0xad6 <__stack+0x277>
 762:	85 32       	cpi	r24, 0x25	; 37
 764:	39 f4       	brne	.+14     	; 0x774 <vfprintf+0x4c>
 766:	93 fd       	sbrc	r25, 3
 768:	85 91       	lpm	r24, Z+
 76a:	93 ff       	sbrs	r25, 3
 76c:	81 91       	ld	r24, Z+
 76e:	7f 01       	movw	r14, r30
 770:	85 32       	cpi	r24, 0x25	; 37
 772:	29 f4       	brne	.+10     	; 0x77e <vfprintf+0x56>
 774:	b6 01       	movw	r22, r12
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 77c:	e7 cf       	rjmp	.-50     	; 0x74c <vfprintf+0x24>
 77e:	91 2c       	mov	r9, r1
 780:	21 2c       	mov	r2, r1
 782:	31 2c       	mov	r3, r1
 784:	ff e1       	ldi	r31, 0x1F	; 31
 786:	f3 15       	cp	r31, r3
 788:	d8 f0       	brcs	.+54     	; 0x7c0 <vfprintf+0x98>
 78a:	8b 32       	cpi	r24, 0x2B	; 43
 78c:	79 f0       	breq	.+30     	; 0x7ac <vfprintf+0x84>
 78e:	38 f4       	brcc	.+14     	; 0x79e <vfprintf+0x76>
 790:	80 32       	cpi	r24, 0x20	; 32
 792:	79 f0       	breq	.+30     	; 0x7b2 <vfprintf+0x8a>
 794:	83 32       	cpi	r24, 0x23	; 35
 796:	a1 f4       	brne	.+40     	; 0x7c0 <vfprintf+0x98>
 798:	23 2d       	mov	r18, r3
 79a:	20 61       	ori	r18, 0x10	; 16
 79c:	1d c0       	rjmp	.+58     	; 0x7d8 <vfprintf+0xb0>
 79e:	8d 32       	cpi	r24, 0x2D	; 45
 7a0:	61 f0       	breq	.+24     	; 0x7ba <vfprintf+0x92>
 7a2:	80 33       	cpi	r24, 0x30	; 48
 7a4:	69 f4       	brne	.+26     	; 0x7c0 <vfprintf+0x98>
 7a6:	23 2d       	mov	r18, r3
 7a8:	21 60       	ori	r18, 0x01	; 1
 7aa:	16 c0       	rjmp	.+44     	; 0x7d8 <vfprintf+0xb0>
 7ac:	83 2d       	mov	r24, r3
 7ae:	82 60       	ori	r24, 0x02	; 2
 7b0:	38 2e       	mov	r3, r24
 7b2:	e3 2d       	mov	r30, r3
 7b4:	e4 60       	ori	r30, 0x04	; 4
 7b6:	3e 2e       	mov	r3, r30
 7b8:	2a c0       	rjmp	.+84     	; 0x80e <vfprintf+0xe6>
 7ba:	f3 2d       	mov	r31, r3
 7bc:	f8 60       	ori	r31, 0x08	; 8
 7be:	1d c0       	rjmp	.+58     	; 0x7fa <vfprintf+0xd2>
 7c0:	37 fc       	sbrc	r3, 7
 7c2:	2d c0       	rjmp	.+90     	; 0x81e <vfprintf+0xf6>
 7c4:	20 ed       	ldi	r18, 0xD0	; 208
 7c6:	28 0f       	add	r18, r24
 7c8:	2a 30       	cpi	r18, 0x0A	; 10
 7ca:	40 f0       	brcs	.+16     	; 0x7dc <vfprintf+0xb4>
 7cc:	8e 32       	cpi	r24, 0x2E	; 46
 7ce:	b9 f4       	brne	.+46     	; 0x7fe <vfprintf+0xd6>
 7d0:	36 fc       	sbrc	r3, 6
 7d2:	81 c1       	rjmp	.+770    	; 0xad6 <__stack+0x277>
 7d4:	23 2d       	mov	r18, r3
 7d6:	20 64       	ori	r18, 0x40	; 64
 7d8:	32 2e       	mov	r3, r18
 7da:	19 c0       	rjmp	.+50     	; 0x80e <vfprintf+0xe6>
 7dc:	36 fe       	sbrs	r3, 6
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0xc4>
 7e0:	8a e0       	ldi	r24, 0x0A	; 10
 7e2:	98 9e       	mul	r9, r24
 7e4:	20 0d       	add	r18, r0
 7e6:	11 24       	eor	r1, r1
 7e8:	92 2e       	mov	r9, r18
 7ea:	11 c0       	rjmp	.+34     	; 0x80e <vfprintf+0xe6>
 7ec:	ea e0       	ldi	r30, 0x0A	; 10
 7ee:	2e 9e       	mul	r2, r30
 7f0:	20 0d       	add	r18, r0
 7f2:	11 24       	eor	r1, r1
 7f4:	22 2e       	mov	r2, r18
 7f6:	f3 2d       	mov	r31, r3
 7f8:	f0 62       	ori	r31, 0x20	; 32
 7fa:	3f 2e       	mov	r3, r31
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <vfprintf+0xe6>
 7fe:	8c 36       	cpi	r24, 0x6C	; 108
 800:	21 f4       	brne	.+8      	; 0x80a <vfprintf+0xe2>
 802:	83 2d       	mov	r24, r3
 804:	80 68       	ori	r24, 0x80	; 128
 806:	38 2e       	mov	r3, r24
 808:	02 c0       	rjmp	.+4      	; 0x80e <vfprintf+0xe6>
 80a:	88 36       	cpi	r24, 0x68	; 104
 80c:	41 f4       	brne	.+16     	; 0x81e <vfprintf+0xf6>
 80e:	f7 01       	movw	r30, r14
 810:	93 fd       	sbrc	r25, 3
 812:	85 91       	lpm	r24, Z+
 814:	93 ff       	sbrs	r25, 3
 816:	81 91       	ld	r24, Z+
 818:	7f 01       	movw	r14, r30
 81a:	81 11       	cpse	r24, r1
 81c:	b3 cf       	rjmp	.-154    	; 0x784 <vfprintf+0x5c>
 81e:	98 2f       	mov	r25, r24
 820:	9f 7d       	andi	r25, 0xDF	; 223
 822:	95 54       	subi	r25, 0x45	; 69
 824:	93 30       	cpi	r25, 0x03	; 3
 826:	28 f4       	brcc	.+10     	; 0x832 <vfprintf+0x10a>
 828:	0c 5f       	subi	r16, 0xFC	; 252
 82a:	1f 4f       	sbci	r17, 0xFF	; 255
 82c:	9f e3       	ldi	r25, 0x3F	; 63
 82e:	99 83       	std	Y+1, r25	; 0x01
 830:	0d c0       	rjmp	.+26     	; 0x84c <vfprintf+0x124>
 832:	83 36       	cpi	r24, 0x63	; 99
 834:	31 f0       	breq	.+12     	; 0x842 <vfprintf+0x11a>
 836:	83 37       	cpi	r24, 0x73	; 115
 838:	71 f0       	breq	.+28     	; 0x856 <vfprintf+0x12e>
 83a:	83 35       	cpi	r24, 0x53	; 83
 83c:	09 f0       	breq	.+2      	; 0x840 <vfprintf+0x118>
 83e:	59 c0       	rjmp	.+178    	; 0x8f2 <__stack+0x93>
 840:	21 c0       	rjmp	.+66     	; 0x884 <__stack+0x25>
 842:	f8 01       	movw	r30, r16
 844:	80 81       	ld	r24, Z
 846:	89 83       	std	Y+1, r24	; 0x01
 848:	0e 5f       	subi	r16, 0xFE	; 254
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	88 24       	eor	r8, r8
 84e:	83 94       	inc	r8
 850:	91 2c       	mov	r9, r1
 852:	53 01       	movw	r10, r6
 854:	13 c0       	rjmp	.+38     	; 0x87c <__stack+0x1d>
 856:	28 01       	movw	r4, r16
 858:	f2 e0       	ldi	r31, 0x02	; 2
 85a:	4f 0e       	add	r4, r31
 85c:	51 1c       	adc	r5, r1
 85e:	f8 01       	movw	r30, r16
 860:	a0 80       	ld	r10, Z
 862:	b1 80       	ldd	r11, Z+1	; 0x01
 864:	36 fe       	sbrs	r3, 6
 866:	03 c0       	rjmp	.+6      	; 0x86e <__stack+0xf>
 868:	69 2d       	mov	r22, r9
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	6f ef       	ldi	r22, 0xFF	; 255
 870:	7f ef       	ldi	r23, 0xFF	; 255
 872:	c5 01       	movw	r24, r10
 874:	0e 94 80 05 	call	0xb00	; 0xb00 <strnlen>
 878:	4c 01       	movw	r8, r24
 87a:	82 01       	movw	r16, r4
 87c:	f3 2d       	mov	r31, r3
 87e:	ff 77       	andi	r31, 0x7F	; 127
 880:	3f 2e       	mov	r3, r31
 882:	16 c0       	rjmp	.+44     	; 0x8b0 <__stack+0x51>
 884:	28 01       	movw	r4, r16
 886:	22 e0       	ldi	r18, 0x02	; 2
 888:	42 0e       	add	r4, r18
 88a:	51 1c       	adc	r5, r1
 88c:	f8 01       	movw	r30, r16
 88e:	a0 80       	ld	r10, Z
 890:	b1 80       	ldd	r11, Z+1	; 0x01
 892:	36 fe       	sbrs	r3, 6
 894:	03 c0       	rjmp	.+6      	; 0x89c <__stack+0x3d>
 896:	69 2d       	mov	r22, r9
 898:	70 e0       	ldi	r23, 0x00	; 0
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
 89c:	6f ef       	ldi	r22, 0xFF	; 255
 89e:	7f ef       	ldi	r23, 0xFF	; 255
 8a0:	c5 01       	movw	r24, r10
 8a2:	0e 94 75 05 	call	0xaea	; 0xaea <strnlen_P>
 8a6:	4c 01       	movw	r8, r24
 8a8:	f3 2d       	mov	r31, r3
 8aa:	f0 68       	ori	r31, 0x80	; 128
 8ac:	3f 2e       	mov	r3, r31
 8ae:	82 01       	movw	r16, r4
 8b0:	33 fc       	sbrc	r3, 3
 8b2:	1b c0       	rjmp	.+54     	; 0x8ea <__stack+0x8b>
 8b4:	82 2d       	mov	r24, r2
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	88 16       	cp	r8, r24
 8ba:	99 06       	cpc	r9, r25
 8bc:	b0 f4       	brcc	.+44     	; 0x8ea <__stack+0x8b>
 8be:	b6 01       	movw	r22, r12
 8c0:	80 e2       	ldi	r24, 0x20	; 32
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 8c8:	2a 94       	dec	r2
 8ca:	f4 cf       	rjmp	.-24     	; 0x8b4 <__stack+0x55>
 8cc:	f5 01       	movw	r30, r10
 8ce:	37 fc       	sbrc	r3, 7
 8d0:	85 91       	lpm	r24, Z+
 8d2:	37 fe       	sbrs	r3, 7
 8d4:	81 91       	ld	r24, Z+
 8d6:	5f 01       	movw	r10, r30
 8d8:	b6 01       	movw	r22, r12
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 8e0:	21 10       	cpse	r2, r1
 8e2:	2a 94       	dec	r2
 8e4:	21 e0       	ldi	r18, 0x01	; 1
 8e6:	82 1a       	sub	r8, r18
 8e8:	91 08       	sbc	r9, r1
 8ea:	81 14       	cp	r8, r1
 8ec:	91 04       	cpc	r9, r1
 8ee:	71 f7       	brne	.-36     	; 0x8cc <__stack+0x6d>
 8f0:	e8 c0       	rjmp	.+464    	; 0xac2 <__stack+0x263>
 8f2:	84 36       	cpi	r24, 0x64	; 100
 8f4:	11 f0       	breq	.+4      	; 0x8fa <__stack+0x9b>
 8f6:	89 36       	cpi	r24, 0x69	; 105
 8f8:	41 f5       	brne	.+80     	; 0x94a <__stack+0xeb>
 8fa:	f8 01       	movw	r30, r16
 8fc:	37 fe       	sbrs	r3, 7
 8fe:	07 c0       	rjmp	.+14     	; 0x90e <__stack+0xaf>
 900:	60 81       	ld	r22, Z
 902:	71 81       	ldd	r23, Z+1	; 0x01
 904:	82 81       	ldd	r24, Z+2	; 0x02
 906:	93 81       	ldd	r25, Z+3	; 0x03
 908:	0c 5f       	subi	r16, 0xFC	; 252
 90a:	1f 4f       	sbci	r17, 0xFF	; 255
 90c:	08 c0       	rjmp	.+16     	; 0x91e <__stack+0xbf>
 90e:	60 81       	ld	r22, Z
 910:	71 81       	ldd	r23, Z+1	; 0x01
 912:	07 2e       	mov	r0, r23
 914:	00 0c       	add	r0, r0
 916:	88 0b       	sbc	r24, r24
 918:	99 0b       	sbc	r25, r25
 91a:	0e 5f       	subi	r16, 0xFE	; 254
 91c:	1f 4f       	sbci	r17, 0xFF	; 255
 91e:	f3 2d       	mov	r31, r3
 920:	ff 76       	andi	r31, 0x6F	; 111
 922:	3f 2e       	mov	r3, r31
 924:	97 ff       	sbrs	r25, 7
 926:	09 c0       	rjmp	.+18     	; 0x93a <__stack+0xdb>
 928:	90 95       	com	r25
 92a:	80 95       	com	r24
 92c:	70 95       	com	r23
 92e:	61 95       	neg	r22
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	8f 4f       	sbci	r24, 0xFF	; 255
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	f0 68       	ori	r31, 0x80	; 128
 938:	3f 2e       	mov	r3, r31
 93a:	2a e0       	ldi	r18, 0x0A	; 10
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	a3 01       	movw	r20, r6
 940:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__ultoa_invert>
 944:	88 2e       	mov	r8, r24
 946:	86 18       	sub	r8, r6
 948:	45 c0       	rjmp	.+138    	; 0x9d4 <__stack+0x175>
 94a:	85 37       	cpi	r24, 0x75	; 117
 94c:	31 f4       	brne	.+12     	; 0x95a <__stack+0xfb>
 94e:	23 2d       	mov	r18, r3
 950:	2f 7e       	andi	r18, 0xEF	; 239
 952:	b2 2e       	mov	r11, r18
 954:	2a e0       	ldi	r18, 0x0A	; 10
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	25 c0       	rjmp	.+74     	; 0x9a4 <__stack+0x145>
 95a:	93 2d       	mov	r25, r3
 95c:	99 7f       	andi	r25, 0xF9	; 249
 95e:	b9 2e       	mov	r11, r25
 960:	8f 36       	cpi	r24, 0x6F	; 111
 962:	c1 f0       	breq	.+48     	; 0x994 <__stack+0x135>
 964:	18 f4       	brcc	.+6      	; 0x96c <__stack+0x10d>
 966:	88 35       	cpi	r24, 0x58	; 88
 968:	79 f0       	breq	.+30     	; 0x988 <__stack+0x129>
 96a:	b5 c0       	rjmp	.+362    	; 0xad6 <__stack+0x277>
 96c:	80 37       	cpi	r24, 0x70	; 112
 96e:	19 f0       	breq	.+6      	; 0x976 <__stack+0x117>
 970:	88 37       	cpi	r24, 0x78	; 120
 972:	21 f0       	breq	.+8      	; 0x97c <__stack+0x11d>
 974:	b0 c0       	rjmp	.+352    	; 0xad6 <__stack+0x277>
 976:	e9 2f       	mov	r30, r25
 978:	e0 61       	ori	r30, 0x10	; 16
 97a:	be 2e       	mov	r11, r30
 97c:	b4 fe       	sbrs	r11, 4
 97e:	0d c0       	rjmp	.+26     	; 0x99a <__stack+0x13b>
 980:	fb 2d       	mov	r31, r11
 982:	f4 60       	ori	r31, 0x04	; 4
 984:	bf 2e       	mov	r11, r31
 986:	09 c0       	rjmp	.+18     	; 0x99a <__stack+0x13b>
 988:	34 fe       	sbrs	r3, 4
 98a:	0a c0       	rjmp	.+20     	; 0x9a0 <__stack+0x141>
 98c:	29 2f       	mov	r18, r25
 98e:	26 60       	ori	r18, 0x06	; 6
 990:	b2 2e       	mov	r11, r18
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <__stack+0x141>
 994:	28 e0       	ldi	r18, 0x08	; 8
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	05 c0       	rjmp	.+10     	; 0x9a4 <__stack+0x145>
 99a:	20 e1       	ldi	r18, 0x10	; 16
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__stack+0x145>
 9a0:	20 e1       	ldi	r18, 0x10	; 16
 9a2:	32 e0       	ldi	r19, 0x02	; 2
 9a4:	f8 01       	movw	r30, r16
 9a6:	b7 fe       	sbrs	r11, 7
 9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__stack+0x159>
 9aa:	60 81       	ld	r22, Z
 9ac:	71 81       	ldd	r23, Z+1	; 0x01
 9ae:	82 81       	ldd	r24, Z+2	; 0x02
 9b0:	93 81       	ldd	r25, Z+3	; 0x03
 9b2:	0c 5f       	subi	r16, 0xFC	; 252
 9b4:	1f 4f       	sbci	r17, 0xFF	; 255
 9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <__stack+0x165>
 9b8:	60 81       	ld	r22, Z
 9ba:	71 81       	ldd	r23, Z+1	; 0x01
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 5f       	subi	r16, 0xFE	; 254
 9c2:	1f 4f       	sbci	r17, 0xFF	; 255
 9c4:	a3 01       	movw	r20, r6
 9c6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__ultoa_invert>
 9ca:	88 2e       	mov	r8, r24
 9cc:	86 18       	sub	r8, r6
 9ce:	fb 2d       	mov	r31, r11
 9d0:	ff 77       	andi	r31, 0x7F	; 127
 9d2:	3f 2e       	mov	r3, r31
 9d4:	36 fe       	sbrs	r3, 6
 9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <__stack+0x193>
 9d8:	23 2d       	mov	r18, r3
 9da:	2e 7f       	andi	r18, 0xFE	; 254
 9dc:	a2 2e       	mov	r10, r18
 9de:	89 14       	cp	r8, r9
 9e0:	58 f4       	brcc	.+22     	; 0x9f8 <__stack+0x199>
 9e2:	34 fe       	sbrs	r3, 4
 9e4:	0b c0       	rjmp	.+22     	; 0x9fc <__stack+0x19d>
 9e6:	32 fc       	sbrc	r3, 2
 9e8:	09 c0       	rjmp	.+18     	; 0x9fc <__stack+0x19d>
 9ea:	83 2d       	mov	r24, r3
 9ec:	8e 7e       	andi	r24, 0xEE	; 238
 9ee:	a8 2e       	mov	r10, r24
 9f0:	05 c0       	rjmp	.+10     	; 0x9fc <__stack+0x19d>
 9f2:	b8 2c       	mov	r11, r8
 9f4:	a3 2c       	mov	r10, r3
 9f6:	03 c0       	rjmp	.+6      	; 0x9fe <__stack+0x19f>
 9f8:	b8 2c       	mov	r11, r8
 9fa:	01 c0       	rjmp	.+2      	; 0x9fe <__stack+0x19f>
 9fc:	b9 2c       	mov	r11, r9
 9fe:	a4 fe       	sbrs	r10, 4
 a00:	0f c0       	rjmp	.+30     	; 0xa20 <__stack+0x1c1>
 a02:	fe 01       	movw	r30, r28
 a04:	e8 0d       	add	r30, r8
 a06:	f1 1d       	adc	r31, r1
 a08:	80 81       	ld	r24, Z
 a0a:	80 33       	cpi	r24, 0x30	; 48
 a0c:	21 f4       	brne	.+8      	; 0xa16 <__stack+0x1b7>
 a0e:	9a 2d       	mov	r25, r10
 a10:	99 7e       	andi	r25, 0xE9	; 233
 a12:	a9 2e       	mov	r10, r25
 a14:	09 c0       	rjmp	.+18     	; 0xa28 <__stack+0x1c9>
 a16:	a2 fe       	sbrs	r10, 2
 a18:	06 c0       	rjmp	.+12     	; 0xa26 <__stack+0x1c7>
 a1a:	b3 94       	inc	r11
 a1c:	b3 94       	inc	r11
 a1e:	04 c0       	rjmp	.+8      	; 0xa28 <__stack+0x1c9>
 a20:	8a 2d       	mov	r24, r10
 a22:	86 78       	andi	r24, 0x86	; 134
 a24:	09 f0       	breq	.+2      	; 0xa28 <__stack+0x1c9>
 a26:	b3 94       	inc	r11
 a28:	a3 fc       	sbrc	r10, 3
 a2a:	11 c0       	rjmp	.+34     	; 0xa4e <__stack+0x1ef>
 a2c:	a0 fe       	sbrs	r10, 0
 a2e:	06 c0       	rjmp	.+12     	; 0xa3c <__stack+0x1dd>
 a30:	b2 14       	cp	r11, r2
 a32:	88 f4       	brcc	.+34     	; 0xa56 <__stack+0x1f7>
 a34:	28 0c       	add	r2, r8
 a36:	92 2c       	mov	r9, r2
 a38:	9b 18       	sub	r9, r11
 a3a:	0e c0       	rjmp	.+28     	; 0xa58 <__stack+0x1f9>
 a3c:	b2 14       	cp	r11, r2
 a3e:	60 f4       	brcc	.+24     	; 0xa58 <__stack+0x1f9>
 a40:	b6 01       	movw	r22, r12
 a42:	80 e2       	ldi	r24, 0x20	; 32
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 a4a:	b3 94       	inc	r11
 a4c:	f7 cf       	rjmp	.-18     	; 0xa3c <__stack+0x1dd>
 a4e:	b2 14       	cp	r11, r2
 a50:	18 f4       	brcc	.+6      	; 0xa58 <__stack+0x1f9>
 a52:	2b 18       	sub	r2, r11
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <__stack+0x1fb>
 a56:	98 2c       	mov	r9, r8
 a58:	21 2c       	mov	r2, r1
 a5a:	a4 fe       	sbrs	r10, 4
 a5c:	10 c0       	rjmp	.+32     	; 0xa7e <__stack+0x21f>
 a5e:	b6 01       	movw	r22, r12
 a60:	80 e3       	ldi	r24, 0x30	; 48
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 a68:	a2 fe       	sbrs	r10, 2
 a6a:	17 c0       	rjmp	.+46     	; 0xa9a <__stack+0x23b>
 a6c:	a1 fc       	sbrc	r10, 1
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <__stack+0x217>
 a70:	88 e7       	ldi	r24, 0x78	; 120
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <__stack+0x21b>
 a76:	88 e5       	ldi	r24, 0x58	; 88
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	b6 01       	movw	r22, r12
 a7c:	0c c0       	rjmp	.+24     	; 0xa96 <__stack+0x237>
 a7e:	8a 2d       	mov	r24, r10
 a80:	86 78       	andi	r24, 0x86	; 134
 a82:	59 f0       	breq	.+22     	; 0xa9a <__stack+0x23b>
 a84:	a1 fe       	sbrs	r10, 1
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <__stack+0x22d>
 a88:	8b e2       	ldi	r24, 0x2B	; 43
 a8a:	01 c0       	rjmp	.+2      	; 0xa8e <__stack+0x22f>
 a8c:	80 e2       	ldi	r24, 0x20	; 32
 a8e:	a7 fc       	sbrc	r10, 7
 a90:	8d e2       	ldi	r24, 0x2D	; 45
 a92:	b6 01       	movw	r22, r12
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 a9a:	89 14       	cp	r8, r9
 a9c:	38 f4       	brcc	.+14     	; 0xaac <__stack+0x24d>
 a9e:	b6 01       	movw	r22, r12
 aa0:	80 e3       	ldi	r24, 0x30	; 48
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 aa8:	9a 94       	dec	r9
 aaa:	f7 cf       	rjmp	.-18     	; 0xa9a <__stack+0x23b>
 aac:	8a 94       	dec	r8
 aae:	f3 01       	movw	r30, r6
 ab0:	e8 0d       	add	r30, r8
 ab2:	f1 1d       	adc	r31, r1
 ab4:	80 81       	ld	r24, Z
 ab6:	b6 01       	movw	r22, r12
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 abe:	81 10       	cpse	r8, r1
 ac0:	f5 cf       	rjmp	.-22     	; 0xaac <__stack+0x24d>
 ac2:	22 20       	and	r2, r2
 ac4:	09 f4       	brne	.+2      	; 0xac8 <__stack+0x269>
 ac6:	42 ce       	rjmp	.-892    	; 0x74c <vfprintf+0x24>
 ac8:	b6 01       	movw	r22, r12
 aca:	80 e2       	ldi	r24, 0x20	; 32
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 ad2:	2a 94       	dec	r2
 ad4:	f6 cf       	rjmp	.-20     	; 0xac2 <__stack+0x263>
 ad6:	f6 01       	movw	r30, r12
 ad8:	86 81       	ldd	r24, Z+6	; 0x06
 ada:	97 81       	ldd	r25, Z+7	; 0x07
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <__stack+0x283>
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	9f ef       	ldi	r25, 0xFF	; 255
 ae2:	2b 96       	adiw	r28, 0x0b	; 11
 ae4:	e2 e1       	ldi	r30, 0x12	; 18
 ae6:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__epilogue_restores__>

00000aea <strnlen_P>:
 aea:	fc 01       	movw	r30, r24
 aec:	05 90       	lpm	r0, Z+
 aee:	61 50       	subi	r22, 0x01	; 1
 af0:	70 40       	sbci	r23, 0x00	; 0
 af2:	01 10       	cpse	r0, r1
 af4:	d8 f7       	brcc	.-10     	; 0xaec <strnlen_P+0x2>
 af6:	80 95       	com	r24
 af8:	90 95       	com	r25
 afa:	8e 0f       	add	r24, r30
 afc:	9f 1f       	adc	r25, r31
 afe:	08 95       	ret

00000b00 <strnlen>:
 b00:	fc 01       	movw	r30, r24
 b02:	61 50       	subi	r22, 0x01	; 1
 b04:	70 40       	sbci	r23, 0x00	; 0
 b06:	01 90       	ld	r0, Z+
 b08:	01 10       	cpse	r0, r1
 b0a:	d8 f7       	brcc	.-10     	; 0xb02 <strnlen+0x2>
 b0c:	80 95       	com	r24
 b0e:	90 95       	com	r25
 b10:	8e 0f       	add	r24, r30
 b12:	9f 1f       	adc	r25, r31
 b14:	08 95       	ret

00000b16 <fputc>:
 b16:	0f 93       	push	r16
 b18:	1f 93       	push	r17
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
 b1e:	fb 01       	movw	r30, r22
 b20:	23 81       	ldd	r18, Z+3	; 0x03
 b22:	21 fd       	sbrc	r18, 1
 b24:	03 c0       	rjmp	.+6      	; 0xb2c <fputc+0x16>
 b26:	8f ef       	ldi	r24, 0xFF	; 255
 b28:	9f ef       	ldi	r25, 0xFF	; 255
 b2a:	2c c0       	rjmp	.+88     	; 0xb84 <fputc+0x6e>
 b2c:	22 ff       	sbrs	r18, 2
 b2e:	16 c0       	rjmp	.+44     	; 0xb5c <fputc+0x46>
 b30:	46 81       	ldd	r20, Z+6	; 0x06
 b32:	57 81       	ldd	r21, Z+7	; 0x07
 b34:	24 81       	ldd	r18, Z+4	; 0x04
 b36:	35 81       	ldd	r19, Z+5	; 0x05
 b38:	42 17       	cp	r20, r18
 b3a:	53 07       	cpc	r21, r19
 b3c:	44 f4       	brge	.+16     	; 0xb4e <fputc+0x38>
 b3e:	a0 81       	ld	r26, Z
 b40:	b1 81       	ldd	r27, Z+1	; 0x01
 b42:	9d 01       	movw	r18, r26
 b44:	2f 5f       	subi	r18, 0xFF	; 255
 b46:	3f 4f       	sbci	r19, 0xFF	; 255
 b48:	31 83       	std	Z+1, r19	; 0x01
 b4a:	20 83       	st	Z, r18
 b4c:	8c 93       	st	X, r24
 b4e:	26 81       	ldd	r18, Z+6	; 0x06
 b50:	37 81       	ldd	r19, Z+7	; 0x07
 b52:	2f 5f       	subi	r18, 0xFF	; 255
 b54:	3f 4f       	sbci	r19, 0xFF	; 255
 b56:	37 83       	std	Z+7, r19	; 0x07
 b58:	26 83       	std	Z+6, r18	; 0x06
 b5a:	14 c0       	rjmp	.+40     	; 0xb84 <fputc+0x6e>
 b5c:	8b 01       	movw	r16, r22
 b5e:	ec 01       	movw	r28, r24
 b60:	fb 01       	movw	r30, r22
 b62:	00 84       	ldd	r0, Z+8	; 0x08
 b64:	f1 85       	ldd	r31, Z+9	; 0x09
 b66:	e0 2d       	mov	r30, r0
 b68:	09 95       	icall
 b6a:	89 2b       	or	r24, r25
 b6c:	e1 f6       	brne	.-72     	; 0xb26 <fputc+0x10>
 b6e:	d8 01       	movw	r26, r16
 b70:	16 96       	adiw	r26, 0x06	; 6
 b72:	8d 91       	ld	r24, X+
 b74:	9c 91       	ld	r25, X
 b76:	17 97       	sbiw	r26, 0x07	; 7
 b78:	01 96       	adiw	r24, 0x01	; 1
 b7a:	17 96       	adiw	r26, 0x07	; 7
 b7c:	9c 93       	st	X, r25
 b7e:	8e 93       	st	-X, r24
 b80:	16 97       	sbiw	r26, 0x06	; 6
 b82:	ce 01       	movw	r24, r28
 b84:	df 91       	pop	r29
 b86:	cf 91       	pop	r28
 b88:	1f 91       	pop	r17
 b8a:	0f 91       	pop	r16
 b8c:	08 95       	ret

00000b8e <__ultoa_invert>:
 b8e:	fa 01       	movw	r30, r20
 b90:	aa 27       	eor	r26, r26
 b92:	28 30       	cpi	r18, 0x08	; 8
 b94:	51 f1       	breq	.+84     	; 0xbea <__ultoa_invert+0x5c>
 b96:	20 31       	cpi	r18, 0x10	; 16
 b98:	81 f1       	breq	.+96     	; 0xbfa <__ultoa_invert+0x6c>
 b9a:	e8 94       	clt
 b9c:	6f 93       	push	r22
 b9e:	6e 7f       	andi	r22, 0xFE	; 254
 ba0:	6e 5f       	subi	r22, 0xFE	; 254
 ba2:	7f 4f       	sbci	r23, 0xFF	; 255
 ba4:	8f 4f       	sbci	r24, 0xFF	; 255
 ba6:	9f 4f       	sbci	r25, 0xFF	; 255
 ba8:	af 4f       	sbci	r26, 0xFF	; 255
 baa:	b1 e0       	ldi	r27, 0x01	; 1
 bac:	3e d0       	rcall	.+124    	; 0xc2a <__ultoa_invert+0x9c>
 bae:	b4 e0       	ldi	r27, 0x04	; 4
 bb0:	3c d0       	rcall	.+120    	; 0xc2a <__ultoa_invert+0x9c>
 bb2:	67 0f       	add	r22, r23
 bb4:	78 1f       	adc	r23, r24
 bb6:	89 1f       	adc	r24, r25
 bb8:	9a 1f       	adc	r25, r26
 bba:	a1 1d       	adc	r26, r1
 bbc:	68 0f       	add	r22, r24
 bbe:	79 1f       	adc	r23, r25
 bc0:	8a 1f       	adc	r24, r26
 bc2:	91 1d       	adc	r25, r1
 bc4:	a1 1d       	adc	r26, r1
 bc6:	6a 0f       	add	r22, r26
 bc8:	71 1d       	adc	r23, r1
 bca:	81 1d       	adc	r24, r1
 bcc:	91 1d       	adc	r25, r1
 bce:	a1 1d       	adc	r26, r1
 bd0:	20 d0       	rcall	.+64     	; 0xc12 <__ultoa_invert+0x84>
 bd2:	09 f4       	brne	.+2      	; 0xbd6 <__ultoa_invert+0x48>
 bd4:	68 94       	set
 bd6:	3f 91       	pop	r19
 bd8:	2a e0       	ldi	r18, 0x0A	; 10
 bda:	26 9f       	mul	r18, r22
 bdc:	11 24       	eor	r1, r1
 bde:	30 19       	sub	r19, r0
 be0:	30 5d       	subi	r19, 0xD0	; 208
 be2:	31 93       	st	Z+, r19
 be4:	de f6       	brtc	.-74     	; 0xb9c <__ultoa_invert+0xe>
 be6:	cf 01       	movw	r24, r30
 be8:	08 95       	ret
 bea:	46 2f       	mov	r20, r22
 bec:	47 70       	andi	r20, 0x07	; 7
 bee:	40 5d       	subi	r20, 0xD0	; 208
 bf0:	41 93       	st	Z+, r20
 bf2:	b3 e0       	ldi	r27, 0x03	; 3
 bf4:	0f d0       	rcall	.+30     	; 0xc14 <__ultoa_invert+0x86>
 bf6:	c9 f7       	brne	.-14     	; 0xbea <__ultoa_invert+0x5c>
 bf8:	f6 cf       	rjmp	.-20     	; 0xbe6 <__ultoa_invert+0x58>
 bfa:	46 2f       	mov	r20, r22
 bfc:	4f 70       	andi	r20, 0x0F	; 15
 bfe:	40 5d       	subi	r20, 0xD0	; 208
 c00:	4a 33       	cpi	r20, 0x3A	; 58
 c02:	18 f0       	brcs	.+6      	; 0xc0a <__ultoa_invert+0x7c>
 c04:	49 5d       	subi	r20, 0xD9	; 217
 c06:	31 fd       	sbrc	r19, 1
 c08:	40 52       	subi	r20, 0x20	; 32
 c0a:	41 93       	st	Z+, r20
 c0c:	02 d0       	rcall	.+4      	; 0xc12 <__ultoa_invert+0x84>
 c0e:	a9 f7       	brne	.-22     	; 0xbfa <__ultoa_invert+0x6c>
 c10:	ea cf       	rjmp	.-44     	; 0xbe6 <__ultoa_invert+0x58>
 c12:	b4 e0       	ldi	r27, 0x04	; 4
 c14:	a6 95       	lsr	r26
 c16:	97 95       	ror	r25
 c18:	87 95       	ror	r24
 c1a:	77 95       	ror	r23
 c1c:	67 95       	ror	r22
 c1e:	ba 95       	dec	r27
 c20:	c9 f7       	brne	.-14     	; 0xc14 <__ultoa_invert+0x86>
 c22:	00 97       	sbiw	r24, 0x00	; 0
 c24:	61 05       	cpc	r22, r1
 c26:	71 05       	cpc	r23, r1
 c28:	08 95       	ret
 c2a:	9b 01       	movw	r18, r22
 c2c:	ac 01       	movw	r20, r24
 c2e:	0a 2e       	mov	r0, r26
 c30:	06 94       	lsr	r0
 c32:	57 95       	ror	r21
 c34:	47 95       	ror	r20
 c36:	37 95       	ror	r19
 c38:	27 95       	ror	r18
 c3a:	ba 95       	dec	r27
 c3c:	c9 f7       	brne	.-14     	; 0xc30 <__ultoa_invert+0xa2>
 c3e:	62 0f       	add	r22, r18
 c40:	73 1f       	adc	r23, r19
 c42:	84 1f       	adc	r24, r20
 c44:	95 1f       	adc	r25, r21
 c46:	a0 1d       	adc	r26, r0
 c48:	08 95       	ret

00000c4a <__prologue_saves__>:
 c4a:	2f 92       	push	r2
 c4c:	3f 92       	push	r3
 c4e:	4f 92       	push	r4
 c50:	5f 92       	push	r5
 c52:	6f 92       	push	r6
 c54:	7f 92       	push	r7
 c56:	8f 92       	push	r8
 c58:	9f 92       	push	r9
 c5a:	af 92       	push	r10
 c5c:	bf 92       	push	r11
 c5e:	cf 92       	push	r12
 c60:	df 92       	push	r13
 c62:	ef 92       	push	r14
 c64:	ff 92       	push	r15
 c66:	0f 93       	push	r16
 c68:	1f 93       	push	r17
 c6a:	cf 93       	push	r28
 c6c:	df 93       	push	r29
 c6e:	cd b7       	in	r28, 0x3d	; 61
 c70:	de b7       	in	r29, 0x3e	; 62
 c72:	ca 1b       	sub	r28, r26
 c74:	db 0b       	sbc	r29, r27
 c76:	0f b6       	in	r0, 0x3f	; 63
 c78:	f8 94       	cli
 c7a:	de bf       	out	0x3e, r29	; 62
 c7c:	0f be       	out	0x3f, r0	; 63
 c7e:	cd bf       	out	0x3d, r28	; 61
 c80:	09 94       	ijmp

00000c82 <__epilogue_restores__>:
 c82:	2a 88       	ldd	r2, Y+18	; 0x12
 c84:	39 88       	ldd	r3, Y+17	; 0x11
 c86:	48 88       	ldd	r4, Y+16	; 0x10
 c88:	5f 84       	ldd	r5, Y+15	; 0x0f
 c8a:	6e 84       	ldd	r6, Y+14	; 0x0e
 c8c:	7d 84       	ldd	r7, Y+13	; 0x0d
 c8e:	8c 84       	ldd	r8, Y+12	; 0x0c
 c90:	9b 84       	ldd	r9, Y+11	; 0x0b
 c92:	aa 84       	ldd	r10, Y+10	; 0x0a
 c94:	b9 84       	ldd	r11, Y+9	; 0x09
 c96:	c8 84       	ldd	r12, Y+8	; 0x08
 c98:	df 80       	ldd	r13, Y+7	; 0x07
 c9a:	ee 80       	ldd	r14, Y+6	; 0x06
 c9c:	fd 80       	ldd	r15, Y+5	; 0x05
 c9e:	0c 81       	ldd	r16, Y+4	; 0x04
 ca0:	1b 81       	ldd	r17, Y+3	; 0x03
 ca2:	aa 81       	ldd	r26, Y+2	; 0x02
 ca4:	b9 81       	ldd	r27, Y+1	; 0x01
 ca6:	ce 0f       	add	r28, r30
 ca8:	d1 1d       	adc	r29, r1
 caa:	0f b6       	in	r0, 0x3f	; 63
 cac:	f8 94       	cli
 cae:	de bf       	out	0x3e, r29	; 62
 cb0:	0f be       	out	0x3f, r0	; 63
 cb2:	cd bf       	out	0x3d, r28	; 61
 cb4:	ed 01       	movw	r28, r26
 cb6:	08 95       	ret

00000cb8 <_exit>:
 cb8:	f8 94       	cli

00000cba <__stop_program>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba <__stop_program>
