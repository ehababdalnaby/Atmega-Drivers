
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000696  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000070a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  00800060  00800060  0000070a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020f6  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab9  00000000  00000000  000029ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9e  00000000  00000000  000034a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00004048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000740  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dab  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000587b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8a:	0c 94 49 03 	jmp	0x692	; 0x692 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <servo_rotate>:
extern volatile u32 overflow;



void servo_rotate(u32 angel)
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	9b 01       	movw	r18, r22
  9c:	ac 01       	movw	r20, r24
	angel= 1000+(1000UL*angel/180UL);
  9e:	a8 ee       	ldi	r26, 0xE8	; 232
  a0:	b3 e0       	ldi	r27, 0x03	; 3
  a2:	0e 94 3e 03 	call	0x67c	; 0x67c <__muluhisi3>
  a6:	24 eb       	ldi	r18, 0xB4	; 180
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	0e 94 0d 03 	call	0x61a	; 0x61a <__udivmodsi4>
  b2:	69 01       	movw	r12, r18
  b4:	7a 01       	movw	r14, r20
  b6:	88 ee       	ldi	r24, 0xE8	; 232
  b8:	c8 0e       	add	r12, r24
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	d8 1e       	adc	r13, r24
  be:	e1 1c       	adc	r14, r1
  c0:	f1 1c       	adc	r15, r1
	writePin(PD7,HIGH);
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	8f e1       	ldi	r24, 0x1F	; 31
  c6:	0e 94 16 01 	call	0x22c	; 0x22c <writePin>
	timer_delay_us(angel);
  ca:	c7 01       	movw	r24, r14
  cc:	b6 01       	movw	r22, r12
  ce:	0e 94 be 02 	call	0x57c	; 0x57c <timer_delay_us>
	writePin(PD7,LOW);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	8f e1       	ldi	r24, 0x1F	; 31
  d6:	0e 94 16 01 	call	0x22c	; 0x22c <writePin>
	timer_delay_us(20000-angel);
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	9e e4       	ldi	r25, 0x4E	; 78
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	bc 01       	movw	r22, r24
  e4:	cd 01       	movw	r24, r26
  e6:	6c 19       	sub	r22, r12
  e8:	7d 09       	sbc	r23, r13
  ea:	8e 09       	sbc	r24, r14
  ec:	9f 09       	sbc	r25, r15
  ee:	0e 94 be 02 	call	0x57c	; 0x57c <timer_delay_us>
}
  f2:	ff 90       	pop	r15
  f4:	ef 90       	pop	r14
  f6:	df 90       	pop	r13
  f8:	cf 90       	pop	r12
  fa:	08 95       	ret

000000fc <main>:
int main(void)
{
	LCD_init();
  fc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_init>
	Timer0_Init(NORMAL);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 85 02 	call	0x50a	; 0x50a <Timer0_Init>
	pinDirection(PD7,OUTPUT);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	8f e1       	ldi	r24, 0x1F	; 31
 10a:	0e 94 ac 01 	call	0x358	; 0x358 <pinDirection>
	while(1)
	{
		servo_rotate(120);
 10e:	68 e7       	ldi	r22, 0x78	; 120
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 49 00 	call	0x92	; 0x92 <servo_rotate>
 11a:	f9 cf       	rjmp	.-14     	; 0x10e <main+0x12>

0000011c <LCD_latch>:
	SendToLCD(data);
}

void LCD_latch(void)
{
	writePin(LCD_E,HIGH);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	8b e0       	ldi	r24, 0x0B	; 11
 120:	0e 94 16 01 	call	0x22c	; 0x22c <writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	87 ec       	ldi	r24, 0xC7	; 199
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_latch+0xc>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_latch+0x12>
 12e:	00 00       	nop
	_delay_us(50);
	writePin(LCD_E,LOW);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	8b e0       	ldi	r24, 0x0B	; 11
 134:	0e 94 16 01 	call	0x22c	; 0x22c <writePin>
 138:	87 ec       	ldi	r24, 0xC7	; 199
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_latch+0x20>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_latch+0x26>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <SendToLCD>:
{
	LCD_send_cmd(CMD_RET);
	_delay_ms(2);
}
void SendToLCD(u8 data)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	writePins(&PORTA,data_pins,LOW);
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	60 ef       	ldi	r22, 0xF0	; 240
 14e:	8b e3       	ldi	r24, 0x3B	; 59
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 42 02 	call	0x484	; 0x484 <writePins>
	writePins(&PORTA,(data&data_pins),HIGH);
 156:	6c 2f       	mov	r22, r28
 158:	60 7f       	andi	r22, 0xF0	; 240
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	8b e3       	ldi	r24, 0x3B	; 59
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 42 02 	call	0x484	; 0x484 <writePins>
	LCD_latch();
 164:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_latch>
	writePins(&PORTA,data_pins,LOW);
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	60 ef       	ldi	r22, 0xF0	; 240
 16c:	8b e3       	ldi	r24, 0x3B	; 59
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 42 02 	call	0x484	; 0x484 <writePins>
	writePins(&PORTA,((data<<4)&data_pins),HIGH);
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	c8 9f       	mul	r28, r24
 178:	b0 01       	movw	r22, r0
 17a:	11 24       	eor	r1, r1
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	8b e3       	ldi	r24, 0x3B	; 59
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 42 02 	call	0x484	; 0x484 <writePins>
	LCD_latch();
 186:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_latch>
 18a:	87 ec       	ldi	r24, 0xC7	; 199
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <SendToLCD+0x48>
 192:	00 c0       	rjmp	.+0      	; 0x194 <SendToLCD+0x4e>
 194:	00 00       	nop
	_delay_us(50);
}
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <LCD_send_cmd>:

void LCD_send_cmd(u8 command)
{
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
	writePin(LCD_RS,LOW);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	89 e0       	ldi	r24, 0x09	; 9
 1a2:	0e 94 16 01 	call	0x22c	; 0x22c <writePin>
	SendToLCD(command);
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 a3 00 	call	0x146	; 0x146 <SendToLCD>
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LCD_CLEAR>:
	LCD_CLEAR();
}

void LCD_CLEAR(void)
{
	LCD_send_cmd(CMD_CLR);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_send_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	8f e3       	ldi	r24, 0x3F	; 63
 1b8:	9f e1       	ldi	r25, 0x1F	; 31
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_CLEAR+0xa>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_CLEAR+0x10>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <LCD_ret_Home>:
	_delay_ms(2);
}
void LCD_ret_Home(void)
{
	LCD_send_cmd(CMD_RET);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_send_cmd>
 1ca:	8f e3       	ldi	r24, 0x3F	; 63
 1cc:	9f e1       	ldi	r25, 0x1F	; 31
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_ret_Home+0xa>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_ret_Home+0x10>
 1d4:	00 00       	nop
 1d6:	08 95       	ret

000001d8 <LCD_init>:


/*clear must be the last command*/
void LCD_init(void)
{
	pinsDirection(&data_ddr, data_pins, OUTPUT);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	60 ef       	ldi	r22, 0xF0	; 240
 1dc:	8a e3       	ldi	r24, 0x3A	; 58
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <pinsDirection>
	pinsDirection(&ctr_ddr, ctr_pin, OUTPUT);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	6e e0       	ldi	r22, 0x0E	; 14
 1e8:	87 e3       	ldi	r24, 0x37	; 55
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 51 02 	call	0x4a2	; 0x4a2 <pinsDirection>
	writePin(LCD_RW , LOW);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	8a e0       	ldi	r24, 0x0A	; 10
 1f4:	0e 94 16 01 	call	0x22c	; 0x22c <writePin>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	83 ef       	ldi	r24, 0xF3	; 243
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <LCD_init+0x26>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_init+0x30>
 208:	00 00       	nop
	_delay_ms(40);
	LCD_ret_Home();
 20a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_ret_Home>
	LCD_send_cmd(CMD_CUR_INC);
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_send_cmd>
	LCD_send_cmd(CMD_CUR_SIT);
 214:	8c e0       	ldi	r24, 0x0C	; 12
 216:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_send_cmd>
	LCD_send_cmd(CMD_SHIFT);
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_send_cmd>
	LCD_send_cmd(CMD_FUN_SET);
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_send_cmd>
	LCD_CLEAR();
 226:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_CLEAR>
 22a:	08 95       	ret

0000022c <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 22c:	88 30       	cpi	r24, 0x08	; 8
 22e:	f8 f4       	brcc	.+62     	; 0x26e <writePin+0x42>
 230:	61 30       	cpi	r22, 0x01	; 1
 232:	69 f4       	brne	.+26     	; 0x24e <writePin+0x22>
 234:	4b b3       	in	r20, 0x1b	; 27
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	b9 01       	movw	r22, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <writePin+0x16>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	8a 95       	dec	r24
 244:	e2 f7       	brpl	.-8      	; 0x23e <writePin+0x12>
 246:	cb 01       	movw	r24, r22
 248:	84 2b       	or	r24, r20
 24a:	8b bb       	out	0x1b, r24	; 27
 24c:	08 95       	ret
 24e:	61 11       	cpse	r22, r1
 250:	82 c0       	rjmp	.+260    	; 0x356 <writePin+0x12a>
 252:	4b b3       	in	r20, 0x1b	; 27
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	b9 01       	movw	r22, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <writePin+0x34>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <writePin+0x30>
 264:	cb 01       	movw	r24, r22
 266:	80 95       	com	r24
 268:	84 23       	and	r24, r20
 26a:	8b bb       	out	0x1b, r24	; 27
 26c:	08 95       	ret
 26e:	98 ef       	ldi	r25, 0xF8	; 248
 270:	98 0f       	add	r25, r24
 272:	98 30       	cpi	r25, 0x08	; 8
 274:	18 f5       	brcc	.+70     	; 0x2bc <writePin+0x90>
 276:	61 30       	cpi	r22, 0x01	; 1
 278:	79 f4       	brne	.+30     	; 0x298 <writePin+0x6c>
 27a:	48 b3       	in	r20, 0x18	; 24
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	08 97       	sbiw	r24, 0x08	; 8
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <writePin+0x60>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <writePin+0x5c>
 290:	cb 01       	movw	r24, r22
 292:	84 2b       	or	r24, r20
 294:	88 bb       	out	0x18, r24	; 24
 296:	08 95       	ret
 298:	61 11       	cpse	r22, r1
 29a:	5d c0       	rjmp	.+186    	; 0x356 <writePin+0x12a>
 29c:	48 b3       	in	r20, 0x18	; 24
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 97       	sbiw	r24, 0x08	; 8
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	b9 01       	movw	r22, r18
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <writePin+0x82>
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	8a 95       	dec	r24
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <writePin+0x7e>
 2b2:	cb 01       	movw	r24, r22
 2b4:	80 95       	com	r24
 2b6:	84 23       	and	r24, r20
 2b8:	88 bb       	out	0x18, r24	; 24
 2ba:	08 95       	ret
 2bc:	90 ef       	ldi	r25, 0xF0	; 240
 2be:	98 0f       	add	r25, r24
 2c0:	98 30       	cpi	r25, 0x08	; 8
 2c2:	18 f5       	brcc	.+70     	; 0x30a <writePin+0xde>
 2c4:	61 30       	cpi	r22, 0x01	; 1
 2c6:	79 f4       	brne	.+30     	; 0x2e6 <writePin+0xba>
 2c8:	45 b3       	in	r20, 0x15	; 21
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	40 97       	sbiw	r24, 0x10	; 16
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	b9 01       	movw	r22, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <writePin+0xae>
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	8a 95       	dec	r24
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <writePin+0xaa>
 2de:	cb 01       	movw	r24, r22
 2e0:	84 2b       	or	r24, r20
 2e2:	85 bb       	out	0x15, r24	; 21
 2e4:	08 95       	ret
 2e6:	61 11       	cpse	r22, r1
 2e8:	36 c0       	rjmp	.+108    	; 0x356 <writePin+0x12a>
 2ea:	45 b3       	in	r20, 0x15	; 21
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	40 97       	sbiw	r24, 0x10	; 16
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	b9 01       	movw	r22, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <writePin+0xd0>
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	8a 95       	dec	r24
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <writePin+0xcc>
 300:	cb 01       	movw	r24, r22
 302:	80 95       	com	r24
 304:	84 23       	and	r24, r20
 306:	85 bb       	out	0x15, r24	; 21
 308:	08 95       	ret
 30a:	98 ee       	ldi	r25, 0xE8	; 232
 30c:	98 0f       	add	r25, r24
 30e:	98 30       	cpi	r25, 0x08	; 8
 310:	10 f5       	brcc	.+68     	; 0x356 <writePin+0x12a>
 312:	61 30       	cpi	r22, 0x01	; 1
 314:	79 f4       	brne	.+30     	; 0x334 <writePin+0x108>
 316:	42 b3       	in	r20, 0x12	; 18
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	48 97       	sbiw	r24, 0x18	; 24
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	b9 01       	movw	r22, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <writePin+0xfc>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	8a 95       	dec	r24
 32a:	e2 f7       	brpl	.-8      	; 0x324 <writePin+0xf8>
 32c:	cb 01       	movw	r24, r22
 32e:	84 2b       	or	r24, r20
 330:	82 bb       	out	0x12, r24	; 18
 332:	08 95       	ret
 334:	61 11       	cpse	r22, r1
 336:	0f c0       	rjmp	.+30     	; 0x356 <writePin+0x12a>
 338:	42 b3       	in	r20, 0x12	; 18
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	48 97       	sbiw	r24, 0x18	; 24
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <writePin+0x11e>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <writePin+0x11a>
 34e:	cb 01       	movw	r24, r22
 350:	80 95       	com	r24
 352:	84 23       	and	r24, r20
 354:	82 bb       	out	0x12, r24	; 18
 356:	08 95       	ret

00000358 <pinDirection>:
 358:	88 30       	cpi	r24, 0x08	; 8
 35a:	f8 f4       	brcc	.+62     	; 0x39a <pinDirection+0x42>
 35c:	61 30       	cpi	r22, 0x01	; 1
 35e:	69 f4       	brne	.+26     	; 0x37a <pinDirection+0x22>
 360:	4a b3       	in	r20, 0x1a	; 26
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	b9 01       	movw	r22, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <pinDirection+0x16>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	8a 95       	dec	r24
 370:	e2 f7       	brpl	.-8      	; 0x36a <pinDirection+0x12>
 372:	cb 01       	movw	r24, r22
 374:	84 2b       	or	r24, r20
 376:	8a bb       	out	0x1a, r24	; 26
 378:	08 95       	ret
 37a:	61 11       	cpse	r22, r1
 37c:	82 c0       	rjmp	.+260    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 37e:	4a b3       	in	r20, 0x1a	; 26
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	b9 01       	movw	r22, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <pinDirection+0x34>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	8a 95       	dec	r24
 38e:	e2 f7       	brpl	.-8      	; 0x388 <pinDirection+0x30>
 390:	cb 01       	movw	r24, r22
 392:	80 95       	com	r24
 394:	84 23       	and	r24, r20
 396:	8a bb       	out	0x1a, r24	; 26
 398:	08 95       	ret
 39a:	98 ef       	ldi	r25, 0xF8	; 248
 39c:	98 0f       	add	r25, r24
 39e:	98 30       	cpi	r25, 0x08	; 8
 3a0:	18 f5       	brcc	.+70     	; 0x3e8 <pinDirection+0x90>
 3a2:	61 30       	cpi	r22, 0x01	; 1
 3a4:	79 f4       	brne	.+30     	; 0x3c4 <pinDirection+0x6c>
 3a6:	47 b3       	in	r20, 0x17	; 23
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 97       	sbiw	r24, 0x08	; 8
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	b9 01       	movw	r22, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <pinDirection+0x60>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	8a 95       	dec	r24
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <pinDirection+0x5c>
 3bc:	cb 01       	movw	r24, r22
 3be:	84 2b       	or	r24, r20
 3c0:	87 bb       	out	0x17, r24	; 23
 3c2:	08 95       	ret
 3c4:	61 11       	cpse	r22, r1
 3c6:	5d c0       	rjmp	.+186    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 3c8:	47 b3       	in	r20, 0x17	; 23
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	08 97       	sbiw	r24, 0x08	; 8
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	b9 01       	movw	r22, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <pinDirection+0x82>
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	8a 95       	dec	r24
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <pinDirection+0x7e>
 3de:	cb 01       	movw	r24, r22
 3e0:	80 95       	com	r24
 3e2:	84 23       	and	r24, r20
 3e4:	87 bb       	out	0x17, r24	; 23
 3e6:	08 95       	ret
 3e8:	90 ef       	ldi	r25, 0xF0	; 240
 3ea:	98 0f       	add	r25, r24
 3ec:	98 30       	cpi	r25, 0x08	; 8
 3ee:	18 f5       	brcc	.+70     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3f0:	61 30       	cpi	r22, 0x01	; 1
 3f2:	79 f4       	brne	.+30     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f4:	44 b3       	in	r20, 0x14	; 20
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	40 97       	sbiw	r24, 0x10	; 16
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	b9 01       	movw	r22, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	8a 95       	dec	r24
 408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	cb 01       	movw	r24, r22
 40c:	84 2b       	or	r24, r20
 40e:	84 bb       	out	0x14, r24	; 20
 410:	08 95       	ret
 412:	61 11       	cpse	r22, r1
 414:	36 c0       	rjmp	.+108    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 416:	44 b3       	in	r20, 0x14	; 20
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	40 97       	sbiw	r24, 0x10	; 16
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	8a 95       	dec	r24
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	84 bb       	out	0x14, r24	; 20
 434:	08 95       	ret
 436:	98 ee       	ldi	r25, 0xE8	; 232
 438:	98 0f       	add	r25, r24
 43a:	98 30       	cpi	r25, 0x08	; 8
 43c:	10 f5       	brcc	.+68     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 43e:	61 30       	cpi	r22, 0x01	; 1
 440:	79 f4       	brne	.+30     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 442:	41 b3       	in	r20, 0x11	; 17
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	48 97       	sbiw	r24, 0x18	; 24
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	b9 01       	movw	r22, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	8a 95       	dec	r24
 456:	e2 f7       	brpl	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	cb 01       	movw	r24, r22
 45a:	84 2b       	or	r24, r20
 45c:	81 bb       	out	0x11, r24	; 17
 45e:	08 95       	ret
 460:	61 11       	cpse	r22, r1
 462:	0f c0       	rjmp	.+30     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 464:	41 b3       	in	r20, 0x11	; 17
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	48 97       	sbiw	r24, 0x18	; 24
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	b9 01       	movw	r22, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	8a 95       	dec	r24
 478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 47a:	cb 01       	movw	r24, r22
 47c:	80 95       	com	r24
 47e:	84 23       	and	r24, r20
 480:	81 bb       	out	0x11, r24	; 17
 482:	08 95       	ret

00000484 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 484:	41 30       	cpi	r20, 0x01	; 1
 486:	29 f4       	brne	.+10     	; 0x492 <writePins+0xe>
		SETBits(*port,mask);
 488:	fc 01       	movw	r30, r24
 48a:	20 81       	ld	r18, Z
 48c:	62 2b       	or	r22, r18
 48e:	60 83       	st	Z, r22
 490:	08 95       	ret
	else if(logic==LOW)
 492:	41 11       	cpse	r20, r1
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <writePins+0x1c>
		CLRBits(*port,mask);
 496:	fc 01       	movw	r30, r24
 498:	20 81       	ld	r18, Z
 49a:	60 95       	com	r22
 49c:	62 23       	and	r22, r18
 49e:	60 83       	st	Z, r22
 4a0:	08 95       	ret

000004a2 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 81       	ld	r18, Z
 4aa:	62 2b       	or	r22, r18
 4ac:	60 83       	st	Z, r22
 4ae:	08 95       	ret
	else if(direction == INPUT)
 4b0:	41 11       	cpse	r20, r1
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 81       	ld	r18, Z
 4b8:	60 95       	com	r22
 4ba:	62 23       	and	r22, r18
 4bc:	60 83       	st	Z, r22
 4be:	08 95       	ret

000004c0 <__vector_11>:
		SETBit(TCCR0,CS02);
		break;
	}
}
void Timer_start(void)
{
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4da:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 4de:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	a1 1d       	adc	r26, r1
 4e6:	b1 1d       	adc	r27, r1
 4e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 4ec:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4f0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 4f4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 4f8:	bf 91       	pop	r27
 4fa:	af 91       	pop	r26
 4fc:	9f 91       	pop	r25
 4fe:	8f 91       	pop	r24
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <Timer0_Init>:
 50a:	88 23       	and	r24, r24
 50c:	19 f0       	breq	.+6      	; 0x514 <Timer0_Init+0xa>
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	a9 f0       	breq	.+42     	; 0x53c <Timer0_Init+0x32>
 512:	08 95       	ret
 514:	83 b7       	in	r24, 0x33	; 51
 516:	87 7f       	andi	r24, 0xF7	; 247
 518:	83 bf       	out	0x33, r24	; 51
 51a:	83 b7       	in	r24, 0x33	; 51
 51c:	8f 7b       	andi	r24, 0xBF	; 191
 51e:	83 bf       	out	0x33, r24	; 51
 520:	83 b7       	in	r24, 0x33	; 51
 522:	8e 7f       	andi	r24, 0xFE	; 254
 524:	83 bf       	out	0x33, r24	; 51
 526:	83 b7       	in	r24, 0x33	; 51
 528:	82 60       	ori	r24, 0x02	; 2
 52a:	83 bf       	out	0x33, r24	; 51
 52c:	83 b7       	in	r24, 0x33	; 51
 52e:	8b 7f       	andi	r24, 0xFB	; 251
 530:	83 bf       	out	0x33, r24	; 51
 532:	89 b7       	in	r24, 0x39	; 57
 534:	81 60       	ori	r24, 0x01	; 1
 536:	89 bf       	out	0x39, r24	; 57
 538:	78 94       	sei
 53a:	08 95       	ret
 53c:	83 b7       	in	r24, 0x33	; 51
 53e:	88 60       	ori	r24, 0x08	; 8
 540:	83 bf       	out	0x33, r24	; 51
 542:	83 b7       	in	r24, 0x33	; 51
 544:	80 64       	ori	r24, 0x40	; 64
 546:	83 bf       	out	0x33, r24	; 51
 548:	83 b7       	in	r24, 0x33	; 51
 54a:	80 62       	ori	r24, 0x20	; 32
 54c:	83 bf       	out	0x33, r24	; 51
 54e:	83 b7       	in	r24, 0x33	; 51
 550:	8f 7e       	andi	r24, 0xEF	; 239
 552:	83 bf       	out	0x33, r24	; 51
 554:	83 b7       	in	r24, 0x33	; 51
 556:	81 60       	ori	r24, 0x01	; 1
 558:	83 bf       	out	0x33, r24	; 51
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	8d 7f       	andi	r24, 0xFD	; 253
 55e:	83 bf       	out	0x33, r24	; 51
 560:	83 b7       	in	r24, 0x33	; 51
 562:	84 60       	ori	r24, 0x04	; 4
 564:	83 bf       	out	0x33, r24	; 51
 566:	08 95       	ret

00000568 <ResetTimer>:
	
}

void ResetTimer(void)
{
	TCNT0=0x00;
 568:	12 be       	out	0x32, r1	; 50
	overflow=0;
 56a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 56e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 572:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 576:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 57a:	08 95       	ret

0000057c <timer_delay_us>:
}
void timer_delay_us(u32 delay)
{
 57c:	cf 92       	push	r12
 57e:	df 92       	push	r13
 580:	ef 92       	push	r14
 582:	ff 92       	push	r15
 584:	6b 01       	movw	r12, r22
 586:	7c 01       	movw	r14, r24
	ResetTimer();
 588:	0e 94 b4 02 	call	0x568	; 0x568 <ResetTimer>
	while(delay > ((TCNT0+1+overflow*256UL)/2UL));	
 58c:	82 b7       	in	r24, 0x32	; 50
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 596:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 59a:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 59e:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 5a2:	76 2f       	mov	r23, r22
 5a4:	65 2f       	mov	r22, r21
 5a6:	54 2f       	mov	r21, r20
 5a8:	44 27       	eor	r20, r20
 5aa:	09 2e       	mov	r0, r25
 5ac:	00 0c       	add	r0, r0
 5ae:	aa 0b       	sbc	r26, r26
 5b0:	bb 0b       	sbc	r27, r27
 5b2:	84 0f       	add	r24, r20
 5b4:	95 1f       	adc	r25, r21
 5b6:	a6 1f       	adc	r26, r22
 5b8:	b7 1f       	adc	r27, r23
 5ba:	b6 95       	lsr	r27
 5bc:	a7 95       	ror	r26
 5be:	97 95       	ror	r25
 5c0:	87 95       	ror	r24
 5c2:	8c 15       	cp	r24, r12
 5c4:	9d 05       	cpc	r25, r13
 5c6:	ae 05       	cpc	r26, r14
 5c8:	bf 05       	cpc	r27, r15
 5ca:	00 f3       	brcs	.-64     	; 0x58c <timer_delay_us+0x10>
}
 5cc:	ff 90       	pop	r15
 5ce:	ef 90       	pop	r14
 5d0:	df 90       	pop	r13
 5d2:	cf 90       	pop	r12
 5d4:	08 95       	ret

000005d6 <__vector_13>:

u8 gps[100];
u8 i=0;
u8 CHECK[]="$GPGGA";
ISR(USART_RXC_vect)
{
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
	gps[i]=UDR;
 5e8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 5ec:	e8 2f       	mov	r30, r24
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	9c b1       	in	r25, 0x0c	; 12
 5f2:	eb 59       	subi	r30, 0x9B	; 155
 5f4:	ff 4f       	sbci	r31, 0xFF	; 255
 5f6:	90 83       	st	Z, r25
	i++;
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
	if (i==5)
 5fe:	85 30       	cpi	r24, 0x05	; 5
 600:	19 f4       	brne	.+6      	; 0x608 <__vector_13+0x32>
	{
		gps[6]='\0';
 602:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <gps+0x6>
		cli();
 606:	f8 94       	cli
	}
}
 608:	ff 91       	pop	r31
 60a:	ef 91       	pop	r30
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	0f 90       	pop	r0
 612:	0f be       	out	0x3f, r0	; 63
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <__udivmodsi4>:
 61a:	a1 e2       	ldi	r26, 0x21	; 33
 61c:	1a 2e       	mov	r1, r26
 61e:	aa 1b       	sub	r26, r26
 620:	bb 1b       	sub	r27, r27
 622:	fd 01       	movw	r30, r26
 624:	0d c0       	rjmp	.+26     	; 0x640 <__udivmodsi4_ep>

00000626 <__udivmodsi4_loop>:
 626:	aa 1f       	adc	r26, r26
 628:	bb 1f       	adc	r27, r27
 62a:	ee 1f       	adc	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	a2 17       	cp	r26, r18
 630:	b3 07       	cpc	r27, r19
 632:	e4 07       	cpc	r30, r20
 634:	f5 07       	cpc	r31, r21
 636:	20 f0       	brcs	.+8      	; 0x640 <__udivmodsi4_ep>
 638:	a2 1b       	sub	r26, r18
 63a:	b3 0b       	sbc	r27, r19
 63c:	e4 0b       	sbc	r30, r20
 63e:	f5 0b       	sbc	r31, r21

00000640 <__udivmodsi4_ep>:
 640:	66 1f       	adc	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	1a 94       	dec	r1
 64a:	69 f7       	brne	.-38     	; 0x626 <__udivmodsi4_loop>
 64c:	60 95       	com	r22
 64e:	70 95       	com	r23
 650:	80 95       	com	r24
 652:	90 95       	com	r25
 654:	9b 01       	movw	r18, r22
 656:	ac 01       	movw	r20, r24
 658:	bd 01       	movw	r22, r26
 65a:	cf 01       	movw	r24, r30
 65c:	08 95       	ret

0000065e <__umulhisi3>:
 65e:	a2 9f       	mul	r26, r18
 660:	b0 01       	movw	r22, r0
 662:	b3 9f       	mul	r27, r19
 664:	c0 01       	movw	r24, r0
 666:	a3 9f       	mul	r26, r19
 668:	70 0d       	add	r23, r0
 66a:	81 1d       	adc	r24, r1
 66c:	11 24       	eor	r1, r1
 66e:	91 1d       	adc	r25, r1
 670:	b2 9f       	mul	r27, r18
 672:	70 0d       	add	r23, r0
 674:	81 1d       	adc	r24, r1
 676:	11 24       	eor	r1, r1
 678:	91 1d       	adc	r25, r1
 67a:	08 95       	ret

0000067c <__muluhisi3>:
 67c:	0e 94 2f 03 	call	0x65e	; 0x65e <__umulhisi3>
 680:	a5 9f       	mul	r26, r21
 682:	90 0d       	add	r25, r0
 684:	b4 9f       	mul	r27, r20
 686:	90 0d       	add	r25, r0
 688:	a4 9f       	mul	r26, r20
 68a:	80 0d       	add	r24, r0
 68c:	91 1d       	adc	r25, r1
 68e:	11 24       	eor	r1, r1
 690:	08 95       	ret

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
