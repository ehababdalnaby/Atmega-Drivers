
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000005b0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800070  00800070  00000654  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002778  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c13  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da9  00000000  00000000  00003c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  000049ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000777  00000000  00000000  00004d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001091  00000000  00000000  000054d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3d       	cpi	r26, 0xD5	; 213
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#error define includes.h file
#endif


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	60 97       	sbiw	r28, 0x10	; 16
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	I2C_Init();
  a6:	0e 94 75 02 	call	0x4ea	; 0x4ea <I2C_Init>
	LCD_init();
  aa:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_init>
	u8 data1[15]="NTI Group";
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	e0 e6       	ldi	r30, 0x60	; 96
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
  c0:	fe 01       	movw	r30, r28
  c2:	3b 96       	adiw	r30, 0x0b	; 11
  c4:	85 e0       	ldi	r24, 0x05	; 5
  c6:	df 01       	movw	r26, r30
  c8:	1d 92       	st	X+, r1
  ca:	8a 95       	dec	r24
  cc:	e9 f7       	brne	.-6      	; 0xc8 <main+0x36>
	u8 data='x';
  ce:	88 e7       	ldi	r24, 0x78	; 120
  d0:	88 8b       	std	Y+16, r24	; 0x10
	
	 I2C_EEPROM_Write(0x00,'E');
  d2:	65 e4       	ldi	r22, 0x45	; 69
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 99 00 	call	0x132	; 0x132 <I2C_EEPROM_Write>
	 I2C_EEPROM_Write(0x01,'a');
  de:	61 e6       	ldi	r22, 0x61	; 97
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 99 00 	call	0x132	; 0x132 <I2C_EEPROM_Write>
	 I2C_EEPROM_Write(0x02,'f');	
  ea:	66 e6       	ldi	r22, 0x66	; 102
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 99 00 	call	0x132	; 0x132 <I2C_EEPROM_Write>
	 I2C_EEPROM_Page_Write(0x00,data1);
  f6:	be 01       	movw	r22, r28
  f8:	6f 5f       	subi	r22, 0xFF	; 255
  fa:	7f 4f       	sbci	r23, 0xFF	; 255
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_EEPROM_Page_Write>
	 I2C_EEPROM_Read(0x02,&data);
 104:	be 01       	movw	r22, r28
 106:	60 5f       	subi	r22, 0xF0	; 240
 108:	7f 4f       	sbci	r23, 0xFF	; 255
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_EEPROM_Read>
	 disp_charXY(1,1,data);
 112:	48 89       	ldd	r20, Y+16	; 0x10
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 b8 01 	call	0x370	; 0x370 <disp_charXY>
}
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	60 96       	adiw	r28, 0x10	; 16
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <I2C_EEPROM_Write>:
	I2C_start();
	I2C_Write((CMD_READ),SCMRSLA_Ack_Code);
	I2C_Read(data,ReceiveData_NAck_code);
	I2C_Stop();
	_delay_ms(1);
}
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
 13a:	16 2f       	mov	r17, r22
 13c:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_start>
 140:	ce 01       	movw	r24, r28
 142:	88 0f       	add	r24, r24
 144:	89 2f       	mov	r24, r25
 146:	88 1f       	adc	r24, r24
 148:	99 0b       	sbc	r25, r25
 14a:	91 95       	neg	r25
 14c:	82 70       	andi	r24, 0x02	; 2
 14e:	68 e1       	ldi	r22, 0x18	; 24
 150:	80 6a       	ori	r24, 0xA0	; 160
 152:	0e 94 8f 02 	call	0x51e	; 0x51e <I2C_Write>
 156:	68 e1       	ldi	r22, 0x18	; 24
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 8f 02 	call	0x51e	; 0x51e <I2C_Write>
 15e:	68 e2       	ldi	r22, 0x28	; 40
 160:	81 2f       	mov	r24, r17
 162:	0e 94 8f 02 	call	0x51e	; 0x51e <I2C_Write>
 166:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <I2C_Stop>
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	9c e9       	ldi	r25, 0x9C	; 156
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <I2C_EEPROM_Write+0x3c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <I2C_EEPROM_Write+0x42>
 174:	00 00       	nop
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	08 95       	ret

0000017e <I2C_EEPROM_Read>:

void I2C_EEPROM_Read(u8 add,u8 *data)
{
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	18 2f       	mov	r17, r24
 186:	eb 01       	movw	r28, r22
	I2C_start(); //send start
 188:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_start>
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMRSLA_Ack_Code); //send control Byte
 18c:	60 e4       	ldi	r22, 0x40	; 64
 18e:	80 ea       	ldi	r24, 0xA0	; 160
 190:	0e 94 8f 02 	call	0x51e	; 0x51e <I2C_Write>
	I2C_Write(add,SCMRSLA_Ack_Code);  //send address word
 194:	60 e4       	ldi	r22, 0x40	; 64
 196:	81 2f       	mov	r24, r17
 198:	0e 94 8f 02 	call	0x51e	; 0x51e <I2C_Write>
	I2C_start();
 19c:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_start>
	I2C_Write((CMD_READ),SCMRSLA_Ack_Code); //send control Byte
 1a0:	60 e4       	ldi	r22, 0x40	; 64
 1a2:	81 ea       	ldi	r24, 0xA1	; 161
 1a4:	0e 94 8f 02 	call	0x51e	; 0x51e <I2C_Write>
	I2C_Read(data,ReceiveData_NAck_code); //send data
 1a8:	68 e5       	ldi	r22, 0x58	; 88
 1aa:	ce 01       	movw	r24, r28
 1ac:	0e 94 99 02 	call	0x532	; 0x532 <I2C_Read>
	I2C_Stop();
 1b0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f e9       	ldi	r24, 0x9F	; 159
 1b6:	9f e0       	ldi	r25, 0x0F	; 15
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <I2C_EEPROM_Read+0x3a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <I2C_EEPROM_Read+0x40>
 1be:	00 00       	nop
	_delay_ms(1);
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	08 95       	ret

000001c8 <I2C_EEPROM_Page_Write>:

void I2C_EEPROM_Page_Write(u16 add,u8* data)
{
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
 1d2:	8b 01       	movw	r16, r22
	u8 i=0;
	I2C_start(); //send start
 1d4:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_start>
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMTSLA_Ack_Code); //send control Byte
 1d8:	ce 01       	movw	r24, r28
 1da:	88 0f       	add	r24, r24
 1dc:	89 2f       	mov	r24, r25
 1de:	88 1f       	adc	r24, r24
 1e0:	99 0b       	sbc	r25, r25
 1e2:	91 95       	neg	r25
 1e4:	82 70       	andi	r24, 0x02	; 2
 1e6:	68 e1       	ldi	r22, 0x18	; 24
 1e8:	80 6a       	ori	r24, 0xA0	; 160
 1ea:	0e 94 8f 02 	call	0x51e	; 0x51e <I2C_Write>
	I2C_Write(add,SCMTSLA_Ack_Code);  //send address word
 1ee:	68 e1       	ldi	r22, 0x18	; 24
 1f0:	8c 2f       	mov	r24, r28
 1f2:	0e 94 8f 02 	call	0x51e	; 0x51e <I2C_Write>
	_delay_ms(1);
}

void I2C_EEPROM_Page_Write(u16 add,u8* data)
{
	u8 i=0;
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_start(); //send start
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMTSLA_Ack_Code); //send control Byte
	I2C_Write(add,SCMTSLA_Ack_Code);  //send address word
	while(data[i]!='\0')
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <I2C_EEPROM_Page_Write+0x3a>
	{
		I2C_Write(data[i],SlaveData_Ack_code); //send data
 1fa:	68 e2       	ldi	r22, 0x28	; 40
 1fc:	0e 94 8f 02 	call	0x51e	; 0x51e <I2C_Write>
		i++;
 200:	cf 5f       	subi	r28, 0xFF	; 255
{
	u8 i=0;
	I2C_start(); //send start
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMTSLA_Ack_Code); //send control Byte
	I2C_Write(add,SCMTSLA_Ack_Code);  //send address word
	while(data[i]!='\0')
 202:	f8 01       	movw	r30, r16
 204:	ec 0f       	add	r30, r28
 206:	f1 1d       	adc	r31, r1
 208:	80 81       	ld	r24, Z
 20a:	81 11       	cpse	r24, r1
 20c:	f6 cf       	rjmp	.-20     	; 0x1fa <I2C_EEPROM_Page_Write+0x32>
	{
		I2C_Write(data[i],SlaveData_Ack_code); //send data
		i++;
	}
	I2C_Stop();
 20e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <I2C_Stop>
 212:	8f e3       	ldi	r24, 0x3F	; 63
 214:	9c e9       	ldi	r25, 0x9C	; 156
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <I2C_EEPROM_Page_Write+0x4e>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <I2C_EEPROM_Page_Write+0x54>
 21c:	00 00       	nop
	_delay_ms(10);
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <LCD_latch>:
	while(str[indx]!='\0')
	{
		disp_char(indx[str]);
		indx++;
	}
}
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	8b e0       	ldi	r24, 0x0B	; 11
 22c:	0e 94 c1 01 	call	0x382	; 0x382 <writePin>
 230:	87 ec       	ldi	r24, 0xC7	; 199
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_latch+0xc>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_latch+0x12>
 23a:	00 00       	nop
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	8b e0       	ldi	r24, 0x0B	; 11
 240:	0e 94 c1 01 	call	0x382	; 0x382 <writePin>
 244:	87 ec       	ldi	r24, 0xC7	; 199
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_latch+0x20>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_latch+0x26>
 24e:	00 00       	nop
 250:	08 95       	ret

00000252 <SendToLCD>:
 252:	cf 93       	push	r28
 254:	c8 2f       	mov	r28, r24
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	60 ef       	ldi	r22, 0xF0	; 240
 25a:	8b e3       	ldi	r24, 0x3B	; 59
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 57 02 	call	0x4ae	; 0x4ae <writePins>
 262:	6c 2f       	mov	r22, r28
 264:	60 7f       	andi	r22, 0xF0	; 240
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	8b e3       	ldi	r24, 0x3B	; 59
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 57 02 	call	0x4ae	; 0x4ae <writePins>
 270:	0e 94 14 01 	call	0x228	; 0x228 <LCD_latch>
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	60 ef       	ldi	r22, 0xF0	; 240
 278:	8b e3       	ldi	r24, 0x3B	; 59
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 57 02 	call	0x4ae	; 0x4ae <writePins>
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	c8 9f       	mul	r28, r24
 284:	b0 01       	movw	r22, r0
 286:	11 24       	eor	r1, r1
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	8b e3       	ldi	r24, 0x3B	; 59
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 57 02 	call	0x4ae	; 0x4ae <writePins>
 292:	0e 94 14 01 	call	0x228	; 0x228 <LCD_latch>
 296:	87 ec       	ldi	r24, 0xC7	; 199
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <SendToLCD+0x48>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <SendToLCD+0x4e>
 2a0:	00 00       	nop
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <LCD_send_cmd>:
 2a6:	cf 93       	push	r28
 2a8:	c8 2f       	mov	r28, r24
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	89 e0       	ldi	r24, 0x09	; 9
 2ae:	0e 94 c1 01 	call	0x382	; 0x382 <writePin>
 2b2:	8c 2f       	mov	r24, r28
 2b4:	0e 94 29 01 	call	0x252	; 0x252 <SendToLCD>
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <LCD_CLEAR>:
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_cmd>
 2c2:	8f e3       	ldi	r24, 0x3F	; 63
 2c4:	9f e1       	ldi	r25, 0x1F	; 31
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_CLEAR+0xa>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_CLEAR+0x10>
 2cc:	00 00       	nop
 2ce:	08 95       	ret

000002d0 <LCD_ret_Home>:
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_cmd>
 2d6:	8f e3       	ldi	r24, 0x3F	; 63
 2d8:	9f e1       	ldi	r25, 0x1F	; 31
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_ret_Home+0xa>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_ret_Home+0x10>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

000002e4 <LCD_init>:
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	60 ef       	ldi	r22, 0xF0	; 240
 2e8:	8a e3       	ldi	r24, 0x3A	; 58
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 66 02 	call	0x4cc	; 0x4cc <pinsDirection>
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	6e e0       	ldi	r22, 0x0E	; 14
 2f4:	87 e3       	ldi	r24, 0x37	; 55
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 66 02 	call	0x4cc	; 0x4cc <pinsDirection>
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	0e 94 c1 01 	call	0x382	; 0x382 <writePin>
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	83 ef       	ldi	r24, 0xF3	; 243
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <LCD_init+0x26>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_init+0x30>
 314:	00 00       	nop
 316:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_ret_Home>
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_cmd>
 320:	8c e0       	ldi	r24, 0x0C	; 12
 322:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_cmd>
 326:	80 e1       	ldi	r24, 0x10	; 16
 328:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_cmd>
 32c:	88 e2       	ldi	r24, 0x28	; 40
 32e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_cmd>
 332:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_CLEAR>
 336:	08 95       	ret

00000338 <LCD_send_data>:
 338:	cf 93       	push	r28
 33a:	c8 2f       	mov	r28, r24
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	89 e0       	ldi	r24, 0x09	; 9
 340:	0e 94 c1 01 	call	0x382	; 0x382 <writePin>
 344:	8c 2f       	mov	r24, r28
 346:	0e 94 29 01 	call	0x252	; 0x252 <SendToLCD>
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <disp_char>:
 34e:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_send_data>
 352:	08 95       	ret

00000354 <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
	if (row==1)
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	29 f4       	brne	.+10     	; 0x362 <LCD_GOTXY+0xe>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
 358:	8f e7       	ldi	r24, 0x7F	; 127
 35a:	86 0f       	add	r24, r22
 35c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_cmd>
 360:	08 95       	ret
	}
	else if(row==2)
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	21 f4       	brne	.+8      	; 0x36e <LCD_GOTXY+0x1a>
	{
		LCD_send_cmd(DDRAM_ADD+0x40+col-1);	
 366:	8f eb       	ldi	r24, 0xBF	; 191
 368:	86 0f       	add	r24, r22
 36a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_cmd>
 36e:	08 95       	ret

00000370 <disp_charXY>:
{
	LCD_send_data(letter);
}

void disp_charXY(u8 row,u8 col,u8 letter)
{
 370:	cf 93       	push	r28
 372:	c4 2f       	mov	r28, r20
	LCD_GOTXY(row,col);
 374:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_GOTXY>
	disp_char(letter);	
 378:	8c 2f       	mov	r24, r28
 37a:	0e 94 a7 01 	call	0x34e	; 0x34e <disp_char>
}
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 382:	88 30       	cpi	r24, 0x08	; 8
 384:	f8 f4       	brcc	.+62     	; 0x3c4 <writePin+0x42>
 386:	61 30       	cpi	r22, 0x01	; 1
 388:	69 f4       	brne	.+26     	; 0x3a4 <writePin+0x22>
 38a:	4b b3       	in	r20, 0x1b	; 27
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	b9 01       	movw	r22, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <writePin+0x16>
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	8a 95       	dec	r24
 39a:	e2 f7       	brpl	.-8      	; 0x394 <writePin+0x12>
 39c:	cb 01       	movw	r24, r22
 39e:	84 2b       	or	r24, r20
 3a0:	8b bb       	out	0x1b, r24	; 27
 3a2:	08 95       	ret
 3a4:	61 11       	cpse	r22, r1
 3a6:	82 c0       	rjmp	.+260    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 3a8:	4b b3       	in	r20, 0x1b	; 27
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	b9 01       	movw	r22, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <writePin+0x34>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	8a 95       	dec	r24
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <writePin+0x30>
 3ba:	cb 01       	movw	r24, r22
 3bc:	80 95       	com	r24
 3be:	84 23       	and	r24, r20
 3c0:	8b bb       	out	0x1b, r24	; 27
 3c2:	08 95       	ret
 3c4:	98 ef       	ldi	r25, 0xF8	; 248
 3c6:	98 0f       	add	r25, r24
 3c8:	98 30       	cpi	r25, 0x08	; 8
 3ca:	18 f5       	brcc	.+70     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3cc:	61 30       	cpi	r22, 0x01	; 1
 3ce:	79 f4       	brne	.+30     	; 0x3ee <writePin+0x6c>
 3d0:	48 b3       	in	r20, 0x18	; 24
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	08 97       	sbiw	r24, 0x08	; 8
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	b9 01       	movw	r22, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <writePin+0x60>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <writePin+0x5c>
 3e6:	cb 01       	movw	r24, r22
 3e8:	84 2b       	or	r24, r20
 3ea:	88 bb       	out	0x18, r24	; 24
 3ec:	08 95       	ret
 3ee:	61 11       	cpse	r22, r1
 3f0:	5d c0       	rjmp	.+186    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 3f2:	48 b3       	in	r20, 0x18	; 24
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	08 97       	sbiw	r24, 0x08	; 8
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	b9 01       	movw	r22, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	8a 95       	dec	r24
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	cb 01       	movw	r24, r22
 40a:	80 95       	com	r24
 40c:	84 23       	and	r24, r20
 40e:	88 bb       	out	0x18, r24	; 24
 410:	08 95       	ret
 412:	90 ef       	ldi	r25, 0xF0	; 240
 414:	98 0f       	add	r25, r24
 416:	98 30       	cpi	r25, 0x08	; 8
 418:	18 f5       	brcc	.+70     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 41a:	61 30       	cpi	r22, 0x01	; 1
 41c:	79 f4       	brne	.+30     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41e:	45 b3       	in	r20, 0x15	; 21
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	40 97       	sbiw	r24, 0x10	; 16
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	b9 01       	movw	r22, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	8a 95       	dec	r24
 432:	e2 f7       	brpl	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	cb 01       	movw	r24, r22
 436:	84 2b       	or	r24, r20
 438:	85 bb       	out	0x15, r24	; 21
 43a:	08 95       	ret
 43c:	61 11       	cpse	r22, r1
 43e:	36 c0       	rjmp	.+108    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 440:	45 b3       	in	r20, 0x15	; 21
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	40 97       	sbiw	r24, 0x10	; 16
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	b9 01       	movw	r22, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	8a 95       	dec	r24
 454:	e2 f7       	brpl	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	cb 01       	movw	r24, r22
 458:	80 95       	com	r24
 45a:	84 23       	and	r24, r20
 45c:	85 bb       	out	0x15, r24	; 21
 45e:	08 95       	ret
 460:	98 ee       	ldi	r25, 0xE8	; 232
 462:	98 0f       	add	r25, r24
 464:	98 30       	cpi	r25, 0x08	; 8
 466:	10 f5       	brcc	.+68     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 468:	61 30       	cpi	r22, 0x01	; 1
 46a:	79 f4       	brne	.+30     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 46c:	42 b3       	in	r20, 0x12	; 18
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	48 97       	sbiw	r24, 0x18	; 24
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	8a 95       	dec	r24
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	cb 01       	movw	r24, r22
 484:	84 2b       	or	r24, r20
 486:	82 bb       	out	0x12, r24	; 18
 488:	08 95       	ret
 48a:	61 11       	cpse	r22, r1
 48c:	0f c0       	rjmp	.+30     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 48e:	42 b3       	in	r20, 0x12	; 18
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	48 97       	sbiw	r24, 0x18	; 24
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	b9 01       	movw	r22, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	8a 95       	dec	r24
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a4:	cb 01       	movw	r24, r22
 4a6:	80 95       	com	r24
 4a8:	84 23       	and	r24, r20
 4aa:	82 bb       	out	0x12, r24	; 18
 4ac:	08 95       	ret

000004ae <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 4ae:	41 30       	cpi	r20, 0x01	; 1
 4b0:	29 f4       	brne	.+10     	; 0x4bc <writePins+0xe>
		SETBits(*port,mask);
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 81       	ld	r18, Z
 4b6:	62 2b       	or	r22, r18
 4b8:	60 83       	st	Z, r22
 4ba:	08 95       	ret
	else if(logic==LOW)
 4bc:	41 11       	cpse	r20, r1
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <writePins+0x1c>
		CLRBits(*port,mask);
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 81       	ld	r18, Z
 4c4:	60 95       	com	r22
 4c6:	62 23       	and	r22, r18
 4c8:	60 83       	st	Z, r22
 4ca:	08 95       	ret

000004cc <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 4cc:	41 30       	cpi	r20, 0x01	; 1
 4ce:	29 f4       	brne	.+10     	; 0x4da <pinsDirection+0xe>
		SETBits(*ddr,mask);
 4d0:	fc 01       	movw	r30, r24
 4d2:	20 81       	ld	r18, Z
 4d4:	62 2b       	or	r22, r18
 4d6:	60 83       	st	Z, r22
 4d8:	08 95       	ret
	else if(direction == INPUT)
 4da:	41 11       	cpse	r20, r1
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 4de:	fc 01       	movw	r30, r24
 4e0:	20 81       	ld	r18, Z
 4e2:	60 95       	com	r22
 4e4:	62 23       	and	r22, r18
 4e6:	60 83       	st	Z, r22
 4e8:	08 95       	ret

000004ea <I2C_Init>:
BOOL I2C_Restart(void)
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWSTA); //enable the i2c , set the flag and send Restart
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
	return(I2C_Check_status(Restart_Code));
}
 4ea:	80 e2       	ldi	r24, 0x20	; 32
 4ec:	80 b9       	out	0x00, r24	; 0
 4ee:	86 b7       	in	r24, 0x36	; 54
 4f0:	84 60       	ori	r24, 0x04	; 4
 4f2:	86 bf       	out	0x36, r24	; 54
 4f4:	08 95       	ret

000004f6 <I2C_Stop>:
 4f6:	84 e9       	ldi	r24, 0x94	; 148
 4f8:	86 bf       	out	0x36, r24	; 54
 4fa:	08 95       	ret

000004fc <I2C_Check_status>:
 4fc:	21 b1       	in	r18, 0x01	; 1
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	88 3f       	cpi	r24, 0xF8	; 248
 502:	09 f0       	breq	.+2      	; 0x506 <I2C_Check_status+0xa>
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	82 2f       	mov	r24, r18
 508:	89 23       	and	r24, r25
 50a:	08 95       	ret

0000050c <I2C_start>:
 50c:	84 ea       	ldi	r24, 0xA4	; 164
 50e:	86 bf       	out	0x36, r24	; 54
 510:	06 b6       	in	r0, 0x36	; 54
 512:	07 fe       	sbrs	r0, 7
 514:	fd cf       	rjmp	.-6      	; 0x510 <I2C_start+0x4>
 516:	88 e0       	ldi	r24, 0x08	; 8
 518:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_Check_status>
 51c:	08 95       	ret

0000051e <I2C_Write>:
}


BOOL I2C_Write(u8 _8_Bit,u8 status_code)
{
	TWDR=_8_Bit;
 51e:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);
 520:	84 e8       	ldi	r24, 0x84	; 132
 522:	86 bf       	out	0x36, r24	; 54
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
 524:	06 b6       	in	r0, 0x36	; 54
 526:	07 fe       	sbrs	r0, 7
 528:	fd cf       	rjmp	.-6      	; 0x524 <I2C_Write+0x6>
	return(I2C_Check_status(status_code));
 52a:	86 2f       	mov	r24, r22
 52c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_Check_status>
}
 530:	08 95       	ret

00000532 <I2C_Read>:


BOOL I2C_Read(u8* _8_Bit,u8 status_code)
{
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	ec 01       	movw	r28, r24
 538:	86 2f       	mov	r24, r22
	TWCR=(1<<TWEN)|(1<<TWINT);
 53a:	94 e8       	ldi	r25, 0x84	; 132
 53c:	96 bf       	out	0x36, r25	; 54
	if (status_code==ReceiveData_Ack_code)
 53e:	60 35       	cpi	r22, 0x50	; 80
 540:	19 f4       	brne	.+6      	; 0x548 <I2C_Read+0x16>
	{
		SETBit(TWCR,TWEA);
 542:	96 b7       	in	r25, 0x36	; 54
 544:	90 64       	ori	r25, 0x40	; 64
 546:	96 bf       	out	0x36, r25	; 54
	}
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
 548:	06 b6       	in	r0, 0x36	; 54
 54a:	07 fe       	sbrs	r0, 7
 54c:	fd cf       	rjmp	.-6      	; 0x548 <I2C_Read+0x16>
	
	if (I2C_Check_status(status_code))
 54e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_Check_status>
 552:	88 23       	and	r24, r24
 554:	21 f0       	breq	.+8      	; 0x55e <I2C_Read+0x2c>
	{
		*_8_Bit=TWDR;
 556:	83 b1       	in	r24, 0x03	; 3
 558:	88 83       	st	Y, r24
		return TRUE;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	02 c0       	rjmp	.+4      	; 0x562 <I2C_Read+0x30>
	}
	*_8_Bit=TWDR;
 55e:	93 b1       	in	r25, 0x03	; 3
 560:	98 83       	st	Y, r25
	return FALSE;
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <__vector_13>:

u8 gps[100];
u8 i=0;
u8 CHECK[]="$GPGGA";
ISR(USART_RXC_vect)
{
 568:	1f 92       	push	r1
 56a:	0f 92       	push	r0
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	0f 92       	push	r0
 570:	11 24       	eor	r1, r1
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	ef 93       	push	r30
 578:	ff 93       	push	r31
	gps[i]=UDR;
 57a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 57e:	e8 2f       	mov	r30, r24
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	9c b1       	in	r25, 0x0c	; 12
 584:	ef 58       	subi	r30, 0x8F	; 143
 586:	ff 4f       	sbci	r31, 0xFF	; 255
 588:	90 83       	st	Z, r25
	i++;
 58a:	8f 5f       	subi	r24, 0xFF	; 255
 58c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	if (i==5)
 590:	85 30       	cpi	r24, 0x05	; 5
 592:	19 f4       	brne	.+6      	; 0x59a <__vector_13+0x32>
	{
		gps[6]='\0';
 594:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <gps+0x6>
		cli();
 598:	f8 94       	cli
	}
}
 59a:	ff 91       	pop	r31
 59c:	ef 91       	pop	r30
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <_exit>:
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
