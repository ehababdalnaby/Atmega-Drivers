
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000c68  00000cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  008000a2  008000a2  00000d3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027ff  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3a  00000000  00000000  0000377f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc3  00000000  00000000  000043b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  0000517c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000765  00000000  00000000  00005514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f4a  00000000  00000000  00005c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006bc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 30       	cpi	r26, 0x07	; 7
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 32 06 	jmp	0xc64	; 0xc64 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#error define includes.h file
#endif


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a8 97       	sbiw	r28, 0x28	; 40
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	
	u8 Time[20];
	u8 Calen[20];
	I2C_Init();
  a6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <I2C_Init>
	LCD_init();
  aa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_init>
	Write_RTC(0x00,0x00,0x00,Thr,0x20,0x05,0x95);
  ae:	0f 2e       	mov	r0, r31
  b0:	f5 e9       	ldi	r31, 0x95	; 149
  b2:	cf 2e       	mov	r12, r31
  b4:	f0 2d       	mov	r31, r0
  b6:	0f 2e       	mov	r0, r31
  b8:	f5 e0       	ldi	r31, 0x05	; 5
  ba:	ef 2e       	mov	r14, r31
  bc:	f0 2d       	mov	r31, r0
  be:	00 e2       	ldi	r16, 0x20	; 32
  c0:	25 e0       	ldi	r18, 0x05	; 5
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 47 01 	call	0x28e	; 0x28e <Write_RTC>
	while (1)
	{
		 Read_RTC(Time,Calen);
  cc:	be 01       	movw	r22, r28
  ce:	6b 5e       	subi	r22, 0xEB	; 235
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	0e 94 88 01 	call	0x310	; 0x310 <Read_RTC>
		disp_strXY(1,1,Time);
  da:	ae 01       	movw	r20, r28
  dc:	4f 5f       	subi	r20, 0xFF	; 255
  de:	5f 4f       	sbci	r21, 0xFF	; 255
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 3c 01 	call	0x278	; 0x278 <disp_strXY>
		disp_strXY(2,1,Calen);
  e8:	ae 01       	movw	r20, r28
  ea:	4b 5e       	subi	r20, 0xEB	; 235
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 3c 01 	call	0x278	; 0x278 <disp_strXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	89 e6       	ldi	r24, 0x69	; 105
  fa:	98 e1       	ldi	r25, 0x18	; 24
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x6a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x74>
 106:	00 00       	nop
 108:	e1 cf       	rjmp	.-62     	; 0xcc <main+0x3a>

0000010a <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	0e 94 33 02 	call	0x466	; 0x466 <writePin>
 112:	87 ec       	ldi	r24, 0xC7	; 199
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_latch+0xc>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_latch+0x12>
 11c:	00 00       	nop
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	8b e0       	ldi	r24, 0x0B	; 11
 122:	0e 94 33 02 	call	0x466	; 0x466 <writePin>
 126:	87 ec       	ldi	r24, 0xC7	; 199
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_latch+0x20>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_latch+0x26>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <SendToLCD>:
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	60 ef       	ldi	r22, 0xF0	; 240
 13c:	8b e3       	ldi	r24, 0x3B	; 59
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 c9 02 	call	0x592	; 0x592 <writePins>
 144:	6c 2f       	mov	r22, r28
 146:	60 7f       	andi	r22, 0xF0	; 240
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	8b e3       	ldi	r24, 0x3B	; 59
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 c9 02 	call	0x592	; 0x592 <writePins>
 152:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_latch>
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	60 ef       	ldi	r22, 0xF0	; 240
 15a:	8b e3       	ldi	r24, 0x3B	; 59
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 c9 02 	call	0x592	; 0x592 <writePins>
 162:	80 e1       	ldi	r24, 0x10	; 16
 164:	c8 9f       	mul	r28, r24
 166:	b0 01       	movw	r22, r0
 168:	11 24       	eor	r1, r1
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	8b e3       	ldi	r24, 0x3B	; 59
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 c9 02 	call	0x592	; 0x592 <writePins>
 174:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_latch>
 178:	87 ec       	ldi	r24, 0xC7	; 199
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <SendToLCD+0x48>
 180:	00 c0       	rjmp	.+0      	; 0x182 <SendToLCD+0x4e>
 182:	00 00       	nop
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <LCD_send_cmd>:
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	89 e0       	ldi	r24, 0x09	; 9
 190:	0e 94 33 02 	call	0x466	; 0x466 <writePin>
 194:	8c 2f       	mov	r24, r28
 196:	0e 94 9a 00 	call	0x134	; 0x134 <SendToLCD>
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <LCD_CLEAR>:
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_send_cmd>
 1a4:	8f e3       	ldi	r24, 0x3F	; 63
 1a6:	9f e1       	ldi	r25, 0x1F	; 31
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_CLEAR+0xa>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_CLEAR+0x10>
 1ae:	00 00       	nop
 1b0:	08 95       	ret

000001b2 <LCD_ret_Home>:
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_send_cmd>
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	9f e1       	ldi	r25, 0x1F	; 31
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_ret_Home+0xa>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_ret_Home+0x10>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <LCD_init>:
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	60 ef       	ldi	r22, 0xF0	; 240
 1ca:	8a e3       	ldi	r24, 0x3A	; 58
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <pinsDirection>
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	6e e0       	ldi	r22, 0x0E	; 14
 1d6:	87 e3       	ldi	r24, 0x37	; 55
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <pinsDirection>
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	8a e0       	ldi	r24, 0x0A	; 10
 1e2:	0e 94 33 02 	call	0x466	; 0x466 <writePin>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	83 ef       	ldi	r24, 0xF3	; 243
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <LCD_init+0x26>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_init+0x30>
 1f6:	00 00       	nop
 1f8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_ret_Home>
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_send_cmd>
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_send_cmd>
 208:	80 e1       	ldi	r24, 0x10	; 16
 20a:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_send_cmd>
 20e:	88 e2       	ldi	r24, 0x28	; 40
 210:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_send_cmd>
 214:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_CLEAR>
 218:	08 95       	ret

0000021a <LCD_send_data>:
 21a:	cf 93       	push	r28
 21c:	c8 2f       	mov	r28, r24
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	89 e0       	ldi	r24, 0x09	; 9
 222:	0e 94 33 02 	call	0x466	; 0x466 <writePin>
 226:	8c 2f       	mov	r24, r28
 228:	0e 94 9a 00 	call	0x134	; 0x134 <SendToLCD>
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <disp_char>:
 230:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_send_data>
 234:	08 95       	ret

00000236 <disp_str>:
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	8c 01       	movw	r16, r24
 23e:	c0 e0       	ldi	r28, 0x00	; 0
 240:	03 c0       	rjmp	.+6      	; 0x248 <disp_str+0x12>
 242:	0e 94 18 01 	call	0x230	; 0x230 <disp_char>
 246:	cf 5f       	subi	r28, 0xFF	; 255
 248:	f8 01       	movw	r30, r16
 24a:	ec 0f       	add	r30, r28
 24c:	f1 1d       	adc	r31, r1
 24e:	80 81       	ld	r24, Z
 250:	81 11       	cpse	r24, r1
 252:	f7 cf       	rjmp	.-18     	; 0x242 <disp_str+0xc>
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <LCD_GOTXY>:
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	29 f4       	brne	.+10     	; 0x26a <LCD_GOTXY+0xe>
 260:	8f e7       	ldi	r24, 0x7F	; 127
 262:	86 0f       	add	r24, r22
 264:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_send_cmd>
 268:	08 95       	ret
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	21 f4       	brne	.+8      	; 0x276 <LCD_GOTXY+0x1a>
 26e:	8f eb       	ldi	r24, 0xBF	; 191
 270:	86 0f       	add	r24, r22
 272:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_send_cmd>
 276:	08 95       	ret

00000278 <disp_strXY>:
	else{}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
 27e:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_GOTXY>
	disp_str(str);
 282:	ce 01       	movw	r24, r28
 284:	0e 94 1b 01 	call	0x236	; 0x236 <disp_str>
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <Write_RTC>:




void Write_RTC(u8 Seconds,u8 Minutes,u8 Hours,u8 Day,u8 Date,u8 Month,u8 Year)
{
 28e:	cf 92       	push	r12
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	f8 2e       	mov	r15, r24
 29e:	16 2f       	mov	r17, r22
 2a0:	d4 2f       	mov	r29, r20
 2a2:	c2 2f       	mov	r28, r18
	
	I2C_start();
 2a4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <I2C_start>
	I2C_Write(RTC_WRITE_ADDRESS,SCMTSLA_Ack_Code);
 2a8:	68 e1       	ldi	r22, 0x18	; 24
 2aa:	80 ed       	ldi	r24, 0xD0	; 208
 2ac:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Write(RTC_SECONDS_ADDRESS,SCMTSLA_Ack_Code);
 2b0:	68 e1       	ldi	r22, 0x18	; 24
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_start();
 2b8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <I2C_start>
	I2C_Write(RTC_WRITE_ADDRESS,SCMTSLA_Ack_Code);
 2bc:	68 e1       	ldi	r22, 0x18	; 24
 2be:	80 ed       	ldi	r24, 0xD0	; 208
 2c0:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Write(Seconds,SlaveData_Ack_code);
 2c4:	68 e2       	ldi	r22, 0x28	; 40
 2c6:	8f 2d       	mov	r24, r15
 2c8:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Write(Minutes,SlaveData_Ack_code);
 2cc:	68 e2       	ldi	r22, 0x28	; 40
 2ce:	81 2f       	mov	r24, r17
 2d0:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Write(Hours,SlaveData_Ack_code);
 2d4:	68 e2       	ldi	r22, 0x28	; 40
 2d6:	8d 2f       	mov	r24, r29
 2d8:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Write(Day,SlaveData_Ack_code);
 2dc:	68 e2       	ldi	r22, 0x28	; 40
 2de:	8c 2f       	mov	r24, r28
 2e0:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Write(Date,SlaveData_Ack_code);
 2e4:	68 e2       	ldi	r22, 0x28	; 40
 2e6:	80 2f       	mov	r24, r16
 2e8:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Write(Month,SlaveData_Ack_code);
 2ec:	68 e2       	ldi	r22, 0x28	; 40
 2ee:	8e 2d       	mov	r24, r14
 2f0:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Write(Year,SlaveData_NAck_code);
 2f4:	60 e3       	ldi	r22, 0x30	; 48
 2f6:	8c 2d       	mov	r24, r12
 2f8:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Stop();
 2fc:	0e 94 ed 02 	call	0x5da	; 0x5da <I2C_Stop>
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	cf 90       	pop	r12
 30e:	08 95       	ret

00000310 <Read_RTC>:

void Read_RTC(u8* Time,u8* Calen)
{
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	27 97       	sbiw	r28, 0x07	; 7
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	f8 2e       	mov	r15, r24
 32e:	e9 2e       	mov	r14, r25
 330:	16 2f       	mov	r17, r22
 332:	07 2f       	mov	r16, r23
	u8 Seconds, Minutes, Hours, Day, Date, Month, Year;
	I2C_start();
 334:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <I2C_start>
	I2C_Write(RTC_WRITE_ADDRESS,SCMTSLA_Ack_Code);
 338:	68 e1       	ldi	r22, 0x18	; 24
 33a:	80 ed       	ldi	r24, 0xD0	; 208
 33c:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Write(RTC_SECONDS_ADDRESS,SCMTSLA_Ack_Code);
 340:	68 e1       	ldi	r22, 0x18	; 24
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Stop();
 348:	0e 94 ed 02 	call	0x5da	; 0x5da <I2C_Stop>
	I2C_start();
 34c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <I2C_start>
	I2C_Write(RTC_READ_ADDRESS,SCMTSLA_Ack_Code);
 350:	68 e1       	ldi	r22, 0x18	; 24
 352:	81 ed       	ldi	r24, 0xD1	; 209
 354:	0e 94 01 03 	call	0x602	; 0x602 <I2C_Write>
	I2C_Read(&Seconds,ReceiveData_Ack_code);
 358:	60 e5       	ldi	r22, 0x50	; 80
 35a:	ce 01       	movw	r24, r28
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_Read>
	I2C_Read(&Minutes,ReceiveData_Ack_code);
 362:	60 e5       	ldi	r22, 0x50	; 80
 364:	ce 01       	movw	r24, r28
 366:	02 96       	adiw	r24, 0x02	; 2
 368:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_Read>
	I2C_Read(&Hours,ReceiveData_Ack_code);
 36c:	60 e5       	ldi	r22, 0x50	; 80
 36e:	ce 01       	movw	r24, r28
 370:	03 96       	adiw	r24, 0x03	; 3
 372:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_Read>
	I2C_Read(&Day,ReceiveData_Ack_code);
 376:	60 e5       	ldi	r22, 0x50	; 80
 378:	ce 01       	movw	r24, r28
 37a:	04 96       	adiw	r24, 0x04	; 4
 37c:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_Read>
	I2C_Read(&Date,ReceiveData_Ack_code);
 380:	60 e5       	ldi	r22, 0x50	; 80
 382:	ce 01       	movw	r24, r28
 384:	05 96       	adiw	r24, 0x05	; 5
 386:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_Read>
	I2C_Read(&Month,ReceiveData_Ack_code);
 38a:	60 e5       	ldi	r22, 0x50	; 80
 38c:	ce 01       	movw	r24, r28
 38e:	06 96       	adiw	r24, 0x06	; 6
 390:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_Read>
	I2C_Read(&Year,ReceiveData_NAck_code);
 394:	68 e5       	ldi	r22, 0x58	; 88
 396:	ce 01       	movw	r24, r28
 398:	07 96       	adiw	r24, 0x07	; 7
 39a:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_Read>
	I2C_Stop();
 39e:	0e 94 ed 02 	call	0x5da	; 0x5da <I2C_Stop>
	sprintf(Time,"%d%d:%d%d:%d%d",((Hours&0xf0)>>4),Hours&0x0f,((Minutes&0xf0)>>4),Minutes&0x0f,((Seconds&0xf0)>>4),Seconds&0x0f);
 3a2:	29 81       	ldd	r18, Y+1	; 0x01
 3a4:	52 2f       	mov	r21, r18
 3a6:	52 95       	swap	r21
 3a8:	5f 70       	andi	r21, 0x0F	; 15
 3aa:	9a 81       	ldd	r25, Y+2	; 0x02
 3ac:	49 2f       	mov	r20, r25
 3ae:	42 95       	swap	r20
 3b0:	4f 70       	andi	r20, 0x0F	; 15
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	38 2f       	mov	r19, r24
 3b6:	32 95       	swap	r19
 3b8:	3f 70       	andi	r19, 0x0F	; 15
 3ba:	2f 70       	andi	r18, 0x0F	; 15
 3bc:	1f 92       	push	r1
 3be:	2f 93       	push	r18
 3c0:	1f 92       	push	r1
 3c2:	5f 93       	push	r21
 3c4:	9f 70       	andi	r25, 0x0F	; 15
 3c6:	1f 92       	push	r1
 3c8:	9f 93       	push	r25
 3ca:	1f 92       	push	r1
 3cc:	4f 93       	push	r20
 3ce:	8f 70       	andi	r24, 0x0F	; 15
 3d0:	1f 92       	push	r1
 3d2:	8f 93       	push	r24
 3d4:	1f 92       	push	r1
 3d6:	3f 93       	push	r19
 3d8:	80 e8       	ldi	r24, 0x80	; 128
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	9f 93       	push	r25
 3de:	8f 93       	push	r24
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	0e 94 48 03 	call	0x690	; 0x690 <sprintf>
	sprintf(Calen,"%d%d/%d%d/%d%d %s",((Date&0xf0)>>4),Date&0x0f,((Month&0xf0)>>4),Month&0x0f,((Year&0xf0)>>4),Year&0x0f,&days[Day]);
 3e8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	4f 81       	ldd	r20, Y+7	; 0x07
 3ee:	74 2f       	mov	r23, r20
 3f0:	72 95       	swap	r23
 3f2:	7f 70       	andi	r23, 0x0F	; 15
 3f4:	3e 81       	ldd	r19, Y+6	; 0x06
 3f6:	63 2f       	mov	r22, r19
 3f8:	62 95       	swap	r22
 3fa:	6f 70       	andi	r22, 0x0F	; 15
 3fc:	2d 81       	ldd	r18, Y+5	; 0x05
 3fe:	52 2f       	mov	r21, r18
 400:	52 95       	swap	r21
 402:	5f 70       	andi	r21, 0x0F	; 15
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	80 5a       	subi	r24, 0xA0	; 160
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	9f 93       	push	r25
 412:	8f 93       	push	r24
 414:	4f 70       	andi	r20, 0x0F	; 15
 416:	1f 92       	push	r1
 418:	4f 93       	push	r20
 41a:	1f 92       	push	r1
 41c:	7f 93       	push	r23
 41e:	3f 70       	andi	r19, 0x0F	; 15
 420:	1f 92       	push	r1
 422:	3f 93       	push	r19
 424:	1f 92       	push	r1
 426:	6f 93       	push	r22
 428:	2f 70       	andi	r18, 0x0F	; 15
 42a:	1f 92       	push	r1
 42c:	2f 93       	push	r18
 42e:	1f 92       	push	r1
 430:	5f 93       	push	r21
 432:	8f e8       	ldi	r24, 0x8F	; 143
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	9f 93       	push	r25
 438:	8f 93       	push	r24
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	0e 94 48 03 	call	0x690	; 0x690 <sprintf>
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	27 96       	adiw	r28, 0x07	; 7
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	08 95       	ret

00000466 <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 466:	88 30       	cpi	r24, 0x08	; 8
 468:	f8 f4       	brcc	.+62     	; 0x4a8 <writePin+0x42>
 46a:	61 30       	cpi	r22, 0x01	; 1
 46c:	69 f4       	brne	.+26     	; 0x488 <writePin+0x22>
 46e:	4b b3       	in	r20, 0x1b	; 27
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <writePin+0x16>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <writePin+0x12>
 480:	cb 01       	movw	r24, r22
 482:	84 2b       	or	r24, r20
 484:	8b bb       	out	0x1b, r24	; 27
 486:	08 95       	ret
 488:	61 11       	cpse	r22, r1
 48a:	82 c0       	rjmp	.+260    	; 0x590 <writePin+0x12a>
 48c:	4b b3       	in	r20, 0x1b	; 27
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	b9 01       	movw	r22, r18
 494:	02 c0       	rjmp	.+4      	; 0x49a <writePin+0x34>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	8a 95       	dec	r24
 49c:	e2 f7       	brpl	.-8      	; 0x496 <writePin+0x30>
 49e:	cb 01       	movw	r24, r22
 4a0:	80 95       	com	r24
 4a2:	84 23       	and	r24, r20
 4a4:	8b bb       	out	0x1b, r24	; 27
 4a6:	08 95       	ret
 4a8:	98 ef       	ldi	r25, 0xF8	; 248
 4aa:	98 0f       	add	r25, r24
 4ac:	98 30       	cpi	r25, 0x08	; 8
 4ae:	18 f5       	brcc	.+70     	; 0x4f6 <writePin+0x90>
 4b0:	61 30       	cpi	r22, 0x01	; 1
 4b2:	79 f4       	brne	.+30     	; 0x4d2 <writePin+0x6c>
 4b4:	48 b3       	in	r20, 0x18	; 24
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	08 97       	sbiw	r24, 0x08	; 8
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <writePin+0x60>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <writePin+0x5c>
 4ca:	cb 01       	movw	r24, r22
 4cc:	84 2b       	or	r24, r20
 4ce:	88 bb       	out	0x18, r24	; 24
 4d0:	08 95       	ret
 4d2:	61 11       	cpse	r22, r1
 4d4:	5d c0       	rjmp	.+186    	; 0x590 <writePin+0x12a>
 4d6:	48 b3       	in	r20, 0x18	; 24
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	08 97       	sbiw	r24, 0x08	; 8
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	b9 01       	movw	r22, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <writePin+0x82>
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	8a 95       	dec	r24
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <writePin+0x7e>
 4ec:	cb 01       	movw	r24, r22
 4ee:	80 95       	com	r24
 4f0:	84 23       	and	r24, r20
 4f2:	88 bb       	out	0x18, r24	; 24
 4f4:	08 95       	ret
 4f6:	90 ef       	ldi	r25, 0xF0	; 240
 4f8:	98 0f       	add	r25, r24
 4fa:	98 30       	cpi	r25, 0x08	; 8
 4fc:	18 f5       	brcc	.+70     	; 0x544 <writePin+0xde>
 4fe:	61 30       	cpi	r22, 0x01	; 1
 500:	79 f4       	brne	.+30     	; 0x520 <writePin+0xba>
 502:	45 b3       	in	r20, 0x15	; 21
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	40 97       	sbiw	r24, 0x10	; 16
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	b9 01       	movw	r22, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <writePin+0xae>
 510:	66 0f       	add	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	8a 95       	dec	r24
 516:	e2 f7       	brpl	.-8      	; 0x510 <writePin+0xaa>
 518:	cb 01       	movw	r24, r22
 51a:	84 2b       	or	r24, r20
 51c:	85 bb       	out	0x15, r24	; 21
 51e:	08 95       	ret
 520:	61 11       	cpse	r22, r1
 522:	36 c0       	rjmp	.+108    	; 0x590 <writePin+0x12a>
 524:	45 b3       	in	r20, 0x15	; 21
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	40 97       	sbiw	r24, 0x10	; 16
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	b9 01       	movw	r22, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <writePin+0xd0>
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	8a 95       	dec	r24
 538:	e2 f7       	brpl	.-8      	; 0x532 <writePin+0xcc>
 53a:	cb 01       	movw	r24, r22
 53c:	80 95       	com	r24
 53e:	84 23       	and	r24, r20
 540:	85 bb       	out	0x15, r24	; 21
 542:	08 95       	ret
 544:	98 ee       	ldi	r25, 0xE8	; 232
 546:	98 0f       	add	r25, r24
 548:	98 30       	cpi	r25, 0x08	; 8
 54a:	10 f5       	brcc	.+68     	; 0x590 <writePin+0x12a>
 54c:	61 30       	cpi	r22, 0x01	; 1
 54e:	79 f4       	brne	.+30     	; 0x56e <writePin+0x108>
 550:	42 b3       	in	r20, 0x12	; 18
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	48 97       	sbiw	r24, 0x18	; 24
 556:	21 e0       	ldi	r18, 0x01	; 1
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	b9 01       	movw	r22, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <writePin+0xfc>
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	8a 95       	dec	r24
 564:	e2 f7       	brpl	.-8      	; 0x55e <writePin+0xf8>
 566:	cb 01       	movw	r24, r22
 568:	84 2b       	or	r24, r20
 56a:	82 bb       	out	0x12, r24	; 18
 56c:	08 95       	ret
 56e:	61 11       	cpse	r22, r1
 570:	0f c0       	rjmp	.+30     	; 0x590 <writePin+0x12a>
 572:	42 b3       	in	r20, 0x12	; 18
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	48 97       	sbiw	r24, 0x18	; 24
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	b9 01       	movw	r22, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <writePin+0x11e>
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <writePin+0x11a>
 588:	cb 01       	movw	r24, r22
 58a:	80 95       	com	r24
 58c:	84 23       	and	r24, r20
 58e:	82 bb       	out	0x12, r24	; 18
 590:	08 95       	ret

00000592 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 592:	41 30       	cpi	r20, 0x01	; 1
 594:	29 f4       	brne	.+10     	; 0x5a0 <writePins+0xe>
		SETBits(*port,mask);
 596:	fc 01       	movw	r30, r24
 598:	20 81       	ld	r18, Z
 59a:	62 2b       	or	r22, r18
 59c:	60 83       	st	Z, r22
 59e:	08 95       	ret
	else if(logic==LOW)
 5a0:	41 11       	cpse	r20, r1
 5a2:	05 c0       	rjmp	.+10     	; 0x5ae <writePins+0x1c>
		CLRBits(*port,mask);
 5a4:	fc 01       	movw	r30, r24
 5a6:	20 81       	ld	r18, Z
 5a8:	60 95       	com	r22
 5aa:	62 23       	and	r22, r18
 5ac:	60 83       	st	Z, r22
 5ae:	08 95       	ret

000005b0 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 5b0:	41 30       	cpi	r20, 0x01	; 1
 5b2:	29 f4       	brne	.+10     	; 0x5be <pinsDirection+0xe>
		SETBits(*ddr,mask);
 5b4:	fc 01       	movw	r30, r24
 5b6:	20 81       	ld	r18, Z
 5b8:	62 2b       	or	r22, r18
 5ba:	60 83       	st	Z, r22
 5bc:	08 95       	ret
	else if(direction == INPUT)
 5be:	41 11       	cpse	r20, r1
 5c0:	05 c0       	rjmp	.+10     	; 0x5cc <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 5c2:	fc 01       	movw	r30, r24
 5c4:	20 81       	ld	r18, Z
 5c6:	60 95       	com	r22
 5c8:	62 23       	and	r22, r18
 5ca:	60 83       	st	Z, r22
 5cc:	08 95       	ret

000005ce <I2C_Init>:
BOOL I2C_Restart(void)
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWSTA); //enable the i2c , set the flag and send Restart
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
	return(I2C_Check_status(Restart_Code));
}
 5ce:	80 e2       	ldi	r24, 0x20	; 32
 5d0:	80 b9       	out	0x00, r24	; 0
 5d2:	86 b7       	in	r24, 0x36	; 54
 5d4:	84 60       	ori	r24, 0x04	; 4
 5d6:	86 bf       	out	0x36, r24	; 54
 5d8:	08 95       	ret

000005da <I2C_Stop>:
 5da:	84 e9       	ldi	r24, 0x94	; 148
 5dc:	86 bf       	out	0x36, r24	; 54
 5de:	08 95       	ret

000005e0 <I2C_Check_status>:
 5e0:	21 b1       	in	r18, 0x01	; 1
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	88 3f       	cpi	r24, 0xF8	; 248
 5e6:	09 f0       	breq	.+2      	; 0x5ea <I2C_Check_status+0xa>
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	82 2f       	mov	r24, r18
 5ec:	89 23       	and	r24, r25
 5ee:	08 95       	ret

000005f0 <I2C_start>:
 5f0:	84 ea       	ldi	r24, 0xA4	; 164
 5f2:	86 bf       	out	0x36, r24	; 54
 5f4:	06 b6       	in	r0, 0x36	; 54
 5f6:	07 fe       	sbrs	r0, 7
 5f8:	fd cf       	rjmp	.-6      	; 0x5f4 <I2C_start+0x4>
 5fa:	88 e0       	ldi	r24, 0x08	; 8
 5fc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <I2C_Check_status>
 600:	08 95       	ret

00000602 <I2C_Write>:
}


BOOL I2C_Write(u8 _8_Bit,u8 status_code)
{
	TWDR=_8_Bit;
 602:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);
 604:	84 e8       	ldi	r24, 0x84	; 132
 606:	86 bf       	out	0x36, r24	; 54
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
 608:	06 b6       	in	r0, 0x36	; 54
 60a:	07 fe       	sbrs	r0, 7
 60c:	fd cf       	rjmp	.-6      	; 0x608 <I2C_Write+0x6>
	return(I2C_Check_status(status_code));
 60e:	86 2f       	mov	r24, r22
 610:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <I2C_Check_status>
}
 614:	08 95       	ret

00000616 <I2C_Read>:


BOOL I2C_Read(u8* _8_Bit,u8 status_code)
{
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	ec 01       	movw	r28, r24
 61c:	86 2f       	mov	r24, r22
	TWCR=(1<<TWEN)|(1<<TWINT);
 61e:	94 e8       	ldi	r25, 0x84	; 132
 620:	96 bf       	out	0x36, r25	; 54
	if (status_code==ReceiveData_Ack_code)
 622:	60 35       	cpi	r22, 0x50	; 80
 624:	19 f4       	brne	.+6      	; 0x62c <I2C_Read+0x16>
	{
		SETBit(TWCR,TWEA);
 626:	96 b7       	in	r25, 0x36	; 54
 628:	90 64       	ori	r25, 0x40	; 64
 62a:	96 bf       	out	0x36, r25	; 54
	}
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
 62c:	06 b6       	in	r0, 0x36	; 54
 62e:	07 fe       	sbrs	r0, 7
 630:	fd cf       	rjmp	.-6      	; 0x62c <I2C_Read+0x16>
	
	if (I2C_Check_status(status_code))
 632:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <I2C_Check_status>
 636:	88 23       	and	r24, r24
 638:	21 f0       	breq	.+8      	; 0x642 <I2C_Read+0x2c>
	{
		*_8_Bit=TWDR;
 63a:	83 b1       	in	r24, 0x03	; 3
 63c:	88 83       	st	Y, r24
		return TRUE;
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	02 c0       	rjmp	.+4      	; 0x646 <I2C_Read+0x30>
	}
	*_8_Bit=TWDR;
 642:	93 b1       	in	r25, 0x03	; 3
 644:	98 83       	st	Y, r25
	return FALSE;
}
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <__vector_13>:

u8 gps[100];
u8 i=0;
u8 CHECK[]="$GPGGA";
ISR(USART_RXC_vect)
{
 64c:	1f 92       	push	r1
 64e:	0f 92       	push	r0
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	0f 92       	push	r0
 654:	11 24       	eor	r1, r1
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	ef 93       	push	r30
 65c:	ff 93       	push	r31
	gps[i]=UDR;
 65e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
 662:	e8 2f       	mov	r30, r24
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	9c b1       	in	r25, 0x0c	; 12
 668:	ed 55       	subi	r30, 0x5D	; 93
 66a:	ff 4f       	sbci	r31, 0xFF	; 255
 66c:	90 83       	st	Z, r25
	i++;
 66e:	8f 5f       	subi	r24, 0xFF	; 255
 670:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end>
	if (i==5)
 674:	85 30       	cpi	r24, 0x05	; 5
 676:	19 f4       	brne	.+6      	; 0x67e <__vector_13+0x32>
	{
		gps[6]='\0';
 678:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <gps+0x6>
		cli();
 67c:	f8 94       	cli
	}
}
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <sprintf>:
 690:	ae e0       	ldi	r26, 0x0E	; 14
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	ee e4       	ldi	r30, 0x4E	; 78
 696:	f3 e0       	ldi	r31, 0x03	; 3
 698:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__prologue_saves__+0x1c>
 69c:	0d 89       	ldd	r16, Y+21	; 0x15
 69e:	1e 89       	ldd	r17, Y+22	; 0x16
 6a0:	86 e0       	ldi	r24, 0x06	; 6
 6a2:	8c 83       	std	Y+4, r24	; 0x04
 6a4:	1a 83       	std	Y+2, r17	; 0x02
 6a6:	09 83       	std	Y+1, r16	; 0x01
 6a8:	8f ef       	ldi	r24, 0xFF	; 255
 6aa:	9f e7       	ldi	r25, 0x7F	; 127
 6ac:	9e 83       	std	Y+6, r25	; 0x06
 6ae:	8d 83       	std	Y+5, r24	; 0x05
 6b0:	ae 01       	movw	r20, r28
 6b2:	47 5e       	subi	r20, 0xE7	; 231
 6b4:	5f 4f       	sbci	r21, 0xFF	; 255
 6b6:	6f 89       	ldd	r22, Y+23	; 0x17
 6b8:	78 8d       	ldd	r23, Y+24	; 0x18
 6ba:	ce 01       	movw	r24, r28
 6bc:	01 96       	adiw	r24, 0x01	; 1
 6be:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <vfprintf>
 6c2:	ef 81       	ldd	r30, Y+7	; 0x07
 6c4:	f8 85       	ldd	r31, Y+8	; 0x08
 6c6:	e0 0f       	add	r30, r16
 6c8:	f1 1f       	adc	r31, r17
 6ca:	10 82       	st	Z, r1
 6cc:	2e 96       	adiw	r28, 0x0e	; 14
 6ce:	e4 e0       	ldi	r30, 0x04	; 4
 6d0:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__epilogue_restores__+0x1c>

000006d4 <vfprintf>:
 6d4:	ab e0       	ldi	r26, 0x0B	; 11
 6d6:	b0 e0       	ldi	r27, 0x00	; 0
 6d8:	e0 e7       	ldi	r30, 0x70	; 112
 6da:	f3 e0       	ldi	r31, 0x03	; 3
 6dc:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__prologue_saves__>
 6e0:	6c 01       	movw	r12, r24
 6e2:	7b 01       	movw	r14, r22
 6e4:	8a 01       	movw	r16, r20
 6e6:	fc 01       	movw	r30, r24
 6e8:	17 82       	std	Z+7, r1	; 0x07
 6ea:	16 82       	std	Z+6, r1	; 0x06
 6ec:	83 81       	ldd	r24, Z+3	; 0x03
 6ee:	81 ff       	sbrs	r24, 1
 6f0:	cc c1       	rjmp	.+920    	; 0xa8a <__stack+0x22b>
 6f2:	ce 01       	movw	r24, r28
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	3c 01       	movw	r6, r24
 6f8:	f6 01       	movw	r30, r12
 6fa:	93 81       	ldd	r25, Z+3	; 0x03
 6fc:	f7 01       	movw	r30, r14
 6fe:	93 fd       	sbrc	r25, 3
 700:	85 91       	lpm	r24, Z+
 702:	93 ff       	sbrs	r25, 3
 704:	81 91       	ld	r24, Z+
 706:	7f 01       	movw	r14, r30
 708:	88 23       	and	r24, r24
 70a:	09 f4       	brne	.+2      	; 0x70e <vfprintf+0x3a>
 70c:	ba c1       	rjmp	.+884    	; 0xa82 <__stack+0x223>
 70e:	85 32       	cpi	r24, 0x25	; 37
 710:	39 f4       	brne	.+14     	; 0x720 <vfprintf+0x4c>
 712:	93 fd       	sbrc	r25, 3
 714:	85 91       	lpm	r24, Z+
 716:	93 ff       	sbrs	r25, 3
 718:	81 91       	ld	r24, Z+
 71a:	7f 01       	movw	r14, r30
 71c:	85 32       	cpi	r24, 0x25	; 37
 71e:	29 f4       	brne	.+10     	; 0x72a <vfprintf+0x56>
 720:	b6 01       	movw	r22, r12
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 61 05 	call	0xac2	; 0xac2 <fputc>
 728:	e7 cf       	rjmp	.-50     	; 0x6f8 <vfprintf+0x24>
 72a:	91 2c       	mov	r9, r1
 72c:	21 2c       	mov	r2, r1
 72e:	31 2c       	mov	r3, r1
 730:	ff e1       	ldi	r31, 0x1F	; 31
 732:	f3 15       	cp	r31, r3
 734:	d8 f0       	brcs	.+54     	; 0x76c <vfprintf+0x98>
 736:	8b 32       	cpi	r24, 0x2B	; 43
 738:	79 f0       	breq	.+30     	; 0x758 <vfprintf+0x84>
 73a:	38 f4       	brcc	.+14     	; 0x74a <vfprintf+0x76>
 73c:	80 32       	cpi	r24, 0x20	; 32
 73e:	79 f0       	breq	.+30     	; 0x75e <vfprintf+0x8a>
 740:	83 32       	cpi	r24, 0x23	; 35
 742:	a1 f4       	brne	.+40     	; 0x76c <vfprintf+0x98>
 744:	23 2d       	mov	r18, r3
 746:	20 61       	ori	r18, 0x10	; 16
 748:	1d c0       	rjmp	.+58     	; 0x784 <vfprintf+0xb0>
 74a:	8d 32       	cpi	r24, 0x2D	; 45
 74c:	61 f0       	breq	.+24     	; 0x766 <vfprintf+0x92>
 74e:	80 33       	cpi	r24, 0x30	; 48
 750:	69 f4       	brne	.+26     	; 0x76c <vfprintf+0x98>
 752:	23 2d       	mov	r18, r3
 754:	21 60       	ori	r18, 0x01	; 1
 756:	16 c0       	rjmp	.+44     	; 0x784 <vfprintf+0xb0>
 758:	83 2d       	mov	r24, r3
 75a:	82 60       	ori	r24, 0x02	; 2
 75c:	38 2e       	mov	r3, r24
 75e:	e3 2d       	mov	r30, r3
 760:	e4 60       	ori	r30, 0x04	; 4
 762:	3e 2e       	mov	r3, r30
 764:	2a c0       	rjmp	.+84     	; 0x7ba <vfprintf+0xe6>
 766:	f3 2d       	mov	r31, r3
 768:	f8 60       	ori	r31, 0x08	; 8
 76a:	1d c0       	rjmp	.+58     	; 0x7a6 <vfprintf+0xd2>
 76c:	37 fc       	sbrc	r3, 7
 76e:	2d c0       	rjmp	.+90     	; 0x7ca <vfprintf+0xf6>
 770:	20 ed       	ldi	r18, 0xD0	; 208
 772:	28 0f       	add	r18, r24
 774:	2a 30       	cpi	r18, 0x0A	; 10
 776:	40 f0       	brcs	.+16     	; 0x788 <vfprintf+0xb4>
 778:	8e 32       	cpi	r24, 0x2E	; 46
 77a:	b9 f4       	brne	.+46     	; 0x7aa <vfprintf+0xd6>
 77c:	36 fc       	sbrc	r3, 6
 77e:	81 c1       	rjmp	.+770    	; 0xa82 <__stack+0x223>
 780:	23 2d       	mov	r18, r3
 782:	20 64       	ori	r18, 0x40	; 64
 784:	32 2e       	mov	r3, r18
 786:	19 c0       	rjmp	.+50     	; 0x7ba <vfprintf+0xe6>
 788:	36 fe       	sbrs	r3, 6
 78a:	06 c0       	rjmp	.+12     	; 0x798 <vfprintf+0xc4>
 78c:	8a e0       	ldi	r24, 0x0A	; 10
 78e:	98 9e       	mul	r9, r24
 790:	20 0d       	add	r18, r0
 792:	11 24       	eor	r1, r1
 794:	92 2e       	mov	r9, r18
 796:	11 c0       	rjmp	.+34     	; 0x7ba <vfprintf+0xe6>
 798:	ea e0       	ldi	r30, 0x0A	; 10
 79a:	2e 9e       	mul	r2, r30
 79c:	20 0d       	add	r18, r0
 79e:	11 24       	eor	r1, r1
 7a0:	22 2e       	mov	r2, r18
 7a2:	f3 2d       	mov	r31, r3
 7a4:	f0 62       	ori	r31, 0x20	; 32
 7a6:	3f 2e       	mov	r3, r31
 7a8:	08 c0       	rjmp	.+16     	; 0x7ba <vfprintf+0xe6>
 7aa:	8c 36       	cpi	r24, 0x6C	; 108
 7ac:	21 f4       	brne	.+8      	; 0x7b6 <vfprintf+0xe2>
 7ae:	83 2d       	mov	r24, r3
 7b0:	80 68       	ori	r24, 0x80	; 128
 7b2:	38 2e       	mov	r3, r24
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <vfprintf+0xe6>
 7b6:	88 36       	cpi	r24, 0x68	; 104
 7b8:	41 f4       	brne	.+16     	; 0x7ca <vfprintf+0xf6>
 7ba:	f7 01       	movw	r30, r14
 7bc:	93 fd       	sbrc	r25, 3
 7be:	85 91       	lpm	r24, Z+
 7c0:	93 ff       	sbrs	r25, 3
 7c2:	81 91       	ld	r24, Z+
 7c4:	7f 01       	movw	r14, r30
 7c6:	81 11       	cpse	r24, r1
 7c8:	b3 cf       	rjmp	.-154    	; 0x730 <vfprintf+0x5c>
 7ca:	98 2f       	mov	r25, r24
 7cc:	9f 7d       	andi	r25, 0xDF	; 223
 7ce:	95 54       	subi	r25, 0x45	; 69
 7d0:	93 30       	cpi	r25, 0x03	; 3
 7d2:	28 f4       	brcc	.+10     	; 0x7de <vfprintf+0x10a>
 7d4:	0c 5f       	subi	r16, 0xFC	; 252
 7d6:	1f 4f       	sbci	r17, 0xFF	; 255
 7d8:	9f e3       	ldi	r25, 0x3F	; 63
 7da:	99 83       	std	Y+1, r25	; 0x01
 7dc:	0d c0       	rjmp	.+26     	; 0x7f8 <vfprintf+0x124>
 7de:	83 36       	cpi	r24, 0x63	; 99
 7e0:	31 f0       	breq	.+12     	; 0x7ee <vfprintf+0x11a>
 7e2:	83 37       	cpi	r24, 0x73	; 115
 7e4:	71 f0       	breq	.+28     	; 0x802 <vfprintf+0x12e>
 7e6:	83 35       	cpi	r24, 0x53	; 83
 7e8:	09 f0       	breq	.+2      	; 0x7ec <vfprintf+0x118>
 7ea:	59 c0       	rjmp	.+178    	; 0x89e <__stack+0x3f>
 7ec:	21 c0       	rjmp	.+66     	; 0x830 <vfprintf+0x15c>
 7ee:	f8 01       	movw	r30, r16
 7f0:	80 81       	ld	r24, Z
 7f2:	89 83       	std	Y+1, r24	; 0x01
 7f4:	0e 5f       	subi	r16, 0xFE	; 254
 7f6:	1f 4f       	sbci	r17, 0xFF	; 255
 7f8:	88 24       	eor	r8, r8
 7fa:	83 94       	inc	r8
 7fc:	91 2c       	mov	r9, r1
 7fe:	53 01       	movw	r10, r6
 800:	13 c0       	rjmp	.+38     	; 0x828 <vfprintf+0x154>
 802:	28 01       	movw	r4, r16
 804:	f2 e0       	ldi	r31, 0x02	; 2
 806:	4f 0e       	add	r4, r31
 808:	51 1c       	adc	r5, r1
 80a:	f8 01       	movw	r30, r16
 80c:	a0 80       	ld	r10, Z
 80e:	b1 80       	ldd	r11, Z+1	; 0x01
 810:	36 fe       	sbrs	r3, 6
 812:	03 c0       	rjmp	.+6      	; 0x81a <vfprintf+0x146>
 814:	69 2d       	mov	r22, r9
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	02 c0       	rjmp	.+4      	; 0x81e <vfprintf+0x14a>
 81a:	6f ef       	ldi	r22, 0xFF	; 255
 81c:	7f ef       	ldi	r23, 0xFF	; 255
 81e:	c5 01       	movw	r24, r10
 820:	0e 94 56 05 	call	0xaac	; 0xaac <strnlen>
 824:	4c 01       	movw	r8, r24
 826:	82 01       	movw	r16, r4
 828:	f3 2d       	mov	r31, r3
 82a:	ff 77       	andi	r31, 0x7F	; 127
 82c:	3f 2e       	mov	r3, r31
 82e:	16 c0       	rjmp	.+44     	; 0x85c <vfprintf+0x188>
 830:	28 01       	movw	r4, r16
 832:	22 e0       	ldi	r18, 0x02	; 2
 834:	42 0e       	add	r4, r18
 836:	51 1c       	adc	r5, r1
 838:	f8 01       	movw	r30, r16
 83a:	a0 80       	ld	r10, Z
 83c:	b1 80       	ldd	r11, Z+1	; 0x01
 83e:	36 fe       	sbrs	r3, 6
 840:	03 c0       	rjmp	.+6      	; 0x848 <vfprintf+0x174>
 842:	69 2d       	mov	r22, r9
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	02 c0       	rjmp	.+4      	; 0x84c <vfprintf+0x178>
 848:	6f ef       	ldi	r22, 0xFF	; 255
 84a:	7f ef       	ldi	r23, 0xFF	; 255
 84c:	c5 01       	movw	r24, r10
 84e:	0e 94 4b 05 	call	0xa96	; 0xa96 <strnlen_P>
 852:	4c 01       	movw	r8, r24
 854:	f3 2d       	mov	r31, r3
 856:	f0 68       	ori	r31, 0x80	; 128
 858:	3f 2e       	mov	r3, r31
 85a:	82 01       	movw	r16, r4
 85c:	33 fc       	sbrc	r3, 3
 85e:	1b c0       	rjmp	.+54     	; 0x896 <__stack+0x37>
 860:	82 2d       	mov	r24, r2
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	88 16       	cp	r8, r24
 866:	99 06       	cpc	r9, r25
 868:	b0 f4       	brcc	.+44     	; 0x896 <__stack+0x37>
 86a:	b6 01       	movw	r22, r12
 86c:	80 e2       	ldi	r24, 0x20	; 32
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 61 05 	call	0xac2	; 0xac2 <fputc>
 874:	2a 94       	dec	r2
 876:	f4 cf       	rjmp	.-24     	; 0x860 <__stack+0x1>
 878:	f5 01       	movw	r30, r10
 87a:	37 fc       	sbrc	r3, 7
 87c:	85 91       	lpm	r24, Z+
 87e:	37 fe       	sbrs	r3, 7
 880:	81 91       	ld	r24, Z+
 882:	5f 01       	movw	r10, r30
 884:	b6 01       	movw	r22, r12
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 61 05 	call	0xac2	; 0xac2 <fputc>
 88c:	21 10       	cpse	r2, r1
 88e:	2a 94       	dec	r2
 890:	21 e0       	ldi	r18, 0x01	; 1
 892:	82 1a       	sub	r8, r18
 894:	91 08       	sbc	r9, r1
 896:	81 14       	cp	r8, r1
 898:	91 04       	cpc	r9, r1
 89a:	71 f7       	brne	.-36     	; 0x878 <__stack+0x19>
 89c:	e8 c0       	rjmp	.+464    	; 0xa6e <__stack+0x20f>
 89e:	84 36       	cpi	r24, 0x64	; 100
 8a0:	11 f0       	breq	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	89 36       	cpi	r24, 0x69	; 105
 8a4:	41 f5       	brne	.+80     	; 0x8f6 <__stack+0x97>
 8a6:	f8 01       	movw	r30, r16
 8a8:	37 fe       	sbrs	r3, 7
 8aa:	07 c0       	rjmp	.+14     	; 0x8ba <__stack+0x5b>
 8ac:	60 81       	ld	r22, Z
 8ae:	71 81       	ldd	r23, Z+1	; 0x01
 8b0:	82 81       	ldd	r24, Z+2	; 0x02
 8b2:	93 81       	ldd	r25, Z+3	; 0x03
 8b4:	0c 5f       	subi	r16, 0xFC	; 252
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__stack+0x6b>
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	07 2e       	mov	r0, r23
 8c0:	00 0c       	add	r0, r0
 8c2:	88 0b       	sbc	r24, r24
 8c4:	99 0b       	sbc	r25, r25
 8c6:	0e 5f       	subi	r16, 0xFE	; 254
 8c8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ca:	f3 2d       	mov	r31, r3
 8cc:	ff 76       	andi	r31, 0x6F	; 111
 8ce:	3f 2e       	mov	r3, r31
 8d0:	97 ff       	sbrs	r25, 7
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
 8d4:	90 95       	com	r25
 8d6:	80 95       	com	r24
 8d8:	70 95       	com	r23
 8da:	61 95       	neg	r22
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	8f 4f       	sbci	r24, 0xFF	; 255
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	f0 68       	ori	r31, 0x80	; 128
 8e4:	3f 2e       	mov	r3, r31
 8e6:	2a e0       	ldi	r18, 0x0A	; 10
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	a3 01       	movw	r20, r6
 8ec:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__ultoa_invert>
 8f0:	88 2e       	mov	r8, r24
 8f2:	86 18       	sub	r8, r6
 8f4:	45 c0       	rjmp	.+138    	; 0x980 <__stack+0x121>
 8f6:	85 37       	cpi	r24, 0x75	; 117
 8f8:	31 f4       	brne	.+12     	; 0x906 <__stack+0xa7>
 8fa:	23 2d       	mov	r18, r3
 8fc:	2f 7e       	andi	r18, 0xEF	; 239
 8fe:	b2 2e       	mov	r11, r18
 900:	2a e0       	ldi	r18, 0x0A	; 10
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	25 c0       	rjmp	.+74     	; 0x950 <__stack+0xf1>
 906:	93 2d       	mov	r25, r3
 908:	99 7f       	andi	r25, 0xF9	; 249
 90a:	b9 2e       	mov	r11, r25
 90c:	8f 36       	cpi	r24, 0x6F	; 111
 90e:	c1 f0       	breq	.+48     	; 0x940 <__stack+0xe1>
 910:	18 f4       	brcc	.+6      	; 0x918 <__stack+0xb9>
 912:	88 35       	cpi	r24, 0x58	; 88
 914:	79 f0       	breq	.+30     	; 0x934 <__stack+0xd5>
 916:	b5 c0       	rjmp	.+362    	; 0xa82 <__stack+0x223>
 918:	80 37       	cpi	r24, 0x70	; 112
 91a:	19 f0       	breq	.+6      	; 0x922 <__stack+0xc3>
 91c:	88 37       	cpi	r24, 0x78	; 120
 91e:	21 f0       	breq	.+8      	; 0x928 <__stack+0xc9>
 920:	b0 c0       	rjmp	.+352    	; 0xa82 <__stack+0x223>
 922:	e9 2f       	mov	r30, r25
 924:	e0 61       	ori	r30, 0x10	; 16
 926:	be 2e       	mov	r11, r30
 928:	b4 fe       	sbrs	r11, 4
 92a:	0d c0       	rjmp	.+26     	; 0x946 <__stack+0xe7>
 92c:	fb 2d       	mov	r31, r11
 92e:	f4 60       	ori	r31, 0x04	; 4
 930:	bf 2e       	mov	r11, r31
 932:	09 c0       	rjmp	.+18     	; 0x946 <__stack+0xe7>
 934:	34 fe       	sbrs	r3, 4
 936:	0a c0       	rjmp	.+20     	; 0x94c <__stack+0xed>
 938:	29 2f       	mov	r18, r25
 93a:	26 60       	ori	r18, 0x06	; 6
 93c:	b2 2e       	mov	r11, r18
 93e:	06 c0       	rjmp	.+12     	; 0x94c <__stack+0xed>
 940:	28 e0       	ldi	r18, 0x08	; 8
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	05 c0       	rjmp	.+10     	; 0x950 <__stack+0xf1>
 946:	20 e1       	ldi	r18, 0x10	; 16
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0xf1>
 94c:	20 e1       	ldi	r18, 0x10	; 16
 94e:	32 e0       	ldi	r19, 0x02	; 2
 950:	f8 01       	movw	r30, r16
 952:	b7 fe       	sbrs	r11, 7
 954:	07 c0       	rjmp	.+14     	; 0x964 <__stack+0x105>
 956:	60 81       	ld	r22, Z
 958:	71 81       	ldd	r23, Z+1	; 0x01
 95a:	82 81       	ldd	r24, Z+2	; 0x02
 95c:	93 81       	ldd	r25, Z+3	; 0x03
 95e:	0c 5f       	subi	r16, 0xFC	; 252
 960:	1f 4f       	sbci	r17, 0xFF	; 255
 962:	06 c0       	rjmp	.+12     	; 0x970 <__stack+0x111>
 964:	60 81       	ld	r22, Z
 966:	71 81       	ldd	r23, Z+1	; 0x01
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 5f       	subi	r16, 0xFE	; 254
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	a3 01       	movw	r20, r6
 972:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__ultoa_invert>
 976:	88 2e       	mov	r8, r24
 978:	86 18       	sub	r8, r6
 97a:	fb 2d       	mov	r31, r11
 97c:	ff 77       	andi	r31, 0x7F	; 127
 97e:	3f 2e       	mov	r3, r31
 980:	36 fe       	sbrs	r3, 6
 982:	0d c0       	rjmp	.+26     	; 0x99e <__stack+0x13f>
 984:	23 2d       	mov	r18, r3
 986:	2e 7f       	andi	r18, 0xFE	; 254
 988:	a2 2e       	mov	r10, r18
 98a:	89 14       	cp	r8, r9
 98c:	58 f4       	brcc	.+22     	; 0x9a4 <__stack+0x145>
 98e:	34 fe       	sbrs	r3, 4
 990:	0b c0       	rjmp	.+22     	; 0x9a8 <__stack+0x149>
 992:	32 fc       	sbrc	r3, 2
 994:	09 c0       	rjmp	.+18     	; 0x9a8 <__stack+0x149>
 996:	83 2d       	mov	r24, r3
 998:	8e 7e       	andi	r24, 0xEE	; 238
 99a:	a8 2e       	mov	r10, r24
 99c:	05 c0       	rjmp	.+10     	; 0x9a8 <__stack+0x149>
 99e:	b8 2c       	mov	r11, r8
 9a0:	a3 2c       	mov	r10, r3
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <__stack+0x14b>
 9a4:	b8 2c       	mov	r11, r8
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__stack+0x14b>
 9a8:	b9 2c       	mov	r11, r9
 9aa:	a4 fe       	sbrs	r10, 4
 9ac:	0f c0       	rjmp	.+30     	; 0x9cc <__stack+0x16d>
 9ae:	fe 01       	movw	r30, r28
 9b0:	e8 0d       	add	r30, r8
 9b2:	f1 1d       	adc	r31, r1
 9b4:	80 81       	ld	r24, Z
 9b6:	80 33       	cpi	r24, 0x30	; 48
 9b8:	21 f4       	brne	.+8      	; 0x9c2 <__stack+0x163>
 9ba:	9a 2d       	mov	r25, r10
 9bc:	99 7e       	andi	r25, 0xE9	; 233
 9be:	a9 2e       	mov	r10, r25
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <__stack+0x175>
 9c2:	a2 fe       	sbrs	r10, 2
 9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <__stack+0x173>
 9c6:	b3 94       	inc	r11
 9c8:	b3 94       	inc	r11
 9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <__stack+0x175>
 9cc:	8a 2d       	mov	r24, r10
 9ce:	86 78       	andi	r24, 0x86	; 134
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <__stack+0x175>
 9d2:	b3 94       	inc	r11
 9d4:	a3 fc       	sbrc	r10, 3
 9d6:	11 c0       	rjmp	.+34     	; 0x9fa <__stack+0x19b>
 9d8:	a0 fe       	sbrs	r10, 0
 9da:	06 c0       	rjmp	.+12     	; 0x9e8 <__stack+0x189>
 9dc:	b2 14       	cp	r11, r2
 9de:	88 f4       	brcc	.+34     	; 0xa02 <__stack+0x1a3>
 9e0:	28 0c       	add	r2, r8
 9e2:	92 2c       	mov	r9, r2
 9e4:	9b 18       	sub	r9, r11
 9e6:	0e c0       	rjmp	.+28     	; 0xa04 <__stack+0x1a5>
 9e8:	b2 14       	cp	r11, r2
 9ea:	60 f4       	brcc	.+24     	; 0xa04 <__stack+0x1a5>
 9ec:	b6 01       	movw	r22, r12
 9ee:	80 e2       	ldi	r24, 0x20	; 32
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 61 05 	call	0xac2	; 0xac2 <fputc>
 9f6:	b3 94       	inc	r11
 9f8:	f7 cf       	rjmp	.-18     	; 0x9e8 <__stack+0x189>
 9fa:	b2 14       	cp	r11, r2
 9fc:	18 f4       	brcc	.+6      	; 0xa04 <__stack+0x1a5>
 9fe:	2b 18       	sub	r2, r11
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <__stack+0x1a7>
 a02:	98 2c       	mov	r9, r8
 a04:	21 2c       	mov	r2, r1
 a06:	a4 fe       	sbrs	r10, 4
 a08:	10 c0       	rjmp	.+32     	; 0xa2a <__stack+0x1cb>
 a0a:	b6 01       	movw	r22, r12
 a0c:	80 e3       	ldi	r24, 0x30	; 48
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 61 05 	call	0xac2	; 0xac2 <fputc>
 a14:	a2 fe       	sbrs	r10, 2
 a16:	17 c0       	rjmp	.+46     	; 0xa46 <__stack+0x1e7>
 a18:	a1 fc       	sbrc	r10, 1
 a1a:	03 c0       	rjmp	.+6      	; 0xa22 <__stack+0x1c3>
 a1c:	88 e7       	ldi	r24, 0x78	; 120
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <__stack+0x1c7>
 a22:	88 e5       	ldi	r24, 0x58	; 88
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	b6 01       	movw	r22, r12
 a28:	0c c0       	rjmp	.+24     	; 0xa42 <__stack+0x1e3>
 a2a:	8a 2d       	mov	r24, r10
 a2c:	86 78       	andi	r24, 0x86	; 134
 a2e:	59 f0       	breq	.+22     	; 0xa46 <__stack+0x1e7>
 a30:	a1 fe       	sbrs	r10, 1
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <__stack+0x1d9>
 a34:	8b e2       	ldi	r24, 0x2B	; 43
 a36:	01 c0       	rjmp	.+2      	; 0xa3a <__stack+0x1db>
 a38:	80 e2       	ldi	r24, 0x20	; 32
 a3a:	a7 fc       	sbrc	r10, 7
 a3c:	8d e2       	ldi	r24, 0x2D	; 45
 a3e:	b6 01       	movw	r22, r12
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 61 05 	call	0xac2	; 0xac2 <fputc>
 a46:	89 14       	cp	r8, r9
 a48:	38 f4       	brcc	.+14     	; 0xa58 <__stack+0x1f9>
 a4a:	b6 01       	movw	r22, r12
 a4c:	80 e3       	ldi	r24, 0x30	; 48
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 61 05 	call	0xac2	; 0xac2 <fputc>
 a54:	9a 94       	dec	r9
 a56:	f7 cf       	rjmp	.-18     	; 0xa46 <__stack+0x1e7>
 a58:	8a 94       	dec	r8
 a5a:	f3 01       	movw	r30, r6
 a5c:	e8 0d       	add	r30, r8
 a5e:	f1 1d       	adc	r31, r1
 a60:	80 81       	ld	r24, Z
 a62:	b6 01       	movw	r22, r12
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 61 05 	call	0xac2	; 0xac2 <fputc>
 a6a:	81 10       	cpse	r8, r1
 a6c:	f5 cf       	rjmp	.-22     	; 0xa58 <__stack+0x1f9>
 a6e:	22 20       	and	r2, r2
 a70:	09 f4       	brne	.+2      	; 0xa74 <__stack+0x215>
 a72:	42 ce       	rjmp	.-892    	; 0x6f8 <vfprintf+0x24>
 a74:	b6 01       	movw	r22, r12
 a76:	80 e2       	ldi	r24, 0x20	; 32
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 61 05 	call	0xac2	; 0xac2 <fputc>
 a7e:	2a 94       	dec	r2
 a80:	f6 cf       	rjmp	.-20     	; 0xa6e <__stack+0x20f>
 a82:	f6 01       	movw	r30, r12
 a84:	86 81       	ldd	r24, Z+6	; 0x06
 a86:	97 81       	ldd	r25, Z+7	; 0x07
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <__stack+0x22f>
 a8a:	8f ef       	ldi	r24, 0xFF	; 255
 a8c:	9f ef       	ldi	r25, 0xFF	; 255
 a8e:	2b 96       	adiw	r28, 0x0b	; 11
 a90:	e2 e1       	ldi	r30, 0x12	; 18
 a92:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__epilogue_restores__>

00000a96 <strnlen_P>:
 a96:	fc 01       	movw	r30, r24
 a98:	05 90       	lpm	r0, Z+
 a9a:	61 50       	subi	r22, 0x01	; 1
 a9c:	70 40       	sbci	r23, 0x00	; 0
 a9e:	01 10       	cpse	r0, r1
 aa0:	d8 f7       	brcc	.-10     	; 0xa98 <strnlen_P+0x2>
 aa2:	80 95       	com	r24
 aa4:	90 95       	com	r25
 aa6:	8e 0f       	add	r24, r30
 aa8:	9f 1f       	adc	r25, r31
 aaa:	08 95       	ret

00000aac <strnlen>:
 aac:	fc 01       	movw	r30, r24
 aae:	61 50       	subi	r22, 0x01	; 1
 ab0:	70 40       	sbci	r23, 0x00	; 0
 ab2:	01 90       	ld	r0, Z+
 ab4:	01 10       	cpse	r0, r1
 ab6:	d8 f7       	brcc	.-10     	; 0xaae <strnlen+0x2>
 ab8:	80 95       	com	r24
 aba:	90 95       	com	r25
 abc:	8e 0f       	add	r24, r30
 abe:	9f 1f       	adc	r25, r31
 ac0:	08 95       	ret

00000ac2 <fputc>:
 ac2:	0f 93       	push	r16
 ac4:	1f 93       	push	r17
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	fb 01       	movw	r30, r22
 acc:	23 81       	ldd	r18, Z+3	; 0x03
 ace:	21 fd       	sbrc	r18, 1
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <fputc+0x16>
 ad2:	8f ef       	ldi	r24, 0xFF	; 255
 ad4:	9f ef       	ldi	r25, 0xFF	; 255
 ad6:	2c c0       	rjmp	.+88     	; 0xb30 <fputc+0x6e>
 ad8:	22 ff       	sbrs	r18, 2
 ada:	16 c0       	rjmp	.+44     	; 0xb08 <fputc+0x46>
 adc:	46 81       	ldd	r20, Z+6	; 0x06
 ade:	57 81       	ldd	r21, Z+7	; 0x07
 ae0:	24 81       	ldd	r18, Z+4	; 0x04
 ae2:	35 81       	ldd	r19, Z+5	; 0x05
 ae4:	42 17       	cp	r20, r18
 ae6:	53 07       	cpc	r21, r19
 ae8:	44 f4       	brge	.+16     	; 0xafa <fputc+0x38>
 aea:	a0 81       	ld	r26, Z
 aec:	b1 81       	ldd	r27, Z+1	; 0x01
 aee:	9d 01       	movw	r18, r26
 af0:	2f 5f       	subi	r18, 0xFF	; 255
 af2:	3f 4f       	sbci	r19, 0xFF	; 255
 af4:	31 83       	std	Z+1, r19	; 0x01
 af6:	20 83       	st	Z, r18
 af8:	8c 93       	st	X, r24
 afa:	26 81       	ldd	r18, Z+6	; 0x06
 afc:	37 81       	ldd	r19, Z+7	; 0x07
 afe:	2f 5f       	subi	r18, 0xFF	; 255
 b00:	3f 4f       	sbci	r19, 0xFF	; 255
 b02:	37 83       	std	Z+7, r19	; 0x07
 b04:	26 83       	std	Z+6, r18	; 0x06
 b06:	14 c0       	rjmp	.+40     	; 0xb30 <fputc+0x6e>
 b08:	8b 01       	movw	r16, r22
 b0a:	ec 01       	movw	r28, r24
 b0c:	fb 01       	movw	r30, r22
 b0e:	00 84       	ldd	r0, Z+8	; 0x08
 b10:	f1 85       	ldd	r31, Z+9	; 0x09
 b12:	e0 2d       	mov	r30, r0
 b14:	09 95       	icall
 b16:	89 2b       	or	r24, r25
 b18:	e1 f6       	brne	.-72     	; 0xad2 <fputc+0x10>
 b1a:	d8 01       	movw	r26, r16
 b1c:	16 96       	adiw	r26, 0x06	; 6
 b1e:	8d 91       	ld	r24, X+
 b20:	9c 91       	ld	r25, X
 b22:	17 97       	sbiw	r26, 0x07	; 7
 b24:	01 96       	adiw	r24, 0x01	; 1
 b26:	17 96       	adiw	r26, 0x07	; 7
 b28:	9c 93       	st	X, r25
 b2a:	8e 93       	st	-X, r24
 b2c:	16 97       	sbiw	r26, 0x06	; 6
 b2e:	ce 01       	movw	r24, r28
 b30:	df 91       	pop	r29
 b32:	cf 91       	pop	r28
 b34:	1f 91       	pop	r17
 b36:	0f 91       	pop	r16
 b38:	08 95       	ret

00000b3a <__ultoa_invert>:
 b3a:	fa 01       	movw	r30, r20
 b3c:	aa 27       	eor	r26, r26
 b3e:	28 30       	cpi	r18, 0x08	; 8
 b40:	51 f1       	breq	.+84     	; 0xb96 <__ultoa_invert+0x5c>
 b42:	20 31       	cpi	r18, 0x10	; 16
 b44:	81 f1       	breq	.+96     	; 0xba6 <__ultoa_invert+0x6c>
 b46:	e8 94       	clt
 b48:	6f 93       	push	r22
 b4a:	6e 7f       	andi	r22, 0xFE	; 254
 b4c:	6e 5f       	subi	r22, 0xFE	; 254
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	af 4f       	sbci	r26, 0xFF	; 255
 b56:	b1 e0       	ldi	r27, 0x01	; 1
 b58:	3e d0       	rcall	.+124    	; 0xbd6 <__ultoa_invert+0x9c>
 b5a:	b4 e0       	ldi	r27, 0x04	; 4
 b5c:	3c d0       	rcall	.+120    	; 0xbd6 <__ultoa_invert+0x9c>
 b5e:	67 0f       	add	r22, r23
 b60:	78 1f       	adc	r23, r24
 b62:	89 1f       	adc	r24, r25
 b64:	9a 1f       	adc	r25, r26
 b66:	a1 1d       	adc	r26, r1
 b68:	68 0f       	add	r22, r24
 b6a:	79 1f       	adc	r23, r25
 b6c:	8a 1f       	adc	r24, r26
 b6e:	91 1d       	adc	r25, r1
 b70:	a1 1d       	adc	r26, r1
 b72:	6a 0f       	add	r22, r26
 b74:	71 1d       	adc	r23, r1
 b76:	81 1d       	adc	r24, r1
 b78:	91 1d       	adc	r25, r1
 b7a:	a1 1d       	adc	r26, r1
 b7c:	20 d0       	rcall	.+64     	; 0xbbe <__ultoa_invert+0x84>
 b7e:	09 f4       	brne	.+2      	; 0xb82 <__ultoa_invert+0x48>
 b80:	68 94       	set
 b82:	3f 91       	pop	r19
 b84:	2a e0       	ldi	r18, 0x0A	; 10
 b86:	26 9f       	mul	r18, r22
 b88:	11 24       	eor	r1, r1
 b8a:	30 19       	sub	r19, r0
 b8c:	30 5d       	subi	r19, 0xD0	; 208
 b8e:	31 93       	st	Z+, r19
 b90:	de f6       	brtc	.-74     	; 0xb48 <__ultoa_invert+0xe>
 b92:	cf 01       	movw	r24, r30
 b94:	08 95       	ret
 b96:	46 2f       	mov	r20, r22
 b98:	47 70       	andi	r20, 0x07	; 7
 b9a:	40 5d       	subi	r20, 0xD0	; 208
 b9c:	41 93       	st	Z+, r20
 b9e:	b3 e0       	ldi	r27, 0x03	; 3
 ba0:	0f d0       	rcall	.+30     	; 0xbc0 <__ultoa_invert+0x86>
 ba2:	c9 f7       	brne	.-14     	; 0xb96 <__ultoa_invert+0x5c>
 ba4:	f6 cf       	rjmp	.-20     	; 0xb92 <__ultoa_invert+0x58>
 ba6:	46 2f       	mov	r20, r22
 ba8:	4f 70       	andi	r20, 0x0F	; 15
 baa:	40 5d       	subi	r20, 0xD0	; 208
 bac:	4a 33       	cpi	r20, 0x3A	; 58
 bae:	18 f0       	brcs	.+6      	; 0xbb6 <__ultoa_invert+0x7c>
 bb0:	49 5d       	subi	r20, 0xD9	; 217
 bb2:	31 fd       	sbrc	r19, 1
 bb4:	40 52       	subi	r20, 0x20	; 32
 bb6:	41 93       	st	Z+, r20
 bb8:	02 d0       	rcall	.+4      	; 0xbbe <__ultoa_invert+0x84>
 bba:	a9 f7       	brne	.-22     	; 0xba6 <__ultoa_invert+0x6c>
 bbc:	ea cf       	rjmp	.-44     	; 0xb92 <__ultoa_invert+0x58>
 bbe:	b4 e0       	ldi	r27, 0x04	; 4
 bc0:	a6 95       	lsr	r26
 bc2:	97 95       	ror	r25
 bc4:	87 95       	ror	r24
 bc6:	77 95       	ror	r23
 bc8:	67 95       	ror	r22
 bca:	ba 95       	dec	r27
 bcc:	c9 f7       	brne	.-14     	; 0xbc0 <__ultoa_invert+0x86>
 bce:	00 97       	sbiw	r24, 0x00	; 0
 bd0:	61 05       	cpc	r22, r1
 bd2:	71 05       	cpc	r23, r1
 bd4:	08 95       	ret
 bd6:	9b 01       	movw	r18, r22
 bd8:	ac 01       	movw	r20, r24
 bda:	0a 2e       	mov	r0, r26
 bdc:	06 94       	lsr	r0
 bde:	57 95       	ror	r21
 be0:	47 95       	ror	r20
 be2:	37 95       	ror	r19
 be4:	27 95       	ror	r18
 be6:	ba 95       	dec	r27
 be8:	c9 f7       	brne	.-14     	; 0xbdc <__ultoa_invert+0xa2>
 bea:	62 0f       	add	r22, r18
 bec:	73 1f       	adc	r23, r19
 bee:	84 1f       	adc	r24, r20
 bf0:	95 1f       	adc	r25, r21
 bf2:	a0 1d       	adc	r26, r0
 bf4:	08 95       	ret

00000bf6 <__prologue_saves__>:
 bf6:	2f 92       	push	r2
 bf8:	3f 92       	push	r3
 bfa:	4f 92       	push	r4
 bfc:	5f 92       	push	r5
 bfe:	6f 92       	push	r6
 c00:	7f 92       	push	r7
 c02:	8f 92       	push	r8
 c04:	9f 92       	push	r9
 c06:	af 92       	push	r10
 c08:	bf 92       	push	r11
 c0a:	cf 92       	push	r12
 c0c:	df 92       	push	r13
 c0e:	ef 92       	push	r14
 c10:	ff 92       	push	r15
 c12:	0f 93       	push	r16
 c14:	1f 93       	push	r17
 c16:	cf 93       	push	r28
 c18:	df 93       	push	r29
 c1a:	cd b7       	in	r28, 0x3d	; 61
 c1c:	de b7       	in	r29, 0x3e	; 62
 c1e:	ca 1b       	sub	r28, r26
 c20:	db 0b       	sbc	r29, r27
 c22:	0f b6       	in	r0, 0x3f	; 63
 c24:	f8 94       	cli
 c26:	de bf       	out	0x3e, r29	; 62
 c28:	0f be       	out	0x3f, r0	; 63
 c2a:	cd bf       	out	0x3d, r28	; 61
 c2c:	09 94       	ijmp

00000c2e <__epilogue_restores__>:
 c2e:	2a 88       	ldd	r2, Y+18	; 0x12
 c30:	39 88       	ldd	r3, Y+17	; 0x11
 c32:	48 88       	ldd	r4, Y+16	; 0x10
 c34:	5f 84       	ldd	r5, Y+15	; 0x0f
 c36:	6e 84       	ldd	r6, Y+14	; 0x0e
 c38:	7d 84       	ldd	r7, Y+13	; 0x0d
 c3a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c3c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c3e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c40:	b9 84       	ldd	r11, Y+9	; 0x09
 c42:	c8 84       	ldd	r12, Y+8	; 0x08
 c44:	df 80       	ldd	r13, Y+7	; 0x07
 c46:	ee 80       	ldd	r14, Y+6	; 0x06
 c48:	fd 80       	ldd	r15, Y+5	; 0x05
 c4a:	0c 81       	ldd	r16, Y+4	; 0x04
 c4c:	1b 81       	ldd	r17, Y+3	; 0x03
 c4e:	aa 81       	ldd	r26, Y+2	; 0x02
 c50:	b9 81       	ldd	r27, Y+1	; 0x01
 c52:	ce 0f       	add	r28, r30
 c54:	d1 1d       	adc	r29, r1
 c56:	0f b6       	in	r0, 0x3f	; 63
 c58:	f8 94       	cli
 c5a:	de bf       	out	0x3e, r29	; 62
 c5c:	0f be       	out	0x3f, r0	; 63
 c5e:	cd bf       	out	0x3d, r28	; 61
 c60:	ed 01       	movw	r28, r26
 c62:	08 95       	ret

00000c64 <_exit>:
 c64:	f8 94       	cli

00000c66 <__stop_program>:
 c66:	ff cf       	rjmp	.-2      	; 0xc66 <__stop_program>
