
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000400  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001caa  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000994  00000000  00000000  0000228a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a0b  00000000  00000000  00002c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  0000362c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000069e  00000000  00000000  00003868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c15  00000000  00000000  00003f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00004b1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	 //CLockAPP();
	 //KeyPadAPP();
	 //ADCAPP();
	 //counterAPP();
	 // 	UART_INIT(9600);
	SPI_Init(SPI_MASTER);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 cb 01 	call	0x396	; 0x396 <SPI_Init>
 	LCD_init();
  98:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_init>
	u8 col=1;
	u8 h7mbozo='a';
	u8 receive;
	
	disp_charXY(1,col,h7mbozo);
  9c:	41 e6       	ldi	r20, 0x61	; 97
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 0e 01 	call	0x21c	; 0x21c <disp_charXY>
	 //counterAPP();
	 // 	UART_INIT(9600);
	SPI_Init(SPI_MASTER);
 	LCD_init();
	u8 col=1;
	u8 h7mbozo='a';
  a6:	c1 e6       	ldi	r28, 0x61	; 97
	 //ADCAPP();
	 //counterAPP();
	 // 	UART_INIT(9600);
	SPI_Init(SPI_MASTER);
 	LCD_init();
	u8 col=1;
  a8:	d1 e0       	ldi	r29, 0x01	; 1
	u8 h7mbozo='a';
	u8 receive;
	
	disp_charXY(1,col,h7mbozo);
	while(1)
	{	disp_charXY(1,col,h7mbozo);
  aa:	4c 2f       	mov	r20, r28
  ac:	6d 2f       	mov	r22, r29
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 0e 01 	call	0x21c	; 0x21c <disp_charXY>

	 //	UART_TX(x+1);
	// 	x= UART_RX();
		receive=SPI_Transceive(h7mbozo);
  b4:	8c 2f       	mov	r24, r28
  b6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_Transceive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	39 e6       	ldi	r19, 0x69	; 105
  be:	98 e1       	ldi	r25, 0x18	; 24
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x38>
  ca:	00 00       	nop
		_delay_ms(1000);
 	
		 if(receive!=0xff)
  cc:	8f 3f       	cpi	r24, 0xFF	; 255
  ce:	29 f0       	breq	.+10     	; 0xda <main+0x48>
 		disp_charXY(2,col,receive);
  d0:	48 2f       	mov	r20, r24
  d2:	6d 2f       	mov	r22, r29
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 0e 01 	call	0x21c	; 0x21c <disp_charXY>
		 h7mbozo++;
  da:	cf 5f       	subi	r28, 0xFF	; 255
		 col++;
  dc:	df 5f       	subi	r29, 0xFF	; 255
	}
  de:	e5 cf       	rjmp	.-54     	; 0xaa <main+0x18>

000000e0 <LCD_latch>:
	while(str[indx]!='\0')
	{
		disp_char(indx[str]);
		indx++;
	}
}
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	8b e0       	ldi	r24, 0x0B	; 11
  e4:	0e 94 17 01 	call	0x22e	; 0x22e <writePin>
  e8:	8a e6       	ldi	r24, 0x6A	; 106
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_latch+0xa>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_latch+0x10>
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	8b e0       	ldi	r24, 0x0B	; 11
  f4:	0e 94 17 01 	call	0x22e	; 0x22e <writePin>
  f8:	8a e6       	ldi	r24, 0x6A	; 106
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_latch+0x1a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_latch+0x20>
 100:	08 95       	ret

00000102 <SendToLCD>:
 102:	cf 93       	push	r28
 104:	c8 2f       	mov	r28, r24
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	60 ef       	ldi	r22, 0xF0	; 240
 10a:	8b e3       	ldi	r24, 0x3B	; 59
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 ad 01 	call	0x35a	; 0x35a <writePins>
 112:	6c 2f       	mov	r22, r28
 114:	60 7f       	andi	r22, 0xF0	; 240
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	8b e3       	ldi	r24, 0x3B	; 59
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 ad 01 	call	0x35a	; 0x35a <writePins>
 120:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_latch>
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	60 ef       	ldi	r22, 0xF0	; 240
 128:	8b e3       	ldi	r24, 0x3B	; 59
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 ad 01 	call	0x35a	; 0x35a <writePins>
 130:	80 e1       	ldi	r24, 0x10	; 16
 132:	c8 9f       	mul	r28, r24
 134:	b0 01       	movw	r22, r0
 136:	11 24       	eor	r1, r1
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	8b e3       	ldi	r24, 0x3B	; 59
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 ad 01 	call	0x35a	; 0x35a <writePins>
 142:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_latch>
 146:	8a e6       	ldi	r24, 0x6A	; 106
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <SendToLCD+0x46>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <SendToLCD+0x4c>
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_send_cmd>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	89 e0       	ldi	r24, 0x09	; 9
 15a:	0e 94 17 01 	call	0x22e	; 0x22e <writePin>
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 81 00 	call	0x102	; 0x102 <SendToLCD>
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <LCD_CLEAR>:
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_send_cmd>
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_CLEAR+0xa>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_CLEAR+0x10>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <LCD_ret_Home>:
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_send_cmd>
 182:	8f e9       	ldi	r24, 0x9F	; 159
 184:	9f e0       	ldi	r25, 0x0F	; 15
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_ret_Home+0xa>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_ret_Home+0x10>
 18c:	00 00       	nop
 18e:	08 95       	ret

00000190 <LCD_init>:
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	60 ef       	ldi	r22, 0xF0	; 240
 194:	8a e3       	ldi	r24, 0x3A	; 58
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 bc 01 	call	0x378	; 0x378 <pinsDirection>
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	6e e0       	ldi	r22, 0x0E	; 14
 1a0:	87 e3       	ldi	r24, 0x37	; 55
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 bc 01 	call	0x378	; 0x378 <pinsDirection>
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	8a e0       	ldi	r24, 0x0A	; 10
 1ac:	0e 94 17 01 	call	0x22e	; 0x22e <writePin>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	89 ef       	ldi	r24, 0xF9	; 249
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <LCD_init+0x26>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_init+0x30>
 1c0:	00 00       	nop
 1c2:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_ret_Home>
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_send_cmd>
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_send_cmd>
 1d2:	80 e1       	ldi	r24, 0x10	; 16
 1d4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_send_cmd>
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_send_cmd>
 1de:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_CLEAR>
 1e2:	08 95       	ret

000001e4 <LCD_send_data>:
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	89 e0       	ldi	r24, 0x09	; 9
 1ec:	0e 94 17 01 	call	0x22e	; 0x22e <writePin>
 1f0:	8c 2f       	mov	r24, r28
 1f2:	0e 94 81 00 	call	0x102	; 0x102 <SendToLCD>
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <disp_char>:
 1fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_send_data>
 1fe:	08 95       	ret

00000200 <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
	if (row==1)
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	29 f4       	brne	.+10     	; 0x20e <LCD_GOTXY+0xe>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
 204:	8f e7       	ldi	r24, 0x7F	; 127
 206:	86 0f       	add	r24, r22
 208:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_send_cmd>
 20c:	08 95       	ret
	}
	else if(row==2)
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	21 f4       	brne	.+8      	; 0x21a <LCD_GOTXY+0x1a>
	{
		LCD_send_cmd(DDRAM_ADD+0x40+col-1);	
 212:	8f eb       	ldi	r24, 0xBF	; 191
 214:	86 0f       	add	r24, r22
 216:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_send_cmd>
 21a:	08 95       	ret

0000021c <disp_charXY>:
{
	LCD_send_data(letter);
}

void disp_charXY(u8 row,u8 col,u8 letter)
{
 21c:	cf 93       	push	r28
 21e:	c4 2f       	mov	r28, r20
	LCD_GOTXY(row,col);
 220:	0e 94 00 01 	call	0x200	; 0x200 <LCD_GOTXY>
	disp_char(letter);	
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 fd 00 	call	0x1fa	; 0x1fa <disp_char>
}
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 22e:	88 30       	cpi	r24, 0x08	; 8
 230:	f8 f4       	brcc	.+62     	; 0x270 <writePin+0x42>
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	69 f4       	brne	.+26     	; 0x250 <writePin+0x22>
 236:	4b b3       	in	r20, 0x1b	; 27
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <writePin+0x16>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	8a 95       	dec	r24
 246:	e2 f7       	brpl	.-8      	; 0x240 <writePin+0x12>
 248:	cb 01       	movw	r24, r22
 24a:	84 2b       	or	r24, r20
 24c:	8b bb       	out	0x1b, r24	; 27
 24e:	08 95       	ret
 250:	61 11       	cpse	r22, r1
 252:	82 c0       	rjmp	.+260    	; 0x358 <writePin+0x12a>
 254:	4b b3       	in	r20, 0x1b	; 27
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <writePin+0x34>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <writePin+0x30>
 266:	cb 01       	movw	r24, r22
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	8b bb       	out	0x1b, r24	; 27
 26e:	08 95       	ret
 270:	98 ef       	ldi	r25, 0xF8	; 248
 272:	98 0f       	add	r25, r24
 274:	98 30       	cpi	r25, 0x08	; 8
 276:	18 f5       	brcc	.+70     	; 0x2be <writePin+0x90>
 278:	61 30       	cpi	r22, 0x01	; 1
 27a:	79 f4       	brne	.+30     	; 0x29a <writePin+0x6c>
 27c:	48 b3       	in	r20, 0x18	; 24
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	08 97       	sbiw	r24, 0x08	; 8
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <writePin+0x60>
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	8a 95       	dec	r24
 290:	e2 f7       	brpl	.-8      	; 0x28a <writePin+0x5c>
 292:	cb 01       	movw	r24, r22
 294:	84 2b       	or	r24, r20
 296:	88 bb       	out	0x18, r24	; 24
 298:	08 95       	ret
 29a:	61 11       	cpse	r22, r1
 29c:	5d c0       	rjmp	.+186    	; 0x358 <writePin+0x12a>
 29e:	48 b3       	in	r20, 0x18	; 24
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	08 97       	sbiw	r24, 0x08	; 8
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <writePin+0x82>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <writePin+0x7e>
 2b4:	cb 01       	movw	r24, r22
 2b6:	80 95       	com	r24
 2b8:	84 23       	and	r24, r20
 2ba:	88 bb       	out	0x18, r24	; 24
 2bc:	08 95       	ret
 2be:	90 ef       	ldi	r25, 0xF0	; 240
 2c0:	98 0f       	add	r25, r24
 2c2:	98 30       	cpi	r25, 0x08	; 8
 2c4:	18 f5       	brcc	.+70     	; 0x30c <writePin+0xde>
 2c6:	61 30       	cpi	r22, 0x01	; 1
 2c8:	79 f4       	brne	.+30     	; 0x2e8 <writePin+0xba>
 2ca:	45 b3       	in	r20, 0x15	; 21
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	40 97       	sbiw	r24, 0x10	; 16
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	b9 01       	movw	r22, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <writePin+0xae>
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	8a 95       	dec	r24
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <writePin+0xaa>
 2e0:	cb 01       	movw	r24, r22
 2e2:	84 2b       	or	r24, r20
 2e4:	85 bb       	out	0x15, r24	; 21
 2e6:	08 95       	ret
 2e8:	61 11       	cpse	r22, r1
 2ea:	36 c0       	rjmp	.+108    	; 0x358 <writePin+0x12a>
 2ec:	45 b3       	in	r20, 0x15	; 21
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	40 97       	sbiw	r24, 0x10	; 16
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <writePin+0xd0>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	8a 95       	dec	r24
 300:	e2 f7       	brpl	.-8      	; 0x2fa <writePin+0xcc>
 302:	cb 01       	movw	r24, r22
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	85 bb       	out	0x15, r24	; 21
 30a:	08 95       	ret
 30c:	98 ee       	ldi	r25, 0xE8	; 232
 30e:	98 0f       	add	r25, r24
 310:	98 30       	cpi	r25, 0x08	; 8
 312:	10 f5       	brcc	.+68     	; 0x358 <writePin+0x12a>
 314:	61 30       	cpi	r22, 0x01	; 1
 316:	79 f4       	brne	.+30     	; 0x336 <writePin+0x108>
 318:	42 b3       	in	r20, 0x12	; 18
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	48 97       	sbiw	r24, 0x18	; 24
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	b9 01       	movw	r22, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <writePin+0xfc>
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	8a 95       	dec	r24
 32c:	e2 f7       	brpl	.-8      	; 0x326 <writePin+0xf8>
 32e:	cb 01       	movw	r24, r22
 330:	84 2b       	or	r24, r20
 332:	82 bb       	out	0x12, r24	; 18
 334:	08 95       	ret
 336:	61 11       	cpse	r22, r1
 338:	0f c0       	rjmp	.+30     	; 0x358 <writePin+0x12a>
 33a:	42 b3       	in	r20, 0x12	; 18
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	48 97       	sbiw	r24, 0x18	; 24
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	b9 01       	movw	r22, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <writePin+0x11e>
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	8a 95       	dec	r24
 34e:	e2 f7       	brpl	.-8      	; 0x348 <writePin+0x11a>
 350:	cb 01       	movw	r24, r22
 352:	80 95       	com	r24
 354:	84 23       	and	r24, r20
 356:	82 bb       	out	0x12, r24	; 18
 358:	08 95       	ret

0000035a <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	29 f4       	brne	.+10     	; 0x368 <writePins+0xe>
		SETBits(*port,mask);
 35e:	fc 01       	movw	r30, r24
 360:	20 81       	ld	r18, Z
 362:	62 2b       	or	r22, r18
 364:	60 83       	st	Z, r22
 366:	08 95       	ret
	else if(logic==LOW)
 368:	41 11       	cpse	r20, r1
 36a:	05 c0       	rjmp	.+10     	; 0x376 <writePins+0x1c>
		CLRBits(*port,mask);
 36c:	fc 01       	movw	r30, r24
 36e:	20 81       	ld	r18, Z
 370:	60 95       	com	r22
 372:	62 23       	and	r22, r18
 374:	60 83       	st	Z, r22
 376:	08 95       	ret

00000378 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	29 f4       	brne	.+10     	; 0x386 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 37c:	fc 01       	movw	r30, r24
 37e:	20 81       	ld	r18, Z
 380:	62 2b       	or	r22, r18
 382:	60 83       	st	Z, r22
 384:	08 95       	ret
	else if(direction == INPUT)
 386:	41 11       	cpse	r20, r1
 388:	05 c0       	rjmp	.+10     	; 0x394 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 38a:	fc 01       	movw	r30, r24
 38c:	20 81       	ld	r18, Z
 38e:	60 95       	com	r22
 390:	62 23       	and	r22, r18
 392:	60 83       	st	Z, r22
 394:	08 95       	ret

00000396 <SPI_Init>:
#include "SPI.h"
void SPI_Init(SPI_Mode spiMode){
	switch(spiMode){
 396:	88 23       	and	r24, r24
 398:	19 f0       	breq	.+6      	; 0x3a0 <SPI_Init+0xa>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	b9 f0       	breq	.+46     	; 0x3cc <SPI_Init+0x36>
 39e:	08 95       	ret
	case SPI_MASTER:
	SETBit(SPI_DDR,SPI_SS);
 3a0:	87 b3       	in	r24, 0x17	; 23
 3a2:	80 61       	ori	r24, 0x10	; 16
 3a4:	87 bb       	out	0x17, r24	; 23
	SETBit(SPI_DDR,SPI_SCK);
 3a6:	87 b3       	in	r24, 0x17	; 23
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	87 bb       	out	0x17, r24	; 23
	SETBit(SPI_DDR,SPI_MOSI);
 3ac:	87 b3       	in	r24, 0x17	; 23
 3ae:	80 62       	ori	r24, 0x20	; 32
 3b0:	87 bb       	out	0x17, r24	; 23
	CLRBit(SPI_DDR,SPI_MISO);
 3b2:	87 b3       	in	r24, 0x17	; 23
 3b4:	8f 7b       	andi	r24, 0xBF	; 191
 3b6:	87 bb       	out	0x17, r24	; 23
	
		SETBit(SPCR,SPR0);
 3b8:	8d b1       	in	r24, 0x0d	; 13
 3ba:	81 60       	ori	r24, 0x01	; 1
 3bc:	8d b9       	out	0x0d, r24	; 13
		SETBit(SPCR,MSTR);
 3be:	8d b1       	in	r24, 0x0d	; 13
 3c0:	80 61       	ori	r24, 0x10	; 16
 3c2:	8d b9       	out	0x0d, r24	; 13
		SETBit(SPCR,SPE);
 3c4:	8d b1       	in	r24, 0x0d	; 13
 3c6:	80 64       	ori	r24, 0x40	; 64
 3c8:	8d b9       	out	0x0d, r24	; 13

	break;
 3ca:	08 95       	ret
	case SPI_SLAVE:
	CLRBit(SPI_DDR,SPI_SS);
 3cc:	87 b3       	in	r24, 0x17	; 23
 3ce:	8f 7e       	andi	r24, 0xEF	; 239
 3d0:	87 bb       	out	0x17, r24	; 23
	CLRBit(SPI_DDR,SPI_SCK);
 3d2:	87 b3       	in	r24, 0x17	; 23
 3d4:	8f 77       	andi	r24, 0x7F	; 127
 3d6:	87 bb       	out	0x17, r24	; 23
	CLRBit(SPI_DDR,SPI_MOSI);
 3d8:	87 b3       	in	r24, 0x17	; 23
 3da:	8f 7d       	andi	r24, 0xDF	; 223
 3dc:	87 bb       	out	0x17, r24	; 23
	SETBit(SPI_DDR,SPI_MISO);
 3de:	87 b3       	in	r24, 0x17	; 23
 3e0:	80 64       	ori	r24, 0x40	; 64
 3e2:	87 bb       	out	0x17, r24	; 23
	
		CLRBit(SPCR,MSTR);
 3e4:	8d b1       	in	r24, 0x0d	; 13
 3e6:	8f 7e       	andi	r24, 0xEF	; 239
 3e8:	8d b9       	out	0x0d, r24	; 13
		SETBit(SPCR,SPE);
 3ea:	8d b1       	in	r24, 0x0d	; 13
 3ec:	80 64       	ori	r24, 0x40	; 64
 3ee:	8d b9       	out	0x0d, r24	; 13
 3f0:	08 95       	ret

000003f2 <SPI_Transceive>:

	break;
	}
}
u8 SPI_Transceive(u8 data){
		SPDR = data;
 3f2:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
 3f4:	77 9b       	sbis	0x0e, 7	; 14
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <SPI_Transceive+0x2>
		return SPDR;
 3f8:	8f b1       	in	r24, 0x0f	; 15
}
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
