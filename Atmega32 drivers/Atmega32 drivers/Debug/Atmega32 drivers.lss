
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000004a0  00000514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000181e  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4f  00000000  00000000  00001ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a91  00000000  00000000  00002945  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000028c  00000000  00000000  000033d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000520  00000000  00000000  00003664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dd0  00000000  00000000  00003b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00004954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  7a:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KeyPadAPP>:



void KeyPadAPP(void)
{
	LCD_init();
  82:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_init>
	KEYPAD_Init();
  86:	0e 94 5f 00 	call	0xbe	; 0xbe <KEYPAD_Init>
	while(1)
	{
		if (GetKey())
  8a:	0e 94 72 00 	call	0xe4	; 0xe4 <GetKey>
  8e:	88 23       	and	r24, r24
  90:	e1 f3       	breq	.-8      	; 0x8a <KeyPadAPP+0x8>
		{
			disp_charXY(1,1,GetKey());
  92:	0e 94 72 00 	call	0xe4	; 0xe4 <GetKey>
  96:	48 2f       	mov	r20, r24
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 4c 01 	call	0x298	; 0x298 <disp_charXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	81 ee       	ldi	r24, 0xE1	; 225
  a4:	94 e0       	ldi	r25, 0x04	; 4
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <KeyPadAPP+0x24>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <KeyPadAPP+0x2e>
  b0:	00 00       	nop
  b2:	eb cf       	rjmp	.-42     	; 0x8a <KeyPadAPP+0x8>

000000b4 <main>:
#include "includes.h"
#include "LCD.h"
#include <math.h>
int main(void)
{
	KeyPadAPP();
  b4:	0e 94 41 00 	call	0x82	; 0x82 <KeyPadAPP>
}
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <KEYPAD_Init>:
};


void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	60 ef       	ldi	r22, 0xF0	; 240
  c2:	81 e3       	ldi	r24, 0x31	; 49
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 3f 02 	call	0x47e	; 0x47e <pinsDirection>
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	68 e7       	ldi	r22, 0x78	; 120
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 3f 02 	call	0x47e	; 0x47e <pinsDirection>
	writePins(&COL_PORT,COL_PINS,HIGH);
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	68 e7       	ldi	r22, 0x78	; 120
  da:	85 e3       	ldi	r24, 0x35	; 53
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 30 02 	call	0x460	; 0x460 <writePins>
  e2:	08 95       	ret

000000e4 <GetKey>:
}



u8 GetKey(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	u8 key=0;
	u8 row=0,col=0;
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	60 ef       	ldi	r22, 0xF0	; 240
  ec:	82 e3       	ldi	r24, 0x32	; 50
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 30 02 	call	0x460	; 0x460 <writePins>
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
  f4:	dc e1       	ldi	r29, 0x1C	; 28
  f6:	2c c0       	rjmp	.+88     	; 0x150 <GetKey+0x6c>
	{
		writePin(row,LOW);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	8d 2f       	mov	r24, r29
  fc:	0e 94 55 01 	call	0x2aa	; 0x2aa <writePin>
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
 100:	c3 e1       	ldi	r28, 0x13	; 19
 102:	1f c0       	rjmp	.+62     	; 0x142 <GetKey+0x5e>
		{
			if (!readPin(col))
 104:	8c 2f       	mov	r24, r28
 106:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <readPin>
 10a:	81 11       	cpse	r24, r1
 10c:	19 c0       	rjmp	.+50     	; 0x140 <GetKey+0x5c>
			{
				while(!readPin(col));
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <readPin>
 114:	88 23       	and	r24, r24
 116:	d9 f3       	breq	.-10     	; 0x10e <GetKey+0x2a>
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
 118:	ed 2f       	mov	r30, r29
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	9f 01       	movw	r18, r30
 11e:	2c 51       	subi	r18, 0x1C	; 28
 120:	31 09       	sbc	r19, r1
 122:	ec 2f       	mov	r30, r28
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	cf 01       	movw	r24, r30
 128:	43 97       	sbiw	r24, 0x13	; 19
 12a:	f9 01       	movw	r30, r18
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e0 5a       	subi	r30, 0xA0	; 160
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	e8 0f       	add	r30, r24
 13a:	f9 1f       	adc	r31, r25
 13c:	80 81       	ld	r24, Z
				return key;
 13e:	0b c0       	rjmp	.+22     	; 0x156 <GetKey+0x72>
	u8 row=0,col=0;
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
	{
		writePin(row,LOW);
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
 140:	cf 5f       	subi	r28, 0xFF	; 255
 142:	c7 31       	cpi	r28, 0x17	; 23
 144:	f8 f2       	brcs	.-66     	; 0x104 <GetKey+0x20>
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
				return key;

			}	
		}
		writePin(row,HIGH);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	8d 2f       	mov	r24, r29
 14a:	0e 94 55 01 	call	0x2aa	; 0x2aa <writePin>
u8 GetKey(void)
{
	u8 key=0;
	u8 row=0,col=0;
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
 14e:	df 5f       	subi	r29, 0xFF	; 255
 150:	d0 32       	cpi	r29, 0x20	; 32
 152:	90 f2       	brcs	.-92     	; 0xf8 <GetKey+0x14>

			}	
		}
		writePin(row,HIGH);
	}	
	return key;
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <LCD_latch>:
	while(str[indx]!='\0')
	{
		disp_char(indx[str]);
		indx++;
	}
}
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	8b e0       	ldi	r24, 0x0B	; 11
 160:	0e 94 55 01 	call	0x2aa	; 0x2aa <writePin>
 164:	85 ed       	ldi	r24, 0xD5	; 213
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_latch+0xa>
 16a:	00 00       	nop
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	8b e0       	ldi	r24, 0x0B	; 11
 170:	0e 94 55 01 	call	0x2aa	; 0x2aa <writePin>
 174:	85 ed       	ldi	r24, 0xD5	; 213
 176:	8a 95       	dec	r24
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_latch+0x1a>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <SendToLCD>:
 17e:	cf 93       	push	r28
 180:	c8 2f       	mov	r28, r24
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	60 ef       	ldi	r22, 0xF0	; 240
 186:	8b e3       	ldi	r24, 0x3B	; 59
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 30 02 	call	0x460	; 0x460 <writePins>
 18e:	6c 2f       	mov	r22, r28
 190:	60 7f       	andi	r22, 0xF0	; 240
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	8b e3       	ldi	r24, 0x3B	; 59
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 30 02 	call	0x460	; 0x460 <writePins>
 19c:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_latch>
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	60 ef       	ldi	r22, 0xF0	; 240
 1a4:	8b e3       	ldi	r24, 0x3B	; 59
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 30 02 	call	0x460	; 0x460 <writePins>
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	c8 9f       	mul	r28, r24
 1b0:	b0 01       	movw	r22, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	8b e3       	ldi	r24, 0x3B	; 59
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 30 02 	call	0x460	; 0x460 <writePins>
 1be:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_latch>
 1c2:	85 ed       	ldi	r24, 0xD5	; 213
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <SendToLCD+0x46>
 1c8:	00 00       	nop
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <LCD_send_cmd>:
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	89 e0       	ldi	r24, 0x09	; 9
 1d6:	0e 94 55 01 	call	0x2aa	; 0x2aa <writePin>
 1da:	8c 2f       	mov	r24, r28
 1dc:	0e 94 bf 00 	call	0x17e	; 0x17e <SendToLCD>
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <LCD_CLEAR>:
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_send_cmd>
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	9f e1       	ldi	r25, 0x1F	; 31
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_CLEAR+0xa>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_CLEAR+0x10>
 1f4:	00 00       	nop
 1f6:	08 95       	ret

000001f8 <LCD_ret_Home>:
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_send_cmd>
 1fe:	8f e3       	ldi	r24, 0x3F	; 63
 200:	9f e1       	ldi	r25, 0x1F	; 31
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_ret_Home+0xa>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_ret_Home+0x10>
 208:	00 00       	nop
 20a:	08 95       	ret

0000020c <LCD_init>:
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	60 ef       	ldi	r22, 0xF0	; 240
 210:	8a e3       	ldi	r24, 0x3A	; 58
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 3f 02 	call	0x47e	; 0x47e <pinsDirection>
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	6e e0       	ldi	r22, 0x0E	; 14
 21c:	87 e3       	ldi	r24, 0x37	; 55
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 3f 02 	call	0x47e	; 0x47e <pinsDirection>
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	0e 94 55 01 	call	0x2aa	; 0x2aa <writePin>
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	83 ef       	ldi	r24, 0xF3	; 243
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <LCD_init+0x26>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_init+0x30>
 23c:	00 00       	nop
 23e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_ret_Home>
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_send_cmd>
 248:	8f e0       	ldi	r24, 0x0F	; 15
 24a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_send_cmd>
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_send_cmd>
 254:	88 e2       	ldi	r24, 0x28	; 40
 256:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_send_cmd>
 25a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_CLEAR>
 25e:	08 95       	ret

00000260 <LCD_send_data>:
 260:	cf 93       	push	r28
 262:	c8 2f       	mov	r28, r24
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	89 e0       	ldi	r24, 0x09	; 9
 268:	0e 94 55 01 	call	0x2aa	; 0x2aa <writePin>
 26c:	8c 2f       	mov	r24, r28
 26e:	0e 94 bf 00 	call	0x17e	; 0x17e <SendToLCD>
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <disp_char>:
 276:	0e 94 30 01 	call	0x260	; 0x260 <LCD_send_data>
 27a:	08 95       	ret

0000027c <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
	if (row==1)
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	29 f4       	brne	.+10     	; 0x28a <LCD_GOTXY+0xe>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
 280:	8f e7       	ldi	r24, 0x7F	; 127
 282:	86 0f       	add	r24, r22
 284:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_send_cmd>
 288:	08 95       	ret
	}
	else if(row==2)
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	21 f4       	brne	.+8      	; 0x296 <LCD_GOTXY+0x1a>
	{
		LCD_send_cmd(DDRAM_ADD+0x40+col-1);	
 28e:	8f eb       	ldi	r24, 0xBF	; 191
 290:	86 0f       	add	r24, r22
 292:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_send_cmd>
 296:	08 95       	ret

00000298 <disp_charXY>:
{
	LCD_send_data(letter);
}

void disp_charXY(u8 row,u8 col,u8 letter)
{
 298:	cf 93       	push	r28
 29a:	c4 2f       	mov	r28, r20
	LCD_GOTXY(row,col);
 29c:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_GOTXY>
	disp_char(letter);	
 2a0:	8c 2f       	mov	r24, r28
 2a2:	0e 94 3b 01 	call	0x276	; 0x276 <disp_char>
}
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <writePin>:
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
		if(direction == OUTPUT)
			SETBit(DDRD,(pinNo-24));
		else if(direction == INPUT)
			CLRBit(DDRD,(pinNo-24));
 2aa:	88 30       	cpi	r24, 0x08	; 8
 2ac:	f8 f4       	brcc	.+62     	; 0x2ec <writePin+0x42>
 2ae:	61 30       	cpi	r22, 0x01	; 1
 2b0:	69 f4       	brne	.+26     	; 0x2cc <writePin+0x22>
 2b2:	4b b3       	in	r20, 0x1b	; 27
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	b9 01       	movw	r22, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <writePin+0x16>
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	8a 95       	dec	r24
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <writePin+0x12>
 2c4:	cb 01       	movw	r24, r22
 2c6:	84 2b       	or	r24, r20
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	08 95       	ret
 2cc:	61 11       	cpse	r22, r1
 2ce:	82 c0       	rjmp	.+260    	; 0x3d4 <writePin+0x12a>
 2d0:	4b b3       	in	r20, 0x1b	; 27
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	b9 01       	movw	r22, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <writePin+0x34>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	8a 95       	dec	r24
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <writePin+0x30>
 2e2:	cb 01       	movw	r24, r22
 2e4:	80 95       	com	r24
 2e6:	84 23       	and	r24, r20
 2e8:	8b bb       	out	0x1b, r24	; 27
 2ea:	08 95       	ret
 2ec:	98 ef       	ldi	r25, 0xF8	; 248
 2ee:	98 0f       	add	r25, r24
 2f0:	98 30       	cpi	r25, 0x08	; 8
 2f2:	18 f5       	brcc	.+70     	; 0x33a <writePin+0x90>
 2f4:	61 30       	cpi	r22, 0x01	; 1
 2f6:	79 f4       	brne	.+30     	; 0x316 <writePin+0x6c>
 2f8:	48 b3       	in	r20, 0x18	; 24
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	08 97       	sbiw	r24, 0x08	; 8
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	b9 01       	movw	r22, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <writePin+0x60>
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	8a 95       	dec	r24
 30c:	e2 f7       	brpl	.-8      	; 0x306 <writePin+0x5c>
 30e:	cb 01       	movw	r24, r22
 310:	84 2b       	or	r24, r20
 312:	88 bb       	out	0x18, r24	; 24
 314:	08 95       	ret
 316:	61 11       	cpse	r22, r1
 318:	5d c0       	rjmp	.+186    	; 0x3d4 <writePin+0x12a>
 31a:	48 b3       	in	r20, 0x18	; 24
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	08 97       	sbiw	r24, 0x08	; 8
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <writePin+0x82>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	8a 95       	dec	r24
 32e:	e2 f7       	brpl	.-8      	; 0x328 <writePin+0x7e>
 330:	cb 01       	movw	r24, r22
 332:	80 95       	com	r24
 334:	84 23       	and	r24, r20
 336:	88 bb       	out	0x18, r24	; 24
 338:	08 95       	ret
 33a:	90 ef       	ldi	r25, 0xF0	; 240
 33c:	98 0f       	add	r25, r24
 33e:	98 30       	cpi	r25, 0x08	; 8
 340:	18 f5       	brcc	.+70     	; 0x388 <writePin+0xde>
 342:	61 30       	cpi	r22, 0x01	; 1
 344:	79 f4       	brne	.+30     	; 0x364 <writePin+0xba>
 346:	45 b3       	in	r20, 0x15	; 21
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	40 97       	sbiw	r24, 0x10	; 16
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	b9 01       	movw	r22, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <writePin+0xae>
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	8a 95       	dec	r24
 35a:	e2 f7       	brpl	.-8      	; 0x354 <writePin+0xaa>
 35c:	cb 01       	movw	r24, r22
 35e:	84 2b       	or	r24, r20
 360:	85 bb       	out	0x15, r24	; 21
 362:	08 95       	ret
 364:	61 11       	cpse	r22, r1
 366:	36 c0       	rjmp	.+108    	; 0x3d4 <writePin+0x12a>
 368:	45 b3       	in	r20, 0x15	; 21
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	40 97       	sbiw	r24, 0x10	; 16
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <writePin+0xd0>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	8a 95       	dec	r24
 37c:	e2 f7       	brpl	.-8      	; 0x376 <writePin+0xcc>
 37e:	cb 01       	movw	r24, r22
 380:	80 95       	com	r24
 382:	84 23       	and	r24, r20
 384:	85 bb       	out	0x15, r24	; 21
 386:	08 95       	ret
 388:	98 ee       	ldi	r25, 0xE8	; 232
 38a:	98 0f       	add	r25, r24
 38c:	98 30       	cpi	r25, 0x08	; 8
 38e:	10 f5       	brcc	.+68     	; 0x3d4 <writePin+0x12a>
 390:	61 30       	cpi	r22, 0x01	; 1
 392:	79 f4       	brne	.+30     	; 0x3b2 <writePin+0x108>
 394:	42 b3       	in	r20, 0x12	; 18
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	48 97       	sbiw	r24, 0x18	; 24
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	b9 01       	movw	r22, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <writePin+0xfc>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	8a 95       	dec	r24
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <writePin+0xf8>
 3aa:	cb 01       	movw	r24, r22
 3ac:	84 2b       	or	r24, r20
 3ae:	82 bb       	out	0x12, r24	; 18
 3b0:	08 95       	ret
 3b2:	61 11       	cpse	r22, r1
 3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <writePin+0x12a>
 3b6:	42 b3       	in	r20, 0x12	; 18
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	48 97       	sbiw	r24, 0x18	; 24
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	b9 01       	movw	r22, r18
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <writePin+0x11e>
 3c4:	66 0f       	add	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	8a 95       	dec	r24
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <writePin+0x11a>
 3cc:	cb 01       	movw	r24, r22
 3ce:	80 95       	com	r24
 3d0:	84 23       	and	r24, r20
 3d2:	82 bb       	out	0x12, r24	; 18
 3d4:	08 95       	ret

000003d6 <readPin>:
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PA0)&&(pinNo<=PA7))
 3d6:	88 30       	cpi	r24, 0x08	; 8
 3d8:	58 f4       	brcc	.+22     	; 0x3f0 <readPin+0x1a>
		result=GETBit(PINA,pinNo);
 3da:	29 b3       	in	r18, 0x19	; 25
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	a9 01       	movw	r20, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <readPin+0x10>
 3e2:	55 95       	asr	r21
 3e4:	47 95       	ror	r20
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <readPin+0xc>
 3ea:	ca 01       	movw	r24, r20
 3ec:	81 70       	andi	r24, 0x01	; 1
 3ee:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
 3f0:	98 ef       	ldi	r25, 0xF8	; 248
 3f2:	98 0f       	add	r25, r24
 3f4:	98 30       	cpi	r25, 0x08	; 8
 3f6:	70 f4       	brcc	.+28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		result=GETBit(PINB,pinNo-8);
 3f8:	96 b3       	in	r25, 0x16	; 22
 3fa:	28 2f       	mov	r18, r24
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	28 50       	subi	r18, 0x08	; 8
 400:	31 09       	sbc	r19, r1
 402:	89 2f       	mov	r24, r25
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	2a 95       	dec	r18
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	81 70       	andi	r24, 0x01	; 1
 412:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
 414:	90 ef       	ldi	r25, 0xF0	; 240
 416:	98 0f       	add	r25, r24
 418:	98 30       	cpi	r25, 0x08	; 8
 41a:	70 f4       	brcc	.+28     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		result=GETBit(PINC,pinNo-16);
 41c:	93 b3       	in	r25, 0x13	; 19
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	20 51       	subi	r18, 0x10	; 16
 424:	31 09       	sbc	r19, r1
 426:	89 2f       	mov	r24, r25
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	95 95       	asr	r25
 42e:	87 95       	ror	r24
 430:	2a 95       	dec	r18
 432:	e2 f7       	brpl	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	81 70       	andi	r24, 0x01	; 1
 436:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
 438:	98 ee       	ldi	r25, 0xE8	; 232
 43a:	98 0f       	add	r25, r24
 43c:	98 30       	cpi	r25, 0x08	; 8
 43e:	70 f4       	brcc	.+28     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		result=GETBit(PIND,pinNo-24);
 440:	90 b3       	in	r25, 0x10	; 16
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	28 51       	subi	r18, 0x18	; 24
 448:	31 09       	sbc	r19, r1
 44a:	89 2f       	mov	r24, r25
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	95 95       	asr	r25
 452:	87 95       	ror	r24
 454:	2a 95       	dec	r18
 456:	e2 f7       	brpl	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	81 70       	andi	r24, 0x01	; 1
 45a:	08 95       	ret
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
 45c:	80 e0       	ldi	r24, 0x00	; 0
		result=GETBit(PINC,pinNo-16);
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,pinNo-24);
	else{}
	return result;
}
 45e:	08 95       	ret

00000460 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 460:	41 30       	cpi	r20, 0x01	; 1
 462:	29 f4       	brne	.+10     	; 0x46e <writePins+0xe>
		SETBits(*port,mask);
 464:	fc 01       	movw	r30, r24
 466:	20 81       	ld	r18, Z
 468:	62 2b       	or	r22, r18
 46a:	60 83       	st	Z, r22
 46c:	08 95       	ret
	else if(logic==LOW)
 46e:	41 11       	cpse	r20, r1
 470:	05 c0       	rjmp	.+10     	; 0x47c <writePins+0x1c>
		CLRBits(*port,mask);
 472:	fc 01       	movw	r30, r24
 474:	20 81       	ld	r18, Z
 476:	60 95       	com	r22
 478:	62 23       	and	r22, r18
 47a:	60 83       	st	Z, r22
 47c:	08 95       	ret

0000047e <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 47e:	41 30       	cpi	r20, 0x01	; 1
 480:	29 f4       	brne	.+10     	; 0x48c <pinsDirection+0xe>
		SETBits(*ddr,mask);
 482:	fc 01       	movw	r30, r24
 484:	20 81       	ld	r18, Z
 486:	62 2b       	or	r22, r18
 488:	60 83       	st	Z, r22
 48a:	08 95       	ret
	else if(direction == INPUT)
 48c:	41 11       	cpse	r20, r1
 48e:	05 c0       	rjmp	.+10     	; 0x49a <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 490:	fc 01       	movw	r30, r24
 492:	20 81       	ld	r18, Z
 494:	60 95       	com	r22
 496:	62 23       	and	r22, r18
 498:	60 83       	st	Z, r22
 49a:	08 95       	ret

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
