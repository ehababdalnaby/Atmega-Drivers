
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000060e  000006a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800078  00800078  000006ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028f7  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c22  00000000  00000000  000031df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1f  00000000  00000000  00003e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00004c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000799  00000000  00000000  00004ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ca  00000000  00000000  0000578d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3d       	cpi	r26, 0xDD	; 221
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 05 03 	jmp	0x60a	; 0x60a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#error define includes.h file
#endif


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a7 97       	sbiw	r28, 0x27	; 39
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	I2C_Init();
  a6:	0e 94 9b 02 	call	0x536	; 0x536 <I2C_Init>
	LCD_init();
  aa:	0e 94 83 01 	call	0x306	; 0x306 <LCD_init>
	u8 data1[]="NTI Group hello world !";
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	e0 e6       	ldi	r30, 0x60	; 96
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
	u8 data2[15];
	u8 data='x';
	
	 I2C_EEPROM_Write(0x00,'E');
  c0:	65 e4       	ldi	r22, 0x45	; 69
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 94 00 	call	0x128	; 0x128 <I2C_EEPROM_Write>
	 I2C_EEPROM_Write(0x01,'a');
  cc:	61 e6       	ldi	r22, 0x61	; 97
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 94 00 	call	0x128	; 0x128 <I2C_EEPROM_Write>
	 I2C_EEPROM_Write(0x02,'f');	
  d8:	66 e6       	ldi	r22, 0x66	; 102
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 94 00 	call	0x128	; 0x128 <I2C_EEPROM_Write>
	 I2C_EEPROM_Page_Write(0x00,data1);
  e4:	be 01       	movw	r22, r28
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_EEPROM_Page_Write>
	 I2C_EEPROM_Seq_Read(0x05,16,data2);
  f2:	ae 01       	movw	r20, r28
  f4:	47 5e       	subi	r20, 0xE7	; 231
  f6:	5f 4f       	sbci	r21, 0xFF	; 255
  f8:	60 e1       	ldi	r22, 0x10	; 16
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_EEPROM_Seq_Read>
	 disp_strXY(1,1,data2);
 104:	ae 01       	movw	r20, r28
 106:	47 5e       	subi	r20, 0xE7	; 231
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <disp_strXY>
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	a7 96       	adiw	r28, 0x27	; 39
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <I2C_EEPROM_Write>:
	I2C_start();
	I2C_Write((CMD_READ),SCMRSLA_Ack_Code); //send control Byte
	I2C_Read(data,ReceiveData_NAck_code); //send data
	I2C_Stop();
	_delay_ms(1);
}
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
 130:	16 2f       	mov	r17, r22
 132:	0e 94 ac 02 	call	0x558	; 0x558 <I2C_start>
 136:	ce 01       	movw	r24, r28
 138:	88 0f       	add	r24, r24
 13a:	89 2f       	mov	r24, r25
 13c:	88 1f       	adc	r24, r24
 13e:	99 0b       	sbc	r25, r25
 140:	91 95       	neg	r25
 142:	82 70       	andi	r24, 0x02	; 2
 144:	68 e1       	ldi	r22, 0x18	; 24
 146:	80 6a       	ori	r24, 0xA0	; 160
 148:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Write>
 14c:	68 e1       	ldi	r22, 0x18	; 24
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Write>
 154:	68 e2       	ldi	r22, 0x28	; 40
 156:	81 2f       	mov	r24, r17
 158:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Write>
 15c:	0e 94 a1 02 	call	0x542	; 0x542 <I2C_Stop>
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	9c e9       	ldi	r25, 0x9C	; 156
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <I2C_EEPROM_Write+0x3c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <I2C_EEPROM_Write+0x42>
 16a:	00 00       	nop
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	08 95       	ret

00000174 <I2C_EEPROM_Seq_Read>:


void I2C_EEPROM_Seq_Read(u8 add,u8 Numchar,u8 *data)
{
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	c8 2f       	mov	r28, r24
 17e:	d6 2f       	mov	r29, r22
 180:	8a 01       	movw	r16, r20
	u8 i=0;
	I2C_start(); //send start
 182:	0e 94 ac 02 	call	0x558	; 0x558 <I2C_start>
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMRSLA_Ack_Code); //send control Byte
 186:	60 e4       	ldi	r22, 0x40	; 64
 188:	80 ea       	ldi	r24, 0xA0	; 160
 18a:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Write>
	I2C_Write(add,SCMRSLA_Ack_Code);  //send address word
 18e:	60 e4       	ldi	r22, 0x40	; 64
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Write>
	I2C_Restart();
 196:	0e 94 b5 02 	call	0x56a	; 0x56a <I2C_Restart>
	I2C_Write((CMD_READ),SCMRSLA_Ack_Code); //send control Byte
 19a:	60 e4       	ldi	r22, 0x40	; 64
 19c:	81 ea       	ldi	r24, 0xA1	; 161
 19e:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Write>
}


void I2C_EEPROM_Seq_Read(u8 add,u8 Numchar,u8 *data)
{
	u8 i=0;
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_start(); //send start
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMRSLA_Ack_Code); //send control Byte
	I2C_Write(add,SCMRSLA_Ack_Code);  //send address word
	I2C_Restart();
	I2C_Write((CMD_READ),SCMRSLA_Ack_Code); //send control Byte
	while(i<Numchar-1)
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <I2C_EEPROM_Seq_Read+0x40>
	{
		I2C_Read(&data[i],ReceiveData_Ack_code); //send data
 1a6:	60 e5       	ldi	r22, 0x50	; 80
 1a8:	c8 01       	movw	r24, r16
 1aa:	8c 0f       	add	r24, r28
 1ac:	91 1d       	adc	r25, r1
 1ae:	0e 94 c8 02 	call	0x590	; 0x590 <I2C_Read>
		i++;
 1b2:	cf 5f       	subi	r28, 0xFF	; 255
	I2C_start(); //send start
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMRSLA_Ack_Code); //send control Byte
	I2C_Write(add,SCMRSLA_Ack_Code);  //send address word
	I2C_Restart();
	I2C_Write((CMD_READ),SCMRSLA_Ack_Code); //send control Byte
	while(i<Numchar-1)
 1b4:	2c 2f       	mov	r18, r28
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	8d 2f       	mov	r24, r29
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	28 17       	cp	r18, r24
 1c0:	39 07       	cpc	r19, r25
 1c2:	8c f3       	brlt	.-30     	; 0x1a6 <I2C_EEPROM_Seq_Read+0x32>
	{
		I2C_Read(&data[i],ReceiveData_Ack_code); //send data
		i++;
	}
	I2C_Read(&data[i],ReceiveData_NAck_code); //send data
 1c4:	68 e5       	ldi	r22, 0x58	; 88
 1c6:	c8 01       	movw	r24, r16
 1c8:	8c 0f       	add	r24, r28
 1ca:	91 1d       	adc	r25, r1
 1cc:	0e 94 c8 02 	call	0x590	; 0x590 <I2C_Read>
	I2C_Stop();
 1d0:	0e 94 a1 02 	call	0x542	; 0x542 <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	8f e9       	ldi	r24, 0x9F	; 159
 1d6:	9f e0       	ldi	r25, 0x0F	; 15
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <I2C_EEPROM_Seq_Read+0x64>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <I2C_EEPROM_Seq_Read+0x6a>
 1de:	00 00       	nop
	_delay_ms(1);
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <I2C_EEPROM_Page_Write>:

void I2C_EEPROM_Page_Write(u16 add,u8* data)
{
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	8c 01       	movw	r16, r24
 1f4:	eb 01       	movw	r28, r22
	u8 i=0;
	I2C_start(); //send start
 1f6:	0e 94 ac 02 	call	0x558	; 0x558 <I2C_start>
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMTSLA_Ack_Code); //send control Byte
 1fa:	c8 01       	movw	r24, r16
 1fc:	88 0f       	add	r24, r24
 1fe:	89 2f       	mov	r24, r25
 200:	88 1f       	adc	r24, r24
 202:	99 0b       	sbc	r25, r25
 204:	91 95       	neg	r25
 206:	82 70       	andi	r24, 0x02	; 2
 208:	68 e1       	ldi	r22, 0x18	; 24
 20a:	80 6a       	ori	r24, 0xA0	; 160
 20c:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Write>
	I2C_Write(add,SCMTSLA_Ack_Code);  //send address word
 210:	68 e1       	ldi	r22, 0x18	; 24
 212:	80 2f       	mov	r24, r16
 214:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Write>
	_delay_ms(1);
}

void I2C_EEPROM_Page_Write(u16 add,u8* data)
{
	u8 i=0;
 218:	10 e0       	ldi	r17, 0x00	; 0
	I2C_start(); //send start
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMTSLA_Ack_Code); //send control Byte
	I2C_Write(add,SCMTSLA_Ack_Code);  //send address word
	while(*data!='\0' && i<16)
 21a:	05 c0       	rjmp	.+10     	; 0x226 <I2C_EEPROM_Page_Write+0x3c>
	{
		I2C_Write(*data,SlaveData_Ack_code); //send data
 21c:	68 e2       	ldi	r22, 0x28	; 40
 21e:	0e 94 be 02 	call	0x57c	; 0x57c <I2C_Write>
		data++;
 222:	21 96       	adiw	r28, 0x01	; 1
		i++;
 224:	1f 5f       	subi	r17, 0xFF	; 255
{
	u8 i=0;
	I2C_start(); //send start
	I2C_Write(((add>>7)&0x02)|(CMD_WRITE),SCMTSLA_Ack_Code); //send control Byte
	I2C_Write(add,SCMTSLA_Ack_Code);  //send address word
	while(*data!='\0' && i<16)
 226:	88 81       	ld	r24, Y
 228:	88 23       	and	r24, r24
 22a:	11 f0       	breq	.+4      	; 0x230 <I2C_EEPROM_Page_Write+0x46>
 22c:	10 31       	cpi	r17, 0x10	; 16
 22e:	b0 f3       	brcs	.-20     	; 0x21c <I2C_EEPROM_Page_Write+0x32>
	{
		I2C_Write(*data,SlaveData_Ack_code); //send data
		data++;
		i++;
	}
	I2C_Stop();
 230:	0e 94 a1 02 	call	0x542	; 0x542 <I2C_Stop>
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	9c e9       	ldi	r25, 0x9C	; 156
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <I2C_EEPROM_Page_Write+0x4e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <I2C_EEPROM_Page_Write+0x54>
 23e:	00 00       	nop
	_delay_ms(10);
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	8b e0       	ldi	r24, 0x0B	; 11
 24e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <writePin>
 252:	87 ec       	ldi	r24, 0xC7	; 199
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_latch+0xc>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_latch+0x12>
 25c:	00 00       	nop
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	8b e0       	ldi	r24, 0x0B	; 11
 262:	0e 94 e7 01 	call	0x3ce	; 0x3ce <writePin>
 266:	87 ec       	ldi	r24, 0xC7	; 199
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_latch+0x20>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_latch+0x26>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <SendToLCD>:
 274:	cf 93       	push	r28
 276:	c8 2f       	mov	r28, r24
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	60 ef       	ldi	r22, 0xF0	; 240
 27c:	8b e3       	ldi	r24, 0x3B	; 59
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 7d 02 	call	0x4fa	; 0x4fa <writePins>
 284:	6c 2f       	mov	r22, r28
 286:	60 7f       	andi	r22, 0xF0	; 240
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	8b e3       	ldi	r24, 0x3B	; 59
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <writePins>
 292:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_latch>
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	60 ef       	ldi	r22, 0xF0	; 240
 29a:	8b e3       	ldi	r24, 0x3B	; 59
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <writePins>
 2a2:	80 e1       	ldi	r24, 0x10	; 16
 2a4:	c8 9f       	mul	r28, r24
 2a6:	b0 01       	movw	r22, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	8b e3       	ldi	r24, 0x3B	; 59
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <writePins>
 2b4:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_latch>
 2b8:	87 ec       	ldi	r24, 0xC7	; 199
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <SendToLCD+0x48>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <SendToLCD+0x4e>
 2c2:	00 00       	nop
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <LCD_send_cmd>:
 2c8:	cf 93       	push	r28
 2ca:	c8 2f       	mov	r28, r24
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	89 e0       	ldi	r24, 0x09	; 9
 2d0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <writePin>
 2d4:	8c 2f       	mov	r24, r28
 2d6:	0e 94 3a 01 	call	0x274	; 0x274 <SendToLCD>
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <LCD_CLEAR>:
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_send_cmd>
 2e4:	8f e3       	ldi	r24, 0x3F	; 63
 2e6:	9f e1       	ldi	r25, 0x1F	; 31
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_CLEAR+0xa>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_CLEAR+0x10>
 2ee:	00 00       	nop
 2f0:	08 95       	ret

000002f2 <LCD_ret_Home>:
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_send_cmd>
 2f8:	8f e3       	ldi	r24, 0x3F	; 63
 2fa:	9f e1       	ldi	r25, 0x1F	; 31
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_ret_Home+0xa>
 300:	00 c0       	rjmp	.+0      	; 0x302 <LCD_ret_Home+0x10>
 302:	00 00       	nop
 304:	08 95       	ret

00000306 <LCD_init>:
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	60 ef       	ldi	r22, 0xF0	; 240
 30a:	8a e3       	ldi	r24, 0x3A	; 58
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 8c 02 	call	0x518	; 0x518 <pinsDirection>
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	6e e0       	ldi	r22, 0x0E	; 14
 316:	87 e3       	ldi	r24, 0x37	; 55
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 8c 02 	call	0x518	; 0x518 <pinsDirection>
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	8a e0       	ldi	r24, 0x0A	; 10
 322:	0e 94 e7 01 	call	0x3ce	; 0x3ce <writePin>
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	83 ef       	ldi	r24, 0xF3	; 243
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <LCD_init+0x26>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_init+0x30>
 336:	00 00       	nop
 338:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_ret_Home>
 33c:	86 e0       	ldi	r24, 0x06	; 6
 33e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_send_cmd>
 342:	8c e0       	ldi	r24, 0x0C	; 12
 344:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_send_cmd>
 348:	80 e1       	ldi	r24, 0x10	; 16
 34a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_send_cmd>
 34e:	88 e2       	ldi	r24, 0x28	; 40
 350:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_send_cmd>
 354:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_CLEAR>
 358:	08 95       	ret

0000035a <LCD_send_data>:
 35a:	cf 93       	push	r28
 35c:	c8 2f       	mov	r28, r24
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	89 e0       	ldi	r24, 0x09	; 9
 362:	0e 94 e7 01 	call	0x3ce	; 0x3ce <writePin>
 366:	8c 2f       	mov	r24, r28
 368:	0e 94 3a 01 	call	0x274	; 0x274 <SendToLCD>
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <disp_char>:
 370:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_send_data>
 374:	08 95       	ret

00000376 <disp_str>:
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	8c 01       	movw	r16, r24
 37e:	c0 e0       	ldi	r28, 0x00	; 0
 380:	03 c0       	rjmp	.+6      	; 0x388 <disp_str+0x12>
 382:	0e 94 b8 01 	call	0x370	; 0x370 <disp_char>
 386:	cf 5f       	subi	r28, 0xFF	; 255
 388:	f8 01       	movw	r30, r16
 38a:	ec 0f       	add	r30, r28
 38c:	f1 1d       	adc	r31, r1
 38e:	80 81       	ld	r24, Z
 390:	81 11       	cpse	r24, r1
 392:	f7 cf       	rjmp	.-18     	; 0x382 <disp_str+0xc>
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <LCD_GOTXY>:
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	29 f4       	brne	.+10     	; 0x3aa <LCD_GOTXY+0xe>
 3a0:	8f e7       	ldi	r24, 0x7F	; 127
 3a2:	86 0f       	add	r24, r22
 3a4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_send_cmd>
 3a8:	08 95       	ret
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	21 f4       	brne	.+8      	; 0x3b6 <LCD_GOTXY+0x1a>
 3ae:	8f eb       	ldi	r24, 0xBF	; 191
 3b0:	86 0f       	add	r24, r22
 3b2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_send_cmd>
 3b6:	08 95       	ret

000003b8 <disp_strXY>:
	else{}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
 3be:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_GOTXY>
	disp_str(str);
 3c2:	ce 01       	movw	r24, r28
 3c4:	0e 94 bb 01 	call	0x376	; 0x376 <disp_str>
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 3ce:	88 30       	cpi	r24, 0x08	; 8
 3d0:	f8 f4       	brcc	.+62     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3d2:	61 30       	cpi	r22, 0x01	; 1
 3d4:	69 f4       	brne	.+26     	; 0x3f0 <writePin+0x22>
 3d6:	4b b3       	in	r20, 0x1b	; 27
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	b9 01       	movw	r22, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <writePin+0x16>
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	8a 95       	dec	r24
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <writePin+0x12>
 3e8:	cb 01       	movw	r24, r22
 3ea:	84 2b       	or	r24, r20
 3ec:	8b bb       	out	0x1b, r24	; 27
 3ee:	08 95       	ret
 3f0:	61 11       	cpse	r22, r1
 3f2:	82 c0       	rjmp	.+260    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 3f4:	4b b3       	in	r20, 0x1b	; 27
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	b9 01       	movw	r22, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	8a 95       	dec	r24
 404:	e2 f7       	brpl	.-8      	; 0x3fe <writePin+0x30>
 406:	cb 01       	movw	r24, r22
 408:	80 95       	com	r24
 40a:	84 23       	and	r24, r20
 40c:	8b bb       	out	0x1b, r24	; 27
 40e:	08 95       	ret
 410:	98 ef       	ldi	r25, 0xF8	; 248
 412:	98 0f       	add	r25, r24
 414:	98 30       	cpi	r25, 0x08	; 8
 416:	18 f5       	brcc	.+70     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 418:	61 30       	cpi	r22, 0x01	; 1
 41a:	79 f4       	brne	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41c:	48 b3       	in	r20, 0x18	; 24
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	08 97       	sbiw	r24, 0x08	; 8
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	b9 01       	movw	r22, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	8a 95       	dec	r24
 430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	cb 01       	movw	r24, r22
 434:	84 2b       	or	r24, r20
 436:	88 bb       	out	0x18, r24	; 24
 438:	08 95       	ret
 43a:	61 11       	cpse	r22, r1
 43c:	5d c0       	rjmp	.+186    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 43e:	48 b3       	in	r20, 0x18	; 24
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	08 97       	sbiw	r24, 0x08	; 8
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	b9 01       	movw	r22, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	8a 95       	dec	r24
 452:	e2 f7       	brpl	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	cb 01       	movw	r24, r22
 456:	80 95       	com	r24
 458:	84 23       	and	r24, r20
 45a:	88 bb       	out	0x18, r24	; 24
 45c:	08 95       	ret
 45e:	90 ef       	ldi	r25, 0xF0	; 240
 460:	98 0f       	add	r25, r24
 462:	98 30       	cpi	r25, 0x08	; 8
 464:	18 f5       	brcc	.+70     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 466:	61 30       	cpi	r22, 0x01	; 1
 468:	79 f4       	brne	.+30     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 46a:	45 b3       	in	r20, 0x15	; 21
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	40 97       	sbiw	r24, 0x10	; 16
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 480:	cb 01       	movw	r24, r22
 482:	84 2b       	or	r24, r20
 484:	85 bb       	out	0x15, r24	; 21
 486:	08 95       	ret
 488:	61 11       	cpse	r22, r1
 48a:	36 c0       	rjmp	.+108    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 48c:	45 b3       	in	r20, 0x15	; 21
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	40 97       	sbiw	r24, 0x10	; 16
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4a2:	cb 01       	movw	r24, r22
 4a4:	80 95       	com	r24
 4a6:	84 23       	and	r24, r20
 4a8:	85 bb       	out	0x15, r24	; 21
 4aa:	08 95       	ret
 4ac:	98 ee       	ldi	r25, 0xE8	; 232
 4ae:	98 0f       	add	r25, r24
 4b0:	98 30       	cpi	r25, 0x08	; 8
 4b2:	10 f5       	brcc	.+68     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4b4:	61 30       	cpi	r22, 0x01	; 1
 4b6:	79 f4       	brne	.+30     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4b8:	42 b3       	in	r20, 0x12	; 18
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	48 97       	sbiw	r24, 0x18	; 24
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	b9 01       	movw	r22, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	8a 95       	dec	r24
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ce:	cb 01       	movw	r24, r22
 4d0:	84 2b       	or	r24, r20
 4d2:	82 bb       	out	0x12, r24	; 18
 4d4:	08 95       	ret
 4d6:	61 11       	cpse	r22, r1
 4d8:	0f c0       	rjmp	.+30     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4da:	42 b3       	in	r20, 0x12	; 18
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	48 97       	sbiw	r24, 0x18	; 24
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b9 01       	movw	r22, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	8a 95       	dec	r24
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4f0:	cb 01       	movw	r24, r22
 4f2:	80 95       	com	r24
 4f4:	84 23       	and	r24, r20
 4f6:	82 bb       	out	0x12, r24	; 18
 4f8:	08 95       	ret

000004fa <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 4fa:	41 30       	cpi	r20, 0x01	; 1
 4fc:	29 f4       	brne	.+10     	; 0x508 <writePins+0xe>
		SETBits(*port,mask);
 4fe:	fc 01       	movw	r30, r24
 500:	20 81       	ld	r18, Z
 502:	62 2b       	or	r22, r18
 504:	60 83       	st	Z, r22
 506:	08 95       	ret
	else if(logic==LOW)
 508:	41 11       	cpse	r20, r1
 50a:	05 c0       	rjmp	.+10     	; 0x516 <writePins+0x1c>
		CLRBits(*port,mask);
 50c:	fc 01       	movw	r30, r24
 50e:	20 81       	ld	r18, Z
 510:	60 95       	com	r22
 512:	62 23       	and	r22, r18
 514:	60 83       	st	Z, r22
 516:	08 95       	ret

00000518 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 518:	41 30       	cpi	r20, 0x01	; 1
 51a:	29 f4       	brne	.+10     	; 0x526 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 51c:	fc 01       	movw	r30, r24
 51e:	20 81       	ld	r18, Z
 520:	62 2b       	or	r22, r18
 522:	60 83       	st	Z, r22
 524:	08 95       	ret
	else if(direction == INPUT)
 526:	41 11       	cpse	r20, r1
 528:	05 c0       	rjmp	.+10     	; 0x534 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 52a:	fc 01       	movw	r30, r24
 52c:	20 81       	ld	r18, Z
 52e:	60 95       	com	r22
 530:	62 23       	and	r22, r18
 532:	60 83       	st	Z, r22
 534:	08 95       	ret

00000536 <I2C_Init>:
 */ 
#include "I2C.h"

void I2C_Init(void)
{				
	TWBR=32;				//set clk prescaler 100Khz
 536:	80 e2       	ldi	r24, 0x20	; 32
 538:	80 b9       	out	0x00, r24	; 0
	SETBit(TWCR,TWEN);		//TWI enable 
 53a:	86 b7       	in	r24, 0x36	; 54
 53c:	84 60       	ori	r24, 0x04	; 4
 53e:	86 bf       	out	0x36, r24	; 54
 540:	08 95       	ret

00000542 <I2C_Stop>:
	return(I2C_Check_status(Restart_Code));
}

void I2C_Stop(void)
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWSTO); //enable the i2c , set the flag and send stop
 542:	84 e9       	ldi	r24, 0x94	; 148
 544:	86 bf       	out	0x36, r24	; 54
 546:	08 95       	ret

00000548 <I2C_Check_status>:
}


BOOL I2C_Check_status(u8 status_code)
{
	return(TWSR & 0xF8==status_code);
 548:	21 b1       	in	r18, 0x01	; 1
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	88 3f       	cpi	r24, 0xF8	; 248
 54e:	09 f0       	breq	.+2      	; 0x552 <I2C_Check_status+0xa>
 550:	90 e0       	ldi	r25, 0x00	; 0
}
 552:	82 2f       	mov	r24, r18
 554:	89 23       	and	r24, r25
 556:	08 95       	ret

00000558 <I2C_start>:
	SETBit(TWCR,TWEN);		//TWI enable 
}

BOOL I2C_start(void)
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWSTA); //enable the i2c , set the flag and send start 
 558:	84 ea       	ldi	r24, 0xA4	; 164
 55a:	86 bf       	out	0x36, r24	; 54
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
 55c:	06 b6       	in	r0, 0x36	; 54
 55e:	07 fe       	sbrs	r0, 7
 560:	fd cf       	rjmp	.-6      	; 0x55c <I2C_start+0x4>
	return(I2C_Check_status(Start_Code));
 562:	88 e0       	ldi	r24, 0x08	; 8
 564:	0e 94 a4 02 	call	0x548	; 0x548 <I2C_Check_status>
}
 568:	08 95       	ret

0000056a <I2C_Restart>:

BOOL I2C_Restart(void)
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWSTA); //enable the i2c , set the flag and send Restart
 56a:	84 ea       	ldi	r24, 0xA4	; 164
 56c:	86 bf       	out	0x36, r24	; 54
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
 56e:	06 b6       	in	r0, 0x36	; 54
 570:	07 fe       	sbrs	r0, 7
 572:	fd cf       	rjmp	.-6      	; 0x56e <I2C_Restart+0x4>
	return(I2C_Check_status(Restart_Code));
 574:	80 e1       	ldi	r24, 0x10	; 16
 576:	0e 94 a4 02 	call	0x548	; 0x548 <I2C_Check_status>
}
 57a:	08 95       	ret

0000057c <I2C_Write>:
}


BOOL I2C_Write(u8 _8_Bit,u8 status_code)
{
	TWDR=_8_Bit;
 57c:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);
 57e:	84 e8       	ldi	r24, 0x84	; 132
 580:	86 bf       	out	0x36, r24	; 54
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
 582:	06 b6       	in	r0, 0x36	; 54
 584:	07 fe       	sbrs	r0, 7
 586:	fd cf       	rjmp	.-6      	; 0x582 <I2C_Write+0x6>
	return(I2C_Check_status(status_code));
 588:	86 2f       	mov	r24, r22
 58a:	0e 94 a4 02 	call	0x548	; 0x548 <I2C_Check_status>
}
 58e:	08 95       	ret

00000590 <I2C_Read>:


BOOL I2C_Read(u8* _8_Bit,u8 status_code)
{
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	ec 01       	movw	r28, r24
 596:	86 2f       	mov	r24, r22
	TWCR=(1<<TWEN)|(1<<TWINT);
 598:	94 e8       	ldi	r25, 0x84	; 132
 59a:	96 bf       	out	0x36, r25	; 54
	if (status_code==ReceiveData_Ack_code)
 59c:	60 35       	cpi	r22, 0x50	; 80
 59e:	19 f4       	brne	.+6      	; 0x5a6 <I2C_Read+0x16>
	{
		SETBit(TWCR,TWEA);
 5a0:	96 b7       	in	r25, 0x36	; 54
 5a2:	90 64       	ori	r25, 0x40	; 64
 5a4:	96 bf       	out	0x36, r25	; 54
	}
	while(!GETBit(TWCR,TWINT));    //wait to execute the process
 5a6:	06 b6       	in	r0, 0x36	; 54
 5a8:	07 fe       	sbrs	r0, 7
 5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <I2C_Read+0x16>
	
	if (I2C_Check_status(status_code))
 5ac:	0e 94 a4 02 	call	0x548	; 0x548 <I2C_Check_status>
 5b0:	88 23       	and	r24, r24
 5b2:	21 f0       	breq	.+8      	; 0x5bc <I2C_Read+0x2c>
	{
		*_8_Bit=TWDR;
 5b4:	83 b1       	in	r24, 0x03	; 3
 5b6:	88 83       	st	Y, r24
		return TRUE;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <I2C_Read+0x30>
	}
	*_8_Bit=TWDR;
 5bc:	93 b1       	in	r25, 0x03	; 3
 5be:	98 83       	st	Y, r25
	return FALSE;
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <__vector_13>:

u8 gps[100];
u8 i=0;
u8 CHECK[]="$GPGGA";
ISR(USART_RXC_vect)
{
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
	gps[i]=UDR;
 5d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 5dc:	e8 2f       	mov	r30, r24
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	9c b1       	in	r25, 0x0c	; 12
 5e2:	e7 58       	subi	r30, 0x87	; 135
 5e4:	ff 4f       	sbci	r31, 0xFF	; 255
 5e6:	90 83       	st	Z, r25
	i++;
 5e8:	8f 5f       	subi	r24, 0xFF	; 255
 5ea:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
	if (i==5)
 5ee:	85 30       	cpi	r24, 0x05	; 5
 5f0:	19 f4       	brne	.+6      	; 0x5f8 <__vector_13+0x32>
	{
		gps[6]='\0';
 5f2:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gps+0x6>
		cli();
 5f6:	f8 94       	cli
	}
}
 5f8:	ff 91       	pop	r31
 5fa:	ef 91       	pop	r30
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	0f 90       	pop	r0
 602:	0f be       	out	0x3f, r0	; 63
 604:	0f 90       	pop	r0
 606:	1f 90       	pop	r1
 608:	18 95       	reti

0000060a <_exit>:
 60a:	f8 94       	cli

0000060c <__stop_program>:
 60c:	ff cf       	rjmp	.-2      	; 0x60c <__stop_program>
