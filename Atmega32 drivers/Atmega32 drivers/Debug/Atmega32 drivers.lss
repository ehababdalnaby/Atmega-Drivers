
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000005b8  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000244b  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000afe  00000000  00000000  00002c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c23  00000000  00000000  0000375d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000318  00000000  00000000  00004380  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000726  00000000  00000000  00004698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001095  00000000  00000000  00004dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00005e53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:




int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a2 97       	sbiw	r28, 0x22	; 34
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	SPI_Init(SPI_MASTER);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 a3 02 	call	0x546	; 0x546 <SPI_Init>
	LCD_init();
  ac:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_init>
	u8 col=1;
	// writeEEPROM(0x00,'A');
	u8 name[]="ehab abdo mahmoud";
  b0:	82 e1       	ldi	r24, 0x12	; 18
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x28>
	writePageEEPROM(0x00,name);
  c2:	be 01       	movw	r22, r28
  c4:	6f 5f       	subi	r22, 0xFF	; 255
  c6:	7f 4f       	sbci	r23, 0xFF	; 255
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <writePageEEPROM>
	u8 name_modified[16];
	ReadEEPROMSTR(0x05,4,name_modified);
  d0:	ae 01       	movw	r20, r28
  d2:	4d 5e       	subi	r20, 0xED	; 237
  d4:	5f 4f       	sbci	r21, 0xFF	; 255
  d6:	64 e0       	ldi	r22, 0x04	; 4
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 0f 01 	call	0x21e	; 0x21e <ReadEEPROMSTR>
	disp_strXY(1,1,name_modified);
  e0:	ae 01       	movw	r20, r28
  e2:	4d 5e       	subi	r20, 0xED	; 237
  e4:	5f 4f       	sbci	r21, 0xFF	; 255
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <disp_strXY>
// 		
// 		}

	 
	
}
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	a2 96       	adiw	r28, 0x22	; 34
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <readEEPROM>:
	 SPI_Transceive((u8) location);
	 SPI_Transceive(data);
	 writePin(PB4,HIGH);
	 _delay_ms(10);
	 WRITE_DI();
 }
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ec 01       	movw	r28, r24
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 112:	8f ec       	ldi	r24, 0xCF	; 207
 114:	97 e0       	ldi	r25, 0x07	; 7
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <readEEPROM+0x12>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <readEEPROM+0x18>
 11c:	00 00       	nop
 11e:	ce 01       	movw	r24, r28
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	92 95       	swap	r25
 126:	82 95       	swap	r24
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	89 27       	eor	r24, r25
 12c:	9f 70       	andi	r25, 0x0F	; 15
 12e:	89 27       	eor	r24, r25
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	83 60       	ori	r24, 0x03	; 3
 134:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_Transceive>
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_Transceive>
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_Transceive>
 144:	c8 2f       	mov	r28, r24
 146:	8f e1       	ldi	r24, 0x1F	; 31
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <readEEPROM+0x46>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <readEEPROM+0x4c>
 150:	00 00       	nop
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 15a:	8c 2f       	mov	r24, r28
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <WRITE_EN>:
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	8c e0       	ldi	r24, 0x0C	; 12
 166:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_Transceive>
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 178:	8f e9       	ldi	r24, 0x9F	; 159
 17a:	9f e0       	ldi	r25, 0x0F	; 15
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <WRITE_EN+0x1a>
 180:	00 c0       	rjmp	.+0      	; 0x182 <WRITE_EN+0x20>
 182:	00 00       	nop
 184:	08 95       	ret

00000186 <WRITE_DI>:
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_Transceive>
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <WRITE_DI+0x1a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <WRITE_DI+0x20>
 1a6:	00 00       	nop
 1a8:	08 95       	ret

000001aa <writePageEEPROM>:
  }
  
  
  
 void writePageEEPROM(u16 location,u8* str)
 {
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	8b 01       	movw	r16, r22
	 u8 index=0;
	  WRITE_EN();					//write enable
 1b6:	0e 94 b1 00 	call	0x162	; 0x162 <WRITE_EN>
	  writePin(PB4,LOW);			//CS enable
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	8c e0       	ldi	r24, 0x0C	; 12
 1be:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
	  SPI_Transceive(((location>>5)& ~(0x7))|EROM_COM_WRITE);
 1c2:	ce 01       	movw	r24, r28
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	92 95       	swap	r25
 1ca:	82 95       	swap	r24
 1cc:	8f 70       	andi	r24, 0x0F	; 15
 1ce:	89 27       	eor	r24, r25
 1d0:	9f 70       	andi	r25, 0x0F	; 15
 1d2:	89 27       	eor	r24, r25
 1d4:	88 7f       	andi	r24, 0xF8	; 248
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_Transceive>
	  SPI_Transceive((u8) location);
 1dc:	8c 2f       	mov	r24, r28
 1de:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_Transceive>
  
  
  
 void writePageEEPROM(u16 location,u8* str)
 {
	 u8 index=0;
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
	  WRITE_EN();					//write enable
	  writePin(PB4,LOW);			//CS enable
	  SPI_Transceive(((location>>5)& ~(0x7))|EROM_COM_WRITE);
	  SPI_Transceive((u8) location);
	  while(str[index]!='\0'&&(index<16))
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <writePageEEPROM+0x42>
	  {
		  SPI_Transceive(str[index]);
 1e6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_Transceive>
		  index++;
 1ea:	cf 5f       	subi	r28, 0xFF	; 255
	 u8 index=0;
	  WRITE_EN();					//write enable
	  writePin(PB4,LOW);			//CS enable
	  SPI_Transceive(((location>>5)& ~(0x7))|EROM_COM_WRITE);
	  SPI_Transceive((u8) location);
	  while(str[index]!='\0'&&(index<16))
 1ec:	f8 01       	movw	r30, r16
 1ee:	ec 0f       	add	r30, r28
 1f0:	f1 1d       	adc	r31, r1
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	11 f0       	breq	.+4      	; 0x1fc <writePageEEPROM+0x52>
 1f8:	c0 31       	cpi	r28, 0x10	; 16
 1fa:	a8 f3       	brcs	.-22     	; 0x1e6 <writePageEEPROM+0x3c>
	  {
		  SPI_Transceive(str[index]);
		  index++;
	  }
	  writePin(PB4,HIGH);  
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	8c e0       	ldi	r24, 0x0C	; 12
 200:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	8f e1       	ldi	r24, 0x1F	; 31
 206:	9e e4       	ldi	r25, 0x4E	; 78
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <writePageEEPROM+0x5e>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <writePageEEPROM+0x64>
 20e:	00 00       	nop
	  _delay_ms(10);
	  WRITE_DI();//write disable
 210:	0e 94 c3 00 	call	0x186	; 0x186 <WRITE_DI>
 }
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	08 95       	ret

0000021e <ReadEEPROMSTR>:
 
void ReadEEPROMSTR(u16 location,u8 CharNum,u8 * ReadStr)
{
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	6c 01       	movw	r12, r24
 230:	d6 2f       	mov	r29, r22
 232:	7a 01       	movw	r14, r20
	u8 Counter = 0;
 234:	c0 e0       	ldi	r28, 0x00	; 0
	for(;Counter<CharNum;Counter++)
 236:	0c c0       	rjmp	.+24     	; 0x250 <ReadEEPROMSTR+0x32>
	{
		ReadStr[Counter]=readEEPROM((location+Counter));
 238:	8c 2f       	mov	r24, r28
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	87 01       	movw	r16, r14
 23e:	08 0f       	add	r16, r24
 240:	19 1f       	adc	r17, r25
 242:	8c 0d       	add	r24, r12
 244:	9d 1d       	adc	r25, r13
 246:	0e 94 82 00 	call	0x104	; 0x104 <readEEPROM>
 24a:	f8 01       	movw	r30, r16
 24c:	80 83       	st	Z, r24
 }
 
void ReadEEPROMSTR(u16 location,u8 CharNum,u8 * ReadStr)
{
	u8 Counter = 0;
	for(;Counter<CharNum;Counter++)
 24e:	cf 5f       	subi	r28, 0xFF	; 255
 250:	cd 17       	cp	r28, r29
 252:	90 f3       	brcs	.-28     	; 0x238 <ReadEEPROMSTR+0x1a>
	{
		ReadStr[Counter]=readEEPROM((location+Counter));
	}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	08 95       	ret

00000266 <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	8b e0       	ldi	r24, 0x0B	; 11
 26a:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 26e:	8a e6       	ldi	r24, 0x6A	; 106
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_latch+0xa>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_latch+0x10>
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	8b e0       	ldi	r24, 0x0B	; 11
 27a:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 27e:	8a e6       	ldi	r24, 0x6A	; 106
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_latch+0x1a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_latch+0x20>
 286:	08 95       	ret

00000288 <SendToLCD>:
 288:	cf 93       	push	r28
 28a:	c8 2f       	mov	r28, r24
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	60 ef       	ldi	r22, 0xF0	; 240
 290:	8b e3       	ldi	r24, 0x3B	; 59
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 85 02 	call	0x50a	; 0x50a <writePins>
 298:	6c 2f       	mov	r22, r28
 29a:	60 7f       	andi	r22, 0xF0	; 240
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	8b e3       	ldi	r24, 0x3B	; 59
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 85 02 	call	0x50a	; 0x50a <writePins>
 2a6:	0e 94 33 01 	call	0x266	; 0x266 <LCD_latch>
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	60 ef       	ldi	r22, 0xF0	; 240
 2ae:	8b e3       	ldi	r24, 0x3B	; 59
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 85 02 	call	0x50a	; 0x50a <writePins>
 2b6:	80 e1       	ldi	r24, 0x10	; 16
 2b8:	c8 9f       	mul	r28, r24
 2ba:	b0 01       	movw	r22, r0
 2bc:	11 24       	eor	r1, r1
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	8b e3       	ldi	r24, 0x3B	; 59
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 85 02 	call	0x50a	; 0x50a <writePins>
 2c8:	0e 94 33 01 	call	0x266	; 0x266 <LCD_latch>
 2cc:	8a e6       	ldi	r24, 0x6A	; 106
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <SendToLCD+0x46>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <SendToLCD+0x4c>
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <LCD_send_cmd>:
 2d8:	cf 93       	push	r28
 2da:	c8 2f       	mov	r28, r24
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	89 e0       	ldi	r24, 0x09	; 9
 2e0:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 2e4:	8c 2f       	mov	r24, r28
 2e6:	0e 94 44 01 	call	0x288	; 0x288 <SendToLCD>
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <LCD_CLEAR>:
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_send_cmd>
 2f4:	8f e9       	ldi	r24, 0x9F	; 159
 2f6:	9f e0       	ldi	r25, 0x0F	; 15
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_CLEAR+0xa>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_CLEAR+0x10>
 2fe:	00 00       	nop
 300:	08 95       	ret

00000302 <LCD_ret_Home>:
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_send_cmd>
 308:	8f e9       	ldi	r24, 0x9F	; 159
 30a:	9f e0       	ldi	r25, 0x0F	; 15
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_ret_Home+0xa>
 310:	00 c0       	rjmp	.+0      	; 0x312 <LCD_ret_Home+0x10>
 312:	00 00       	nop
 314:	08 95       	ret

00000316 <LCD_init>:
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	60 ef       	ldi	r22, 0xF0	; 240
 31a:	8a e3       	ldi	r24, 0x3A	; 58
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 94 02 	call	0x528	; 0x528 <pinsDirection>
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	6e e0       	ldi	r22, 0x0E	; 14
 326:	87 e3       	ldi	r24, 0x37	; 55
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 94 02 	call	0x528	; 0x528 <pinsDirection>
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	8a e0       	ldi	r24, 0x0A	; 10
 332:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	89 ef       	ldi	r24, 0xF9	; 249
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <LCD_init+0x26>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_init+0x30>
 346:	00 00       	nop
 348:	0e 94 81 01 	call	0x302	; 0x302 <LCD_ret_Home>
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_send_cmd>
 352:	8f e0       	ldi	r24, 0x0F	; 15
 354:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_send_cmd>
 358:	80 e1       	ldi	r24, 0x10	; 16
 35a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_send_cmd>
 35e:	88 e2       	ldi	r24, 0x28	; 40
 360:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_send_cmd>
 364:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_CLEAR>
 368:	08 95       	ret

0000036a <LCD_send_data>:
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	89 e0       	ldi	r24, 0x09	; 9
 372:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>
 376:	8c 2f       	mov	r24, r28
 378:	0e 94 44 01 	call	0x288	; 0x288 <SendToLCD>
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <disp_char>:
 380:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_send_data>
 384:	08 95       	ret

00000386 <disp_str>:
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	8c 01       	movw	r16, r24
 38e:	c0 e0       	ldi	r28, 0x00	; 0
 390:	03 c0       	rjmp	.+6      	; 0x398 <disp_str+0x12>
 392:	0e 94 c0 01 	call	0x380	; 0x380 <disp_char>
 396:	cf 5f       	subi	r28, 0xFF	; 255
 398:	f8 01       	movw	r30, r16
 39a:	ec 0f       	add	r30, r28
 39c:	f1 1d       	adc	r31, r1
 39e:	80 81       	ld	r24, Z
 3a0:	81 11       	cpse	r24, r1
 3a2:	f7 cf       	rjmp	.-18     	; 0x392 <disp_str+0xc>
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <LCD_GOTXY>:
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	29 f4       	brne	.+10     	; 0x3ba <LCD_GOTXY+0xe>
 3b0:	8f e7       	ldi	r24, 0x7F	; 127
 3b2:	86 0f       	add	r24, r22
 3b4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_send_cmd>
 3b8:	08 95       	ret
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <LCD_GOTXY+0x1a>
 3be:	8f eb       	ldi	r24, 0xBF	; 191
 3c0:	86 0f       	add	r24, r22
 3c2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_send_cmd>
 3c6:	08 95       	ret

000003c8 <disp_strXY>:
	else{}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
 3ce:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_GOTXY>
	disp_str(str);
 3d2:	ce 01       	movw	r24, r28
 3d4:	0e 94 c3 01 	call	0x386	; 0x386 <disp_str>
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	f8 f4       	brcc	.+62     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3e2:	61 30       	cpi	r22, 0x01	; 1
 3e4:	69 f4       	brne	.+26     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e6:	4b b3       	in	r20, 0x1b	; 27
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	b9 01       	movw	r22, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <writePin+0x16>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <writePin+0x12>
 3f8:	cb 01       	movw	r24, r22
 3fa:	84 2b       	or	r24, r20
 3fc:	8b bb       	out	0x1b, r24	; 27
 3fe:	08 95       	ret
 400:	61 11       	cpse	r22, r1
 402:	82 c0       	rjmp	.+260    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 404:	4b b3       	in	r20, 0x1b	; 27
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	b9 01       	movw	r22, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	66 0f       	add	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	8a 95       	dec	r24
 414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	cb 01       	movw	r24, r22
 418:	80 95       	com	r24
 41a:	84 23       	and	r24, r20
 41c:	8b bb       	out	0x1b, r24	; 27
 41e:	08 95       	ret
 420:	98 ef       	ldi	r25, 0xF8	; 248
 422:	98 0f       	add	r25, r24
 424:	98 30       	cpi	r25, 0x08	; 8
 426:	18 f5       	brcc	.+70     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 428:	61 30       	cpi	r22, 0x01	; 1
 42a:	79 f4       	brne	.+30     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42c:	48 b3       	in	r20, 0x18	; 24
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	08 97       	sbiw	r24, 0x08	; 8
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	b9 01       	movw	r22, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	8a 95       	dec	r24
 440:	e2 f7       	brpl	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 442:	cb 01       	movw	r24, r22
 444:	84 2b       	or	r24, r20
 446:	88 bb       	out	0x18, r24	; 24
 448:	08 95       	ret
 44a:	61 11       	cpse	r22, r1
 44c:	5d c0       	rjmp	.+186    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 44e:	48 b3       	in	r20, 0x18	; 24
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	08 97       	sbiw	r24, 0x08	; 8
 454:	21 e0       	ldi	r18, 0x01	; 1
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	b9 01       	movw	r22, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	8a 95       	dec	r24
 462:	e2 f7       	brpl	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 464:	cb 01       	movw	r24, r22
 466:	80 95       	com	r24
 468:	84 23       	and	r24, r20
 46a:	88 bb       	out	0x18, r24	; 24
 46c:	08 95       	ret
 46e:	90 ef       	ldi	r25, 0xF0	; 240
 470:	98 0f       	add	r25, r24
 472:	98 30       	cpi	r25, 0x08	; 8
 474:	18 f5       	brcc	.+70     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 476:	61 30       	cpi	r22, 0x01	; 1
 478:	79 f4       	brne	.+30     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 47a:	45 b3       	in	r20, 0x15	; 21
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	40 97       	sbiw	r24, 0x10	; 16
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	b9 01       	movw	r22, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 490:	cb 01       	movw	r24, r22
 492:	84 2b       	or	r24, r20
 494:	85 bb       	out	0x15, r24	; 21
 496:	08 95       	ret
 498:	61 11       	cpse	r22, r1
 49a:	36 c0       	rjmp	.+108    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 49c:	45 b3       	in	r20, 0x15	; 21
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	40 97       	sbiw	r24, 0x10	; 16
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	b9 01       	movw	r22, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	8a 95       	dec	r24
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4b2:	cb 01       	movw	r24, r22
 4b4:	80 95       	com	r24
 4b6:	84 23       	and	r24, r20
 4b8:	85 bb       	out	0x15, r24	; 21
 4ba:	08 95       	ret
 4bc:	98 ee       	ldi	r25, 0xE8	; 232
 4be:	98 0f       	add	r25, r24
 4c0:	98 30       	cpi	r25, 0x08	; 8
 4c2:	10 f5       	brcc	.+68     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4c4:	61 30       	cpi	r22, 0x01	; 1
 4c6:	79 f4       	brne	.+30     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4c8:	42 b3       	in	r20, 0x12	; 18
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	48 97       	sbiw	r24, 0x18	; 24
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4de:	cb 01       	movw	r24, r22
 4e0:	84 2b       	or	r24, r20
 4e2:	82 bb       	out	0x12, r24	; 18
 4e4:	08 95       	ret
 4e6:	61 11       	cpse	r22, r1
 4e8:	0f c0       	rjmp	.+30     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4ea:	42 b3       	in	r20, 0x12	; 18
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	48 97       	sbiw	r24, 0x18	; 24
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	b9 01       	movw	r22, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 500:	cb 01       	movw	r24, r22
 502:	80 95       	com	r24
 504:	84 23       	and	r24, r20
 506:	82 bb       	out	0x12, r24	; 18
 508:	08 95       	ret

0000050a <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 50a:	41 30       	cpi	r20, 0x01	; 1
 50c:	29 f4       	brne	.+10     	; 0x518 <writePins+0xe>
		SETBits(*port,mask);
 50e:	fc 01       	movw	r30, r24
 510:	20 81       	ld	r18, Z
 512:	62 2b       	or	r22, r18
 514:	60 83       	st	Z, r22
 516:	08 95       	ret
	else if(logic==LOW)
 518:	41 11       	cpse	r20, r1
 51a:	05 c0       	rjmp	.+10     	; 0x526 <writePins+0x1c>
		CLRBits(*port,mask);
 51c:	fc 01       	movw	r30, r24
 51e:	20 81       	ld	r18, Z
 520:	60 95       	com	r22
 522:	62 23       	and	r22, r18
 524:	60 83       	st	Z, r22
 526:	08 95       	ret

00000528 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 528:	41 30       	cpi	r20, 0x01	; 1
 52a:	29 f4       	brne	.+10     	; 0x536 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 52c:	fc 01       	movw	r30, r24
 52e:	20 81       	ld	r18, Z
 530:	62 2b       	or	r22, r18
 532:	60 83       	st	Z, r22
 534:	08 95       	ret
	else if(direction == INPUT)
 536:	41 11       	cpse	r20, r1
 538:	05 c0       	rjmp	.+10     	; 0x544 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 53a:	fc 01       	movw	r30, r24
 53c:	20 81       	ld	r18, Z
 53e:	60 95       	com	r22
 540:	62 23       	and	r22, r18
 542:	60 83       	st	Z, r22
 544:	08 95       	ret

00000546 <SPI_Init>:
#include "SPI.h"
void SPI_Init(SPI_Mode spiMode){
	switch(spiMode){
 546:	88 23       	and	r24, r24
 548:	19 f0       	breq	.+6      	; 0x550 <SPI_Init+0xa>
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	d9 f0       	breq	.+54     	; 0x584 <SPI_Init+0x3e>
 54e:	08 95       	ret
	case SPI_MASTER:
	SETBit(SPI_DDR,SPI_SS);
 550:	87 b3       	in	r24, 0x17	; 23
 552:	80 61       	ori	r24, 0x10	; 16
 554:	87 bb       	out	0x17, r24	; 23
	SETBit(SPI_DDR,SPI_SCK);
 556:	87 b3       	in	r24, 0x17	; 23
 558:	80 68       	ori	r24, 0x80	; 128
 55a:	87 bb       	out	0x17, r24	; 23
	SETBit(SPI_DDR,SPI_MOSI);
 55c:	87 b3       	in	r24, 0x17	; 23
 55e:	80 62       	ori	r24, 0x20	; 32
 560:	87 bb       	out	0x17, r24	; 23
	CLRBit(SPI_DDR,SPI_MISO);
 562:	87 b3       	in	r24, 0x17	; 23
 564:	8f 7b       	andi	r24, 0xBF	; 191
 566:	87 bb       	out	0x17, r24	; 23
	
		SETBit(SPCR,SPR0);
 568:	8d b1       	in	r24, 0x0d	; 13
 56a:	81 60       	ori	r24, 0x01	; 1
 56c:	8d b9       	out	0x0d, r24	; 13
		SETBit(SPCR,MSTR);
 56e:	8d b1       	in	r24, 0x0d	; 13
 570:	80 61       	ori	r24, 0x10	; 16
 572:	8d b9       	out	0x0d, r24	; 13
		SETBit(SPCR,SPE);
 574:	8d b1       	in	r24, 0x0d	; 13
 576:	80 64       	ori	r24, 0x40	; 64
 578:	8d b9       	out	0x0d, r24	; 13
	    writePin(PB4,HIGH);
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	8c e0       	ldi	r24, 0x0C	; 12
 57e:	0e 94 ef 01 	call	0x3de	; 0x3de <writePin>

	break;
 582:	08 95       	ret
	case SPI_SLAVE:
	CLRBit(SPI_DDR,SPI_SS);
 584:	87 b3       	in	r24, 0x17	; 23
 586:	8f 7e       	andi	r24, 0xEF	; 239
 588:	87 bb       	out	0x17, r24	; 23
	CLRBit(SPI_DDR,SPI_SCK);
 58a:	87 b3       	in	r24, 0x17	; 23
 58c:	8f 77       	andi	r24, 0x7F	; 127
 58e:	87 bb       	out	0x17, r24	; 23
	CLRBit(SPI_DDR,SPI_MOSI);
 590:	87 b3       	in	r24, 0x17	; 23
 592:	8f 7d       	andi	r24, 0xDF	; 223
 594:	87 bb       	out	0x17, r24	; 23
	SETBit(SPI_DDR,SPI_MISO);
 596:	87 b3       	in	r24, 0x17	; 23
 598:	80 64       	ori	r24, 0x40	; 64
 59a:	87 bb       	out	0x17, r24	; 23
	
		CLRBit(SPCR,MSTR);
 59c:	8d b1       	in	r24, 0x0d	; 13
 59e:	8f 7e       	andi	r24, 0xEF	; 239
 5a0:	8d b9       	out	0x0d, r24	; 13
		SETBit(SPCR,SPE);
 5a2:	8d b1       	in	r24, 0x0d	; 13
 5a4:	80 64       	ori	r24, 0x40	; 64
 5a6:	8d b9       	out	0x0d, r24	; 13
 5a8:	08 95       	ret

000005aa <SPI_Transceive>:

	break;
	}
}
u8 SPI_Transceive(u8 data){
		SPDR = data;
 5aa:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
 5ac:	77 9b       	sbis	0x0e, 7	; 14
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <SPI_Transceive+0x2>
		return SPDR;
 5b0:	8f b1       	in	r24, 0x0f	; 15
}
 5b2:	08 95       	ret

000005b4 <_exit>:
 5b4:	f8 94       	cli

000005b6 <__stop_program>:
 5b6:	ff cf       	rjmp	.-2      	; 0x5b6 <__stop_program>
