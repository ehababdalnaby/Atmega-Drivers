
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000845  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cd  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042b  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  000014bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001eb  00000000  00000000  0000191e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include "includes.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	pinsDirection(&DDRC,0x84,OUTPUT);
  74:	41 e0       	ldi	r20, 0x01	; 1
  76:	64 e8       	ldi	r22, 0x84	; 132
  78:	84 e3       	ldi	r24, 0x34	; 52
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 77 00 	call	0xee	; 0xee <pinsDirection>
	writePins(&PORTC,0x84,HIGH);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	64 e8       	ldi	r22, 0x84	; 132
  84:	85 e3       	ldi	r24, 0x35	; 53
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 47 00 	call	0x8e	; 0x8e <writePins>
    /* Replace with your application code */
    while (1) 
    {

		
    }
  8c:	ff cf       	rjmp	.-2      	; 0x8c <main+0x20>

0000008e <writePins>:
}

//u8 readPin(u8 pinNo){}
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	00 d0       	rcall	.+0      	; 0x94 <writePins+0x6>
  94:	00 d0       	rcall	.+0      	; 0x96 <writePins+0x8>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	9a 83       	std	Y+2, r25	; 0x02
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6b 83       	std	Y+3, r22	; 0x03
  a0:	4c 83       	std	Y+4, r20	; 0x04
	if(logic==HIGH)
  a2:	8c 81       	ldd	r24, Y+4	; 0x04
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	61 f4       	brne	.+24     	; 0xc0 <writePins+0x32>
		SETBits(*port,mask);
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	fc 01       	movw	r30, r24
  ae:	90 81       	ld	r25, Z
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	29 2f       	mov	r18, r25
  b4:	28 2b       	or	r18, r24
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	9a 81       	ldd	r25, Y+2	; 0x02
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
  be:	10 c0       	rjmp	.+32     	; 0xe0 <writePins+0x52>
	else if(logic==LOW)
  c0:	8c 81       	ldd	r24, Y+4	; 0x04
  c2:	88 23       	and	r24, r24
  c4:	69 f4       	brne	.+26     	; 0xe0 <writePins+0x52>
		CLRBits(*port,mask);
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	fc 01       	movw	r30, r24
  cc:	80 81       	ld	r24, Z
  ce:	98 2f       	mov	r25, r24
  d0:	8b 81       	ldd	r24, Y+3	; 0x03
  d2:	80 95       	com	r24
  d4:	89 23       	and	r24, r25
  d6:	28 2f       	mov	r18, r24
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	9a 81       	ldd	r25, Y+2	; 0x02
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	else{}
}
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <pinsDirection>:
void pinsDirection(volatile u8* ddr,u8 mask, u8 direction){
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <pinsDirection+0x6>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <pinsDirection+0x8>
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	6b 83       	std	Y+3, r22	; 0x03
 100:	4c 83       	std	Y+4, r20	; 0x04
	if(direction == OUTPUT)
 102:	8c 81       	ldd	r24, Y+4	; 0x04
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	61 f4       	brne	.+24     	; 0x120 <pinsDirection+0x32>
		SETBits(*ddr,mask);
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	fc 01       	movw	r30, r24
 10e:	90 81       	ld	r25, Z
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	29 2f       	mov	r18, r25
 114:	28 2b       	or	r18, r24
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	9a 81       	ldd	r25, Y+2	; 0x02
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
 11e:	10 c0       	rjmp	.+32     	; 0x140 <pinsDirection+0x52>
	else if(direction == INPUT)
 120:	8c 81       	ldd	r24, Y+4	; 0x04
 122:	88 23       	and	r24, r24
 124:	69 f4       	brne	.+26     	; 0x140 <pinsDirection+0x52>
		CLRBits(*ddr,mask);
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	98 2f       	mov	r25, r24
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	80 95       	com	r24
 134:	89 23       	and	r24, r25
 136:	28 2f       	mov	r18, r24
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	9a 81       	ldd	r25, Y+2	; 0x02
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
	else{}
}
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
