
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a45  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d4  00000000  00000000  00000d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00001301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049e  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000105  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001be7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:




int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	 //CLockAPP();
	 //KeyPadAPP();
	 //ADCAPP();
	//counterAPP();
	UART_INIT(9600);
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	95 e2       	ldi	r25, 0x25	; 37
  9e:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_INIT>
	UART_TX('A');
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	0e 94 aa 00 	call	0x154	; 0x154 <UART_TX>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
	

	 
	
}
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <UART_INIT>:
 *  Author: ehab2_phjirwi
 */ 
#include "includes.h"

void UART_INIT(u16 BaudRate)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	28 97       	sbiw	r28, 0x08	; 8
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
  c6:	9c 83       	std	Y+4, r25	; 0x04
  c8:	8b 83       	std	Y+3, r24	; 0x03
	SETBit(UCSRB,TXEN);
  ca:	8a e2       	ldi	r24, 0x2A	; 42
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	2a e2       	ldi	r18, 0x2A	; 42
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	20 81       	ld	r18, Z
  d6:	28 60       	ori	r18, 0x08	; 8
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	SETBit(UCSRB,RXEN);
  dc:	8a e2       	ldi	r24, 0x2A	; 42
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2a e2       	ldi	r18, 0x2A	; 42
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	20 61       	ori	r18, 0x10	; 16
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  ee:	80 e4       	ldi	r24, 0x40	; 64
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	26 e8       	ldi	r18, 0x86	; 134
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
	u16 BAUD_TEMP=(F_CPU/(16*BaudRate))	-1;	
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	9c 81       	ldd	r25, Y+4	; 0x04
  fc:	82 95       	swap	r24
  fe:	92 95       	swap	r25
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	98 27       	eor	r25, r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	98 27       	eor	r25, r24
 108:	9c 01       	movw	r18, r24
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	94 e2       	ldi	r25, 0x24	; 36
 112:	a4 ef       	ldi	r26, 0xF4	; 244
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	bc 01       	movw	r22, r24
 118:	cd 01       	movw	r24, r26
 11a:	0e 94 c7 00 	call	0x18e	; 0x18e <__udivmodsi4>
 11e:	da 01       	movw	r26, r20
 120:	c9 01       	movw	r24, r18
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=BAUD_TEMP;
 128:	89 e2       	ldi	r24, 0x29	; 41
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	29 81       	ldd	r18, Y+1	; 0x01
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
	UBRRH=(BAUD_TEMP>>8);
 132:	80 e4       	ldi	r24, 0x40	; 64
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	29 81       	ldd	r18, Y+1	; 0x01
 138:	3a 81       	ldd	r19, Y+2	; 0x02
 13a:	23 2f       	mov	r18, r19
 13c:	33 27       	eor	r19, r19
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
	

	
}
 142:	28 96       	adiw	r28, 0x08	; 8
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <UART_TX>:

void UART_TX(u8 data)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
 160:	8c e2       	ldi	r24, 0x2C	; 44
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	29 81       	ldd	r18, Y+1	; 0x01
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
	while(!GETBit(UCSRA,UDRE));		
 16a:	00 00       	nop
 16c:	8b e2       	ldi	r24, 0x2B	; 43
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	82 95       	swap	r24
 176:	86 95       	lsr	r24
 178:	87 70       	andi	r24, 0x07	; 7
 17a:	88 2f       	mov	r24, r24
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	81 70       	andi	r24, 0x01	; 1
 180:	99 27       	eor	r25, r25
 182:	89 2b       	or	r24, r25
 184:	99 f3       	breq	.-26     	; 0x16c <UART_TX+0x18>
}
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <__udivmodsi4>:
 18e:	a1 e2       	ldi	r26, 0x21	; 33
 190:	1a 2e       	mov	r1, r26
 192:	aa 1b       	sub	r26, r26
 194:	bb 1b       	sub	r27, r27
 196:	fd 01       	movw	r30, r26
 198:	0d c0       	rjmp	.+26     	; 0x1b4 <__udivmodsi4_ep>

0000019a <__udivmodsi4_loop>:
 19a:	aa 1f       	adc	r26, r26
 19c:	bb 1f       	adc	r27, r27
 19e:	ee 1f       	adc	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	a2 17       	cp	r26, r18
 1a4:	b3 07       	cpc	r27, r19
 1a6:	e4 07       	cpc	r30, r20
 1a8:	f5 07       	cpc	r31, r21
 1aa:	20 f0       	brcs	.+8      	; 0x1b4 <__udivmodsi4_ep>
 1ac:	a2 1b       	sub	r26, r18
 1ae:	b3 0b       	sbc	r27, r19
 1b0:	e4 0b       	sbc	r30, r20
 1b2:	f5 0b       	sbc	r31, r21

000001b4 <__udivmodsi4_ep>:
 1b4:	66 1f       	adc	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	88 1f       	adc	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	1a 94       	dec	r1
 1be:	69 f7       	brne	.-38     	; 0x19a <__udivmodsi4_loop>
 1c0:	60 95       	com	r22
 1c2:	70 95       	com	r23
 1c4:	80 95       	com	r24
 1c6:	90 95       	com	r25
 1c8:	9b 01       	movw	r18, r22
 1ca:	ac 01       	movw	r20, r24
 1cc:	bd 01       	movw	r22, r26
 1ce:	cf 01       	movw	r24, r30
 1d0:	08 95       	ret

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
