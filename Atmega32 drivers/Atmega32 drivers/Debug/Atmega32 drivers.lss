
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000402  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000771  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a1  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031b  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include "includes.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
pinDirection(PD3,OUTPUT);
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	83 e0       	ldi	r24, 0x03	; 3
  78:	0e 94 21 01 	call	0x242	; 0x242 <pinDirection>
writePin(PD3,HIGH);
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	0e 94 43 00 	call	0x86	; 0x86 <writePin>
    /* Replace with your application code */
    while (1) 
    {

		
    }
  84:	ff cf       	rjmp	.-2      	; 0x84 <main+0x18>

00000086 <writePin>:
 * Created: 8/18/2021 11:18:29 PM
 *  Author: Mohamed
 */ 
#include "includes.h"

void writePin(u8 pinNo,u8 logic){
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	00 d0       	rcall	.+0      	; 0x8c <writePin+0x6>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6a 83       	std	Y+2, r22	; 0x02
	if((pinNo>=PA0)&&(pinNo<=PA7)){
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	88 30       	cpi	r24, 0x08	; 8
  98:	90 f5       	brcc	.+100    	; 0xfe <writePin+0x78>
		if(logic==HIGH)
  9a:	8a 81       	ldd	r24, Y+2	; 0x02
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	a9 f4       	brne	.+42     	; 0xca <writePin+0x44>
		SETBit(PORTA,pinNo);
  a0:	8b e3       	ldi	r24, 0x3B	; 59
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	2b e3       	ldi	r18, 0x3B	; 59
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	20 81       	ld	r18, Z
  ac:	62 2f       	mov	r22, r18
  ae:	29 81       	ldd	r18, Y+1	; 0x01
  b0:	42 2f       	mov	r20, r18
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <writePin+0x38>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	4a 95       	dec	r20
  c0:	e2 f7       	brpl	.-8      	; 0xba <writePin+0x34>
  c2:	26 2b       	or	r18, r22
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
  c8:	b7 c0       	rjmp	.+366    	; 0x238 <writePin+0x1b2>
		else if(logic==LOW)
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	88 23       	and	r24, r24
  ce:	09 f0       	breq	.+2      	; 0xd2 <writePin+0x4c>
  d0:	b3 c0       	rjmp	.+358    	; 0x238 <writePin+0x1b2>
		CLRBit(PORTA,pinNo);
  d2:	8b e3       	ldi	r24, 0x3B	; 59
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2b e3       	ldi	r18, 0x3B	; 59
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	62 2f       	mov	r22, r18
  e0:	29 81       	ldd	r18, Y+1	; 0x01
  e2:	42 2f       	mov	r20, r18
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <writePin+0x6a>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	4a 95       	dec	r20
  f2:	e2 f7       	brpl	.-8      	; 0xec <writePin+0x66>
  f4:	20 95       	com	r18
  f6:	26 23       	and	r18, r22
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	9d c0       	rjmp	.+314    	; 0x238 <writePin+0x1b2>
		else{}
	}
	else if((pinNo>=PB0)&&(pinNo<=PB7)){
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	88 30       	cpi	r24, 0x08	; 8
 102:	90 f5       	brcc	.+100    	; 0x168 <writePin+0xe2>
		if(logic==HIGH)
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	a9 f4       	brne	.+42     	; 0x134 <writePin+0xae>
		SETBit(PORTB,pinNo);
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	28 e3       	ldi	r18, 0x38	; 56
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	20 81       	ld	r18, Z
 116:	62 2f       	mov	r22, r18
 118:	29 81       	ldd	r18, Y+1	; 0x01
 11a:	42 2f       	mov	r20, r18
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <writePin+0xa2>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	4a 95       	dec	r20
 12a:	e2 f7       	brpl	.-8      	; 0x124 <writePin+0x9e>
 12c:	26 2b       	or	r18, r22
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
 132:	82 c0       	rjmp	.+260    	; 0x238 <writePin+0x1b2>
		else if(logic==LOW)
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	88 23       	and	r24, r24
 138:	09 f0       	breq	.+2      	; 0x13c <writePin+0xb6>
 13a:	7e c0       	rjmp	.+252    	; 0x238 <writePin+0x1b2>
		CLRBit(PORTB,pinNo);
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	28 e3       	ldi	r18, 0x38	; 56
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	62 2f       	mov	r22, r18
 14a:	29 81       	ldd	r18, Y+1	; 0x01
 14c:	42 2f       	mov	r20, r18
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <writePin+0xd4>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	4a 95       	dec	r20
 15c:	e2 f7       	brpl	.-8      	; 0x156 <writePin+0xd0>
 15e:	20 95       	com	r18
 160:	26 23       	and	r18, r22
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
 166:	68 c0       	rjmp	.+208    	; 0x238 <writePin+0x1b2>
		else{}
	}
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	90 f5       	brcc	.+100    	; 0x1d2 <writePin+0x14c>
		if(logic==HIGH)
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	a9 f4       	brne	.+42     	; 0x19e <writePin+0x118>
		SETBit(PORTC,pinNo);
 174:	85 e3       	ldi	r24, 0x35	; 53
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	25 e3       	ldi	r18, 0x35	; 53
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	20 81       	ld	r18, Z
 180:	62 2f       	mov	r22, r18
 182:	29 81       	ldd	r18, Y+1	; 0x01
 184:	42 2f       	mov	r20, r18
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <writePin+0x10c>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	4a 95       	dec	r20
 194:	e2 f7       	brpl	.-8      	; 0x18e <writePin+0x108>
 196:	26 2b       	or	r18, r22
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
 19c:	4d c0       	rjmp	.+154    	; 0x238 <writePin+0x1b2>
		else if(logic==LOW)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	88 23       	and	r24, r24
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <writePin+0x120>
 1a4:	49 c0       	rjmp	.+146    	; 0x238 <writePin+0x1b2>
		CLRBit(PORTC,pinNo);
 1a6:	85 e3       	ldi	r24, 0x35	; 53
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	25 e3       	ldi	r18, 0x35	; 53
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	f9 01       	movw	r30, r18
 1b0:	20 81       	ld	r18, Z
 1b2:	62 2f       	mov	r22, r18
 1b4:	29 81       	ldd	r18, Y+1	; 0x01
 1b6:	42 2f       	mov	r20, r18
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <writePin+0x13e>
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	4a 95       	dec	r20
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <writePin+0x13a>
 1c8:	20 95       	com	r18
 1ca:	26 23       	and	r18, r22
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
 1d0:	33 c0       	rjmp	.+102    	; 0x238 <writePin+0x1b2>
		else{}
	}
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	88 30       	cpi	r24, 0x08	; 8
 1d6:	80 f5       	brcc	.+96     	; 0x238 <writePin+0x1b2>
		if(logic==HIGH)
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	a9 f4       	brne	.+42     	; 0x208 <writePin+0x182>
		SETBit(PORTD,pinNo);
 1de:	82 e3       	ldi	r24, 0x32	; 50
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	22 e3       	ldi	r18, 0x32	; 50
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	f9 01       	movw	r30, r18
 1e8:	20 81       	ld	r18, Z
 1ea:	62 2f       	mov	r22, r18
 1ec:	29 81       	ldd	r18, Y+1	; 0x01
 1ee:	42 2f       	mov	r20, r18
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <writePin+0x176>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	4a 95       	dec	r20
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <writePin+0x172>
 200:	26 2b       	or	r18, r22
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
 206:	18 c0       	rjmp	.+48     	; 0x238 <writePin+0x1b2>
		else if(logic==LOW)
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	88 23       	and	r24, r24
 20c:	a9 f4       	brne	.+42     	; 0x238 <writePin+0x1b2>
		CLRBit(PORTD,pinNo);
 20e:	82 e3       	ldi	r24, 0x32	; 50
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	22 e3       	ldi	r18, 0x32	; 50
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	f9 01       	movw	r30, r18
 218:	20 81       	ld	r18, Z
 21a:	62 2f       	mov	r22, r18
 21c:	29 81       	ldd	r18, Y+1	; 0x01
 21e:	42 2f       	mov	r20, r18
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <writePin+0x1a6>
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	4a 95       	dec	r20
 22e:	e2 f7       	brpl	.-8      	; 0x228 <writePin+0x1a2>
 230:	20 95       	com	r18
 232:	26 23       	and	r18, r22
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
		else{}
	}
	else{}
}
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <pinDirection>:
void pinDirection(u8 pinNo, u8 direction){
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <pinDirection+0x6>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	6a 83       	std	Y+2, r22	; 0x02
	if((pinNo >= PA0) && (pinNo <= PA7)){
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 30       	cpi	r24, 0x08	; 8
 254:	90 f5       	brcc	.+100    	; 0x2ba <pinDirection+0x78>
		if(direction == OUTPUT)
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	a9 f4       	brne	.+42     	; 0x286 <pinDirection+0x44>
		SETBit(DDRA,pinNo);
 25c:	8a e3       	ldi	r24, 0x3A	; 58
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2a e3       	ldi	r18, 0x3A	; 58
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	20 81       	ld	r18, Z
 268:	62 2f       	mov	r22, r18
 26a:	29 81       	ldd	r18, Y+1	; 0x01
 26c:	42 2f       	mov	r20, r18
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <pinDirection+0x38>
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	4a 95       	dec	r20
 27c:	e2 f7       	brpl	.-8      	; 0x276 <pinDirection+0x34>
 27e:	26 2b       	or	r18, r22
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
 284:	b7 c0       	rjmp	.+366    	; 0x3f4 <pinDirection+0x1b2>
		else if(direction == INPUT)
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	88 23       	and	r24, r24
 28a:	09 f0       	breq	.+2      	; 0x28e <pinDirection+0x4c>
 28c:	b3 c0       	rjmp	.+358    	; 0x3f4 <pinDirection+0x1b2>
		CLRBit(DDRA,pinNo);
 28e:	8a e3       	ldi	r24, 0x3A	; 58
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	2a e3       	ldi	r18, 0x3A	; 58
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	62 2f       	mov	r22, r18
 29c:	29 81       	ldd	r18, Y+1	; 0x01
 29e:	42 2f       	mov	r20, r18
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <pinDirection+0x6a>
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	4a 95       	dec	r20
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <pinDirection+0x66>
 2b0:	20 95       	com	r18
 2b2:	26 23       	and	r18, r22
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
 2b8:	9d c0       	rjmp	.+314    	; 0x3f4 <pinDirection+0x1b2>
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	88 30       	cpi	r24, 0x08	; 8
 2be:	90 f5       	brcc	.+100    	; 0x324 <pinDirection+0xe2>
		if(direction == OUTPUT)
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	a9 f4       	brne	.+42     	; 0x2f0 <pinDirection+0xae>
		SETBit(DDRB,pinNo);
 2c6:	87 e3       	ldi	r24, 0x37	; 55
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	27 e3       	ldi	r18, 0x37	; 55
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	20 81       	ld	r18, Z
 2d2:	62 2f       	mov	r22, r18
 2d4:	29 81       	ldd	r18, Y+1	; 0x01
 2d6:	42 2f       	mov	r20, r18
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <pinDirection+0xa2>
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	4a 95       	dec	r20
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <pinDirection+0x9e>
 2e8:	26 2b       	or	r18, r22
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
 2ee:	82 c0       	rjmp	.+260    	; 0x3f4 <pinDirection+0x1b2>
		else if(direction == LOW)
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	88 23       	and	r24, r24
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <pinDirection+0xb6>
 2f6:	7e c0       	rjmp	.+252    	; 0x3f4 <pinDirection+0x1b2>
		CLRBit(DDRB,pinNo);
 2f8:	87 e3       	ldi	r24, 0x37	; 55
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	27 e3       	ldi	r18, 0x37	; 55
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	f9 01       	movw	r30, r18
 302:	20 81       	ld	r18, Z
 304:	62 2f       	mov	r22, r18
 306:	29 81       	ldd	r18, Y+1	; 0x01
 308:	42 2f       	mov	r20, r18
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <pinDirection+0xd4>
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	4a 95       	dec	r20
 318:	e2 f7       	brpl	.-8      	; 0x312 <pinDirection+0xd0>
 31a:	20 95       	com	r18
 31c:	26 23       	and	r18, r22
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
 322:	68 c0       	rjmp	.+208    	; 0x3f4 <pinDirection+0x1b2>
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	88 30       	cpi	r24, 0x08	; 8
 328:	90 f5       	brcc	.+100    	; 0x38e <pinDirection+0x14c>
		if(direction == OUTPUT)
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	a9 f4       	brne	.+42     	; 0x35a <pinDirection+0x118>
		SETBit(DDRC,pinNo);
 330:	84 e3       	ldi	r24, 0x34	; 52
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	24 e3       	ldi	r18, 0x34	; 52
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	62 2f       	mov	r22, r18
 33e:	29 81       	ldd	r18, Y+1	; 0x01
 340:	42 2f       	mov	r20, r18
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <pinDirection+0x10c>
 34a:	22 0f       	add	r18, r18
 34c:	33 1f       	adc	r19, r19
 34e:	4a 95       	dec	r20
 350:	e2 f7       	brpl	.-8      	; 0x34a <pinDirection+0x108>
 352:	26 2b       	or	r18, r22
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
 358:	4d c0       	rjmp	.+154    	; 0x3f4 <pinDirection+0x1b2>
		else if(direction==INPUT)
 35a:	8a 81       	ldd	r24, Y+2	; 0x02
 35c:	88 23       	and	r24, r24
 35e:	09 f0       	breq	.+2      	; 0x362 <pinDirection+0x120>
 360:	49 c0       	rjmp	.+146    	; 0x3f4 <pinDirection+0x1b2>
		CLRBit(DDRC,pinNo);
 362:	84 e3       	ldi	r24, 0x34	; 52
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	24 e3       	ldi	r18, 0x34	; 52
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	f9 01       	movw	r30, r18
 36c:	20 81       	ld	r18, Z
 36e:	62 2f       	mov	r22, r18
 370:	29 81       	ldd	r18, Y+1	; 0x01
 372:	42 2f       	mov	r20, r18
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <pinDirection+0x13e>
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	4a 95       	dec	r20
 382:	e2 f7       	brpl	.-8      	; 0x37c <pinDirection+0x13a>
 384:	20 95       	com	r18
 386:	26 23       	and	r18, r22
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
 38c:	33 c0       	rjmp	.+102    	; 0x3f4 <pinDirection+0x1b2>
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	88 30       	cpi	r24, 0x08	; 8
 392:	80 f5       	brcc	.+96     	; 0x3f4 <pinDirection+0x1b2>
		if(direction == OUTPUT)
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	a9 f4       	brne	.+42     	; 0x3c4 <pinDirection+0x182>
		SETBit(DDRD,pinNo);
 39a:	81 e3       	ldi	r24, 0x31	; 49
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	21 e3       	ldi	r18, 0x31	; 49
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	f9 01       	movw	r30, r18
 3a4:	20 81       	ld	r18, Z
 3a6:	62 2f       	mov	r22, r18
 3a8:	29 81       	ldd	r18, Y+1	; 0x01
 3aa:	42 2f       	mov	r20, r18
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <pinDirection+0x176>
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	4a 95       	dec	r20
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <pinDirection+0x172>
 3bc:	26 2b       	or	r18, r22
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
 3c2:	18 c0       	rjmp	.+48     	; 0x3f4 <pinDirection+0x1b2>
		else if(direction == INPUT)
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	88 23       	and	r24, r24
 3c8:	a9 f4       	brne	.+42     	; 0x3f4 <pinDirection+0x1b2>
		CLRBit(DDRD,pinNo);
 3ca:	81 e3       	ldi	r24, 0x31	; 49
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	21 e3       	ldi	r18, 0x31	; 49
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	f9 01       	movw	r30, r18
 3d4:	20 81       	ld	r18, Z
 3d6:	62 2f       	mov	r22, r18
 3d8:	29 81       	ldd	r18, Y+1	; 0x01
 3da:	42 2f       	mov	r20, r18
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <pinDirection+0x1a6>
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	4a 95       	dec	r20
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <pinDirection+0x1a2>
 3ec:	20 95       	com	r18
 3ee:	26 23       	and	r18, r22
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
		else{}
	}
	else{}
}
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
