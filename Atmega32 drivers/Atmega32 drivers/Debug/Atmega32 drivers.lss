
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00001dce  00001e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000c2  008000c2  00001ec4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c3  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  0000436b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  00004dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  000060c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000774  00000000  00000000  0000653c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000910  00000000  00000000  00006cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000075c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3c       	cpi	r26, 0xC4	; 196
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
extern u16 autoAddress ;



int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	c3 58       	subi	r28, 0x83	; 131
      9c:	d1 09       	sbc	r29, r1
      9e:	0f b6       	in	r0, 0x3f	; 63
      a0:	f8 94       	cli
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	cd bf       	out	0x3d, r28	; 61
	
	SPI_Init(SPI_MASTER);
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	0e 94 43 0c 	call	0x1886	; 0x1886 <SPI_Init>
	LCD_init();
      ae:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_init>
    CLR_EEPROM();
      b2:	0e 94 01 05 	call	0xa02	; 0xa02 <CLR_EEPROM>
	u8 name[]="NTI Group -- External EEPROM Task With Automated Filling -- Thank you Dr mahmoud for you efforts ";
      b6:	82 e6       	ldi	r24, 0x62	; 98
      b8:	e0 e6       	ldi	r30, 0x60	; 96
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	de 01       	movw	r26, r28
      be:	52 96       	adiw	r26, 0x12	; 18
      c0:	01 90       	ld	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	8a 95       	dec	r24
      c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2e>
	write_EEPROM_auto(name);
      c8:	ce 01       	movw	r24, r28
      ca:	42 96       	adiw	r24, 0x12	; 18
      cc:	0e 94 30 05 	call	0xa60	; 0xa60 <write_EEPROM_auto>
	u8 name_modified[16];
	u8 i=0;
      d0:	19 82       	std	Y+1, r1	; 0x01
	u8 up,down;
	while(1)
	{
		i=0;
      d2:	19 82       	std	Y+1, r1	; 0x01
		while((i+31)!=autoAddress)
      d4:	a7 c0       	rjmp	.+334    	; 0x224 <main+0x192>
		{
			up=i;
      d6:	89 81       	ldd	r24, Y+1	; 0x01
      d8:	8a 83       	std	Y+2, r24	; 0x02
			down=i+16;
      da:	89 81       	ldd	r24, Y+1	; 0x01
      dc:	80 5f       	subi	r24, 0xF0	; 240
      de:	8b 83       	std	Y+3, r24	; 0x03
			ReadEEPROMSTR(up++,16,name_modified);
      e0:	8a 81       	ldd	r24, Y+2	; 0x02
      e2:	91 e0       	ldi	r25, 0x01	; 1
      e4:	98 0f       	add	r25, r24
      e6:	9a 83       	std	Y+2, r25	; 0x02
      e8:	88 2f       	mov	r24, r24
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	9e 01       	movw	r18, r28
      ee:	2c 58       	subi	r18, 0x8C	; 140
      f0:	3f 4f       	sbci	r19, 0xFF	; 255
      f2:	a9 01       	movw	r20, r18
      f4:	60 e1       	ldi	r22, 0x10	; 16
      f6:	0e 94 cc 04 	call	0x998	; 0x998 <ReadEEPROMSTR>
			disp_strXY(1,1,name_modified);
      fa:	ce 01       	movw	r24, r28
      fc:	8c 58       	subi	r24, 0x8C	; 140
      fe:	9f 4f       	sbci	r25, 0xFF	; 255
     100:	ac 01       	movw	r20, r24
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <disp_strXY>
			ReadEEPROMSTR(down++,16,name_modified);
     10a:	8b 81       	ldd	r24, Y+3	; 0x03
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	98 0f       	add	r25, r24
     110:	9b 83       	std	Y+3, r25	; 0x03
     112:	88 2f       	mov	r24, r24
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	9e 01       	movw	r18, r28
     118:	2c 58       	subi	r18, 0x8C	; 140
     11a:	3f 4f       	sbci	r19, 0xFF	; 255
     11c:	a9 01       	movw	r20, r18
     11e:	60 e1       	ldi	r22, 0x10	; 16
     120:	0e 94 cc 04 	call	0x998	; 0x998 <ReadEEPROMSTR>
			disp_strXY(2,1,name_modified);
     124:	ce 01       	movw	r24, r28
     126:	8c 58       	subi	r24, 0x8C	; 140
     128:	9f 4f       	sbci	r25, 0xFF	; 255
     12a:	ac 01       	movw	r20, r24
     12c:	61 e0       	ldi	r22, 0x01	; 1
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <disp_strXY>
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	a8 e4       	ldi	r26, 0x48	; 72
     13a:	b3 e4       	ldi	r27, 0x43	; 67
     13c:	8c 83       	std	Y+4, r24	; 0x04
     13e:	9d 83       	std	Y+5, r25	; 0x05
     140:	ae 83       	std	Y+6, r26	; 0x06
     142:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a ef       	ldi	r20, 0xFA	; 250
     14a:	54 e4       	ldi	r21, 0x44	; 68
     14c:	6c 81       	ldd	r22, Y+4	; 0x04
     14e:	7d 81       	ldd	r23, Y+5	; 0x05
     150:	8e 81       	ldd	r24, Y+6	; 0x06
     152:	9f 81       	ldd	r25, Y+7	; 0x07
     154:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     158:	dc 01       	movw	r26, r24
     15a:	cb 01       	movw	r24, r22
     15c:	88 87       	std	Y+8, r24	; 0x08
     15e:	99 87       	std	Y+9, r25	; 0x09
     160:	aa 87       	std	Y+10, r26	; 0x0a
     162:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	40 e8       	ldi	r20, 0x80	; 128
     16a:	5f e3       	ldi	r21, 0x3F	; 63
     16c:	68 85       	ldd	r22, Y+8	; 0x08
     16e:	79 85       	ldd	r23, Y+9	; 0x09
     170:	8a 85       	ldd	r24, Y+10	; 0x0a
     172:	9b 85       	ldd	r25, Y+11	; 0x0b
     174:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     178:	88 23       	and	r24, r24
     17a:	2c f4       	brge	.+10     	; 0x186 <main+0xf4>
		__ticks = 1;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	9d 87       	std	Y+13, r25	; 0x0d
     182:	8c 87       	std	Y+12, r24	; 0x0c
     184:	3f c0       	rjmp	.+126    	; 0x204 <main+0x172>
	else if (__tmp > 65535)
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	3f ef       	ldi	r19, 0xFF	; 255
     18a:	4f e7       	ldi	r20, 0x7F	; 127
     18c:	57 e4       	ldi	r21, 0x47	; 71
     18e:	68 85       	ldd	r22, Y+8	; 0x08
     190:	79 85       	ldd	r23, Y+9	; 0x09
     192:	8a 85       	ldd	r24, Y+10	; 0x0a
     194:	9b 85       	ldd	r25, Y+11	; 0x0b
     196:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     19a:	18 16       	cp	r1, r24
     19c:	4c f5       	brge	.+82     	; 0x1f0 <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	40 e2       	ldi	r20, 0x20	; 32
     1a4:	51 e4       	ldi	r21, 0x41	; 65
     1a6:	6c 81       	ldd	r22, Y+4	; 0x04
     1a8:	7d 81       	ldd	r23, Y+5	; 0x05
     1aa:	8e 81       	ldd	r24, Y+6	; 0x06
     1ac:	9f 81       	ldd	r25, Y+7	; 0x07
     1ae:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	bc 01       	movw	r22, r24
     1b8:	cd 01       	movw	r24, r26
     1ba:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     1be:	dc 01       	movw	r26, r24
     1c0:	cb 01       	movw	r24, r22
     1c2:	9d 87       	std	Y+13, r25	; 0x0d
     1c4:	8c 87       	std	Y+12, r24	; 0x0c
     1c6:	0f c0       	rjmp	.+30     	; 0x1e6 <main+0x154>
     1c8:	88 ec       	ldi	r24, 0xC8	; 200
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	9f 87       	std	Y+15, r25	; 0x0f
     1ce:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d0:	8e 85       	ldd	r24, Y+14	; 0x0e
     1d2:	9f 85       	ldd	r25, Y+15	; 0x0f
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x142>
     1d8:	9f 87       	std	Y+15, r25	; 0x0f
     1da:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1dc:	8c 85       	ldd	r24, Y+12	; 0x0c
     1de:	9d 85       	ldd	r25, Y+13	; 0x0d
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	9d 87       	std	Y+13, r25	; 0x0d
     1e4:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     1e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     1ea:	89 2b       	or	r24, r25
     1ec:	69 f7       	brne	.-38     	; 0x1c8 <main+0x136>
     1ee:	14 c0       	rjmp	.+40     	; 0x218 <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1f0:	68 85       	ldd	r22, Y+8	; 0x08
     1f2:	79 85       	ldd	r23, Y+9	; 0x09
     1f4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1f6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1f8:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	9d 87       	std	Y+13, r25	; 0x0d
     202:	8c 87       	std	Y+12, r24	; 0x0c
     204:	8c 85       	ldd	r24, Y+12	; 0x0c
     206:	9d 85       	ldd	r25, Y+13	; 0x0d
     208:	99 8b       	std	Y+17, r25	; 0x11
     20a:	88 8b       	std	Y+16, r24	; 0x10
     20c:	88 89       	ldd	r24, Y+16	; 0x10
     20e:	99 89       	ldd	r25, Y+17	; 0x11
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <main+0x17e>
     214:	99 8b       	std	Y+17, r25	; 0x11
     216:	88 8b       	std	Y+16, r24	; 0x10
			_delay_ms(200);
			i++;i++;
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	8f 5f       	subi	r24, 0xFF	; 255
     21c:	89 83       	std	Y+1, r24	; 0x01
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	8f 5f       	subi	r24, 0xFF	; 255
     222:	89 83       	std	Y+1, r24	; 0x01
	u8 i=0;
	u8 up,down;
	while(1)
	{
		i=0;
		while((i+31)!=autoAddress)
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	88 2f       	mov	r24, r24
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	4f 96       	adiw	r24, 0x1f	; 31
     22c:	9c 01       	movw	r18, r24
     22e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
     232:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x1>
     236:	28 17       	cp	r18, r24
     238:	39 07       	cpc	r19, r25
     23a:	09 f0       	breq	.+2      	; 0x23e <main+0x1ac>
     23c:	4c cf       	rjmp	.-360    	; 0xd6 <main+0x44>
			ReadEEPROMSTR(down++,16,name_modified);
			disp_strXY(2,1,name_modified);
			_delay_ms(200);
			i++;i++;
		}
	}
     23e:	49 cf       	rjmp	.-366    	; 0xd2 <main+0x40>

00000240 <writeEEPROM>:
 */ 
#include "ExtEEPROM.h"

 u16 autoAddress = 0x00;
 void writeEEPROM(u16 location,u8 data)
 {
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	61 97       	sbiw	r28, 0x11	; 17
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	98 8b       	std	Y+16, r25	; 0x10
     256:	8f 87       	std	Y+15, r24	; 0x0f
     258:	69 8b       	std	Y+17, r22	; 0x11
	 WRITE_EN();    
     25a:	0e 94 df 02 	call	0x5be	; 0x5be <WRITE_EN>
	 writePin(PB4,LOW);
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	8c e0       	ldi	r24, 0x0C	; 12
     262:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
	 SPI_Transceive(((location>>5)& ~(0x7))|EROM_COM_WRITE);
     266:	8f 85       	ldd	r24, Y+15	; 0x0f
     268:	98 89       	ldd	r25, Y+16	; 0x10
     26a:	96 95       	lsr	r25
     26c:	87 95       	ror	r24
     26e:	92 95       	swap	r25
     270:	82 95       	swap	r24
     272:	8f 70       	andi	r24, 0x0F	; 15
     274:	89 27       	eor	r24, r25
     276:	9f 70       	andi	r25, 0x0F	; 15
     278:	89 27       	eor	r24, r25
     27a:	88 7f       	andi	r24, 0xF8	; 248
     27c:	82 60       	ori	r24, 0x02	; 2
     27e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
	 SPI_Transceive((u8) location);
     282:	8f 85       	ldd	r24, Y+15	; 0x0f
     284:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
	 SPI_Transceive(data);
     288:	89 89       	ldd	r24, Y+17	; 0x11
     28a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
	 writePin(PB4,HIGH);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	8c e0       	ldi	r24, 0x0C	; 12
     292:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	a0 e2       	ldi	r26, 0x20	; 32
     29c:	b1 e4       	ldi	r27, 0x41	; 65
     29e:	89 83       	std	Y+1, r24	; 0x01
     2a0:	9a 83       	std	Y+2, r25	; 0x02
     2a2:	ab 83       	std	Y+3, r26	; 0x03
     2a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	4a ef       	ldi	r20, 0xFA	; 250
     2ac:	54 e4       	ldi	r21, 0x44	; 68
     2ae:	69 81       	ldd	r22, Y+1	; 0x01
     2b0:	7a 81       	ldd	r23, Y+2	; 0x02
     2b2:	8b 81       	ldd	r24, Y+3	; 0x03
     2b4:	9c 81       	ldd	r25, Y+4	; 0x04
     2b6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     2ba:	dc 01       	movw	r26, r24
     2bc:	cb 01       	movw	r24, r22
     2be:	8d 83       	std	Y+5, r24	; 0x05
     2c0:	9e 83       	std	Y+6, r25	; 0x06
     2c2:	af 83       	std	Y+7, r26	; 0x07
     2c4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e8       	ldi	r20, 0x80	; 128
     2cc:	5f e3       	ldi	r21, 0x3F	; 63
     2ce:	6d 81       	ldd	r22, Y+5	; 0x05
     2d0:	7e 81       	ldd	r23, Y+6	; 0x06
     2d2:	8f 81       	ldd	r24, Y+7	; 0x07
     2d4:	98 85       	ldd	r25, Y+8	; 0x08
     2d6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     2da:	88 23       	and	r24, r24
     2dc:	2c f4       	brge	.+10     	; 0x2e8 <writeEEPROM+0xa8>
		__ticks = 1;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	9a 87       	std	Y+10, r25	; 0x0a
     2e4:	89 87       	std	Y+9, r24	; 0x09
     2e6:	3f c0       	rjmp	.+126    	; 0x366 <writeEEPROM+0x126>
	else if (__tmp > 65535)
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	3f ef       	ldi	r19, 0xFF	; 255
     2ec:	4f e7       	ldi	r20, 0x7F	; 127
     2ee:	57 e4       	ldi	r21, 0x47	; 71
     2f0:	6d 81       	ldd	r22, Y+5	; 0x05
     2f2:	7e 81       	ldd	r23, Y+6	; 0x06
     2f4:	8f 81       	ldd	r24, Y+7	; 0x07
     2f6:	98 85       	ldd	r25, Y+8	; 0x08
     2f8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     2fc:	18 16       	cp	r1, r24
     2fe:	4c f5       	brge	.+82     	; 0x352 <writeEEPROM+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e2       	ldi	r20, 0x20	; 32
     306:	51 e4       	ldi	r21, 0x41	; 65
     308:	69 81       	ldd	r22, Y+1	; 0x01
     30a:	7a 81       	ldd	r23, Y+2	; 0x02
     30c:	8b 81       	ldd	r24, Y+3	; 0x03
     30e:	9c 81       	ldd	r25, Y+4	; 0x04
     310:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     314:	dc 01       	movw	r26, r24
     316:	cb 01       	movw	r24, r22
     318:	bc 01       	movw	r22, r24
     31a:	cd 01       	movw	r24, r26
     31c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     320:	dc 01       	movw	r26, r24
     322:	cb 01       	movw	r24, r22
     324:	9a 87       	std	Y+10, r25	; 0x0a
     326:	89 87       	std	Y+9, r24	; 0x09
     328:	0f c0       	rjmp	.+30     	; 0x348 <writeEEPROM+0x108>
     32a:	88 ec       	ldi	r24, 0xC8	; 200
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	9c 87       	std	Y+12, r25	; 0x0c
     330:	8b 87       	std	Y+11, r24	; 0x0b
     332:	8b 85       	ldd	r24, Y+11	; 0x0b
     334:	9c 85       	ldd	r25, Y+12	; 0x0c
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <writeEEPROM+0xf6>
     33a:	9c 87       	std	Y+12, r25	; 0x0c
     33c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     33e:	89 85       	ldd	r24, Y+9	; 0x09
     340:	9a 85       	ldd	r25, Y+10	; 0x0a
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	9a 87       	std	Y+10, r25	; 0x0a
     346:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     348:	89 85       	ldd	r24, Y+9	; 0x09
     34a:	9a 85       	ldd	r25, Y+10	; 0x0a
     34c:	89 2b       	or	r24, r25
     34e:	69 f7       	brne	.-38     	; 0x32a <writeEEPROM+0xea>
     350:	14 c0       	rjmp	.+40     	; 0x37a <writeEEPROM+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     352:	6d 81       	ldd	r22, Y+5	; 0x05
     354:	7e 81       	ldd	r23, Y+6	; 0x06
     356:	8f 81       	ldd	r24, Y+7	; 0x07
     358:	98 85       	ldd	r25, Y+8	; 0x08
     35a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     35e:	dc 01       	movw	r26, r24
     360:	cb 01       	movw	r24, r22
     362:	9a 87       	std	Y+10, r25	; 0x0a
     364:	89 87       	std	Y+9, r24	; 0x09
     366:	89 85       	ldd	r24, Y+9	; 0x09
     368:	9a 85       	ldd	r25, Y+10	; 0x0a
     36a:	9e 87       	std	Y+14, r25	; 0x0e
     36c:	8d 87       	std	Y+13, r24	; 0x0d
     36e:	8d 85       	ldd	r24, Y+13	; 0x0d
     370:	9e 85       	ldd	r25, Y+14	; 0x0e
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <writeEEPROM+0x132>
     376:	9e 87       	std	Y+14, r25	; 0x0e
     378:	8d 87       	std	Y+13, r24	; 0x0d
	 _delay_ms(10);
	 WRITE_DI();
     37a:	0e 94 6f 03 	call	0x6de	; 0x6de <WRITE_DI>
 }
     37e:	61 96       	adiw	r28, 0x11	; 17
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <readEEPROM>:
 u8 readEEPROM(u16 location)
 {
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	6f 97       	sbiw	r28, 0x1f	; 31
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	9f 8f       	std	Y+31, r25	; 0x1f
     3a6:	8e 8f       	std	Y+30, r24	; 0x1e
	 u8 data;
	 writePin(PB4,LOW);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	8c e0       	ldi	r24, 0x0C	; 12
     3ac:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	a0 e8       	ldi	r26, 0x80	; 128
     3b6:	bf e3       	ldi	r27, 0x3F	; 63
     3b8:	8a 83       	std	Y+2, r24	; 0x02
     3ba:	9b 83       	std	Y+3, r25	; 0x03
     3bc:	ac 83       	std	Y+4, r26	; 0x04
     3be:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	4a ef       	ldi	r20, 0xFA	; 250
     3c6:	54 e4       	ldi	r21, 0x44	; 68
     3c8:	6a 81       	ldd	r22, Y+2	; 0x02
     3ca:	7b 81       	ldd	r23, Y+3	; 0x03
     3cc:	8c 81       	ldd	r24, Y+4	; 0x04
     3ce:	9d 81       	ldd	r25, Y+5	; 0x05
     3d0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     3d4:	dc 01       	movw	r26, r24
     3d6:	cb 01       	movw	r24, r22
     3d8:	8e 83       	std	Y+6, r24	; 0x06
     3da:	9f 83       	std	Y+7, r25	; 0x07
     3dc:	a8 87       	std	Y+8, r26	; 0x08
     3de:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e8       	ldi	r20, 0x80	; 128
     3e6:	5f e3       	ldi	r21, 0x3F	; 63
     3e8:	6e 81       	ldd	r22, Y+6	; 0x06
     3ea:	7f 81       	ldd	r23, Y+7	; 0x07
     3ec:	88 85       	ldd	r24, Y+8	; 0x08
     3ee:	99 85       	ldd	r25, Y+9	; 0x09
     3f0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     3f4:	88 23       	and	r24, r24
     3f6:	2c f4       	brge	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		__ticks = 1;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	9b 87       	std	Y+11, r25	; 0x0b
     3fe:	8a 87       	std	Y+10, r24	; 0x0a
     400:	3f c0       	rjmp	.+126    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
	else if (__tmp > 65535)
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	3f ef       	ldi	r19, 0xFF	; 255
     406:	4f e7       	ldi	r20, 0x7F	; 127
     408:	57 e4       	ldi	r21, 0x47	; 71
     40a:	6e 81       	ldd	r22, Y+6	; 0x06
     40c:	7f 81       	ldd	r23, Y+7	; 0x07
     40e:	88 85       	ldd	r24, Y+8	; 0x08
     410:	99 85       	ldd	r25, Y+9	; 0x09
     412:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     416:	18 16       	cp	r1, r24
     418:	4c f5       	brge	.+82     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	40 e2       	ldi	r20, 0x20	; 32
     420:	51 e4       	ldi	r21, 0x41	; 65
     422:	6a 81       	ldd	r22, Y+2	; 0x02
     424:	7b 81       	ldd	r23, Y+3	; 0x03
     426:	8c 81       	ldd	r24, Y+4	; 0x04
     428:	9d 81       	ldd	r25, Y+5	; 0x05
     42a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	bc 01       	movw	r22, r24
     434:	cd 01       	movw	r24, r26
     436:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	9b 87       	std	Y+11, r25	; 0x0b
     440:	8a 87       	std	Y+10, r24	; 0x0a
     442:	0f c0       	rjmp	.+30     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     444:	88 ec       	ldi	r24, 0xC8	; 200
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	9d 87       	std	Y+13, r25	; 0x0d
     44a:	8c 87       	std	Y+12, r24	; 0x0c
     44c:	8c 85       	ldd	r24, Y+12	; 0x0c
     44e:	9d 85       	ldd	r25, Y+13	; 0x0d
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     454:	9d 87       	std	Y+13, r25	; 0x0d
     456:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     458:	8a 85       	ldd	r24, Y+10	; 0x0a
     45a:	9b 85       	ldd	r25, Y+11	; 0x0b
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	9b 87       	std	Y+11, r25	; 0x0b
     460:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	8a 85       	ldd	r24, Y+10	; 0x0a
     464:	9b 85       	ldd	r25, Y+11	; 0x0b
     466:	89 2b       	or	r24, r25
     468:	69 f7       	brne	.-38     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     46a:	14 c0       	rjmp	.+40     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     46c:	6e 81       	ldd	r22, Y+6	; 0x06
     46e:	7f 81       	ldd	r23, Y+7	; 0x07
     470:	88 85       	ldd	r24, Y+8	; 0x08
     472:	99 85       	ldd	r25, Y+9	; 0x09
     474:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	9b 87       	std	Y+11, r25	; 0x0b
     47e:	8a 87       	std	Y+10, r24	; 0x0a
     480:	8a 85       	ldd	r24, Y+10	; 0x0a
     482:	9b 85       	ldd	r25, Y+11	; 0x0b
     484:	9f 87       	std	Y+15, r25	; 0x0f
     486:	8e 87       	std	Y+14, r24	; 0x0e
     488:	8e 85       	ldd	r24, Y+14	; 0x0e
     48a:	9f 85       	ldd	r25, Y+15	; 0x0f
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     490:	9f 87       	std	Y+15, r25	; 0x0f
     492:	8e 87       	std	Y+14, r24	; 0x0e
	 _delay_ms(1);
	 SPI_Transceive(((location>>5)& ~(0x7))|EROM_COM_READ);
     494:	8e 8d       	ldd	r24, Y+30	; 0x1e
     496:	9f 8d       	ldd	r25, Y+31	; 0x1f
     498:	96 95       	lsr	r25
     49a:	87 95       	ror	r24
     49c:	92 95       	swap	r25
     49e:	82 95       	swap	r24
     4a0:	8f 70       	andi	r24, 0x0F	; 15
     4a2:	89 27       	eor	r24, r25
     4a4:	9f 70       	andi	r25, 0x0F	; 15
     4a6:	89 27       	eor	r24, r25
     4a8:	88 7f       	andi	r24, 0xF8	; 248
     4aa:	83 60       	ori	r24, 0x03	; 3
     4ac:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
	 SPI_Transceive((u8)location);
     4b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4b2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
	 data= SPI_Transceive(0xff);	//send garbage to recieve right data
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	a0 e2       	ldi	r26, 0x20	; 32
     4c4:	b1 e4       	ldi	r27, 0x41	; 65
     4c6:	88 8b       	std	Y+16, r24	; 0x10
     4c8:	99 8b       	std	Y+17, r25	; 0x11
     4ca:	aa 8b       	std	Y+18, r26	; 0x12
     4cc:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	4a ef       	ldi	r20, 0xFA	; 250
     4d4:	54 e4       	ldi	r21, 0x44	; 68
     4d6:	68 89       	ldd	r22, Y+16	; 0x10
     4d8:	79 89       	ldd	r23, Y+17	; 0x11
     4da:	8a 89       	ldd	r24, Y+18	; 0x12
     4dc:	9b 89       	ldd	r25, Y+19	; 0x13
     4de:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	8c 8b       	std	Y+20, r24	; 0x14
     4e8:	9d 8b       	std	Y+21, r25	; 0x15
     4ea:	ae 8b       	std	Y+22, r26	; 0x16
     4ec:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e8       	ldi	r20, 0x80	; 128
     4f4:	5f e3       	ldi	r21, 0x3F	; 63
     4f6:	6c 89       	ldd	r22, Y+20	; 0x14
     4f8:	7d 89       	ldd	r23, Y+21	; 0x15
     4fa:	8e 89       	ldd	r24, Y+22	; 0x16
     4fc:	9f 89       	ldd	r25, Y+23	; 0x17
     4fe:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     502:	88 23       	and	r24, r24
     504:	2c f4       	brge	.+10     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		__ticks = 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	99 8f       	std	Y+25, r25	; 0x19
     50c:	88 8f       	std	Y+24, r24	; 0x18
     50e:	3f c0       	rjmp	.+126    	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
	else if (__tmp > 65535)
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	3f ef       	ldi	r19, 0xFF	; 255
     514:	4f e7       	ldi	r20, 0x7F	; 127
     516:	57 e4       	ldi	r21, 0x47	; 71
     518:	6c 89       	ldd	r22, Y+20	; 0x14
     51a:	7d 89       	ldd	r23, Y+21	; 0x15
     51c:	8e 89       	ldd	r24, Y+22	; 0x16
     51e:	9f 89       	ldd	r25, Y+23	; 0x17
     520:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     524:	18 16       	cp	r1, r24
     526:	4c f5       	brge	.+82     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 e2       	ldi	r20, 0x20	; 32
     52e:	51 e4       	ldi	r21, 0x41	; 65
     530:	68 89       	ldd	r22, Y+16	; 0x10
     532:	79 89       	ldd	r23, Y+17	; 0x11
     534:	8a 89       	ldd	r24, Y+18	; 0x12
     536:	9b 89       	ldd	r25, Y+19	; 0x13
     538:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	bc 01       	movw	r22, r24
     542:	cd 01       	movw	r24, r26
     544:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	99 8f       	std	Y+25, r25	; 0x19
     54e:	88 8f       	std	Y+24, r24	; 0x18
     550:	0f c0       	rjmp	.+30     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     552:	88 ec       	ldi	r24, 0xC8	; 200
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	9b 8f       	std	Y+27, r25	; 0x1b
     558:	8a 8f       	std	Y+26, r24	; 0x1a
     55a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     55c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     562:	9b 8f       	std	Y+27, r25	; 0x1b
     564:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     566:	88 8d       	ldd	r24, Y+24	; 0x18
     568:	99 8d       	ldd	r25, Y+25	; 0x19
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	99 8f       	std	Y+25, r25	; 0x19
     56e:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     570:	88 8d       	ldd	r24, Y+24	; 0x18
     572:	99 8d       	ldd	r25, Y+25	; 0x19
     574:	89 2b       	or	r24, r25
     576:	69 f7       	brne	.-38     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     578:	14 c0       	rjmp	.+40     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     57a:	6c 89       	ldd	r22, Y+20	; 0x14
     57c:	7d 89       	ldd	r23, Y+21	; 0x15
     57e:	8e 89       	ldd	r24, Y+22	; 0x16
     580:	9f 89       	ldd	r25, Y+23	; 0x17
     582:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	99 8f       	std	Y+25, r25	; 0x19
     58c:	88 8f       	std	Y+24, r24	; 0x18
     58e:	88 8d       	ldd	r24, Y+24	; 0x18
     590:	99 8d       	ldd	r25, Y+25	; 0x19
     592:	9d 8f       	std	Y+29, r25	; 0x1d
     594:	8c 8f       	std	Y+28, r24	; 0x1c
     596:	8c 8d       	ldd	r24, Y+28	; 0x1c
     598:	9d 8d       	ldd	r25, Y+29	; 0x1d
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     59e:	9d 8f       	std	Y+29, r25	; 0x1d
     5a0:	8c 8f       	std	Y+28, r24	; 0x1c
	 _delay_ms(10);
	  writePin(PB4,HIGH);
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	8c e0       	ldi	r24, 0x0C	; 12
     5a6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
	 return data;
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
 }
     5ac:	6f 96       	adiw	r28, 0x1f	; 31
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <WRITE_EN>:
 
 
 void WRITE_EN(void)
 {
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	2e 97       	sbiw	r28, 0x0e	; 14
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
	 writePin(PB4,LOW);
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	8c e0       	ldi	r24, 0x0C	; 12
     5d6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
	 SPI_Transceive(0x06);
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
	 writePin(PB4,HIGH);
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	8c e0       	ldi	r24, 0x0C	; 12
     5e4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a0 e0       	ldi	r26, 0x00	; 0
     5ee:	b0 e4       	ldi	r27, 0x40	; 64
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	9a 83       	std	Y+2, r25	; 0x02
     5f4:	ab 83       	std	Y+3, r26	; 0x03
     5f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	4a ef       	ldi	r20, 0xFA	; 250
     5fe:	54 e4       	ldi	r21, 0x44	; 68
     600:	69 81       	ldd	r22, Y+1	; 0x01
     602:	7a 81       	ldd	r23, Y+2	; 0x02
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	9c 81       	ldd	r25, Y+4	; 0x04
     608:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	8d 83       	std	Y+5, r24	; 0x05
     612:	9e 83       	std	Y+6, r25	; 0x06
     614:	af 83       	std	Y+7, r26	; 0x07
     616:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e8       	ldi	r20, 0x80	; 128
     61e:	5f e3       	ldi	r21, 0x3F	; 63
     620:	6d 81       	ldd	r22, Y+5	; 0x05
     622:	7e 81       	ldd	r23, Y+6	; 0x06
     624:	8f 81       	ldd	r24, Y+7	; 0x07
     626:	98 85       	ldd	r25, Y+8	; 0x08
     628:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     62c:	88 23       	and	r24, r24
     62e:	2c f4       	brge	.+10     	; 0x63a <WRITE_EN+0x7c>
		__ticks = 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	9a 87       	std	Y+10, r25	; 0x0a
     636:	89 87       	std	Y+9, r24	; 0x09
     638:	3f c0       	rjmp	.+126    	; 0x6b8 <WRITE_EN+0xfa>
	else if (__tmp > 65535)
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	3f ef       	ldi	r19, 0xFF	; 255
     63e:	4f e7       	ldi	r20, 0x7F	; 127
     640:	57 e4       	ldi	r21, 0x47	; 71
     642:	6d 81       	ldd	r22, Y+5	; 0x05
     644:	7e 81       	ldd	r23, Y+6	; 0x06
     646:	8f 81       	ldd	r24, Y+7	; 0x07
     648:	98 85       	ldd	r25, Y+8	; 0x08
     64a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     64e:	18 16       	cp	r1, r24
     650:	4c f5       	brge	.+82     	; 0x6a4 <WRITE_EN+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e2       	ldi	r20, 0x20	; 32
     658:	51 e4       	ldi	r21, 0x41	; 65
     65a:	69 81       	ldd	r22, Y+1	; 0x01
     65c:	7a 81       	ldd	r23, Y+2	; 0x02
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	9c 81       	ldd	r25, Y+4	; 0x04
     662:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     666:	dc 01       	movw	r26, r24
     668:	cb 01       	movw	r24, r22
     66a:	bc 01       	movw	r22, r24
     66c:	cd 01       	movw	r24, r26
     66e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	9a 87       	std	Y+10, r25	; 0x0a
     678:	89 87       	std	Y+9, r24	; 0x09
     67a:	0f c0       	rjmp	.+30     	; 0x69a <WRITE_EN+0xdc>
     67c:	88 ec       	ldi	r24, 0xC8	; 200
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	9c 87       	std	Y+12, r25	; 0x0c
     682:	8b 87       	std	Y+11, r24	; 0x0b
     684:	8b 85       	ldd	r24, Y+11	; 0x0b
     686:	9c 85       	ldd	r25, Y+12	; 0x0c
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <WRITE_EN+0xca>
     68c:	9c 87       	std	Y+12, r25	; 0x0c
     68e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     690:	89 85       	ldd	r24, Y+9	; 0x09
     692:	9a 85       	ldd	r25, Y+10	; 0x0a
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	9a 87       	std	Y+10, r25	; 0x0a
     698:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     69a:	89 85       	ldd	r24, Y+9	; 0x09
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	89 2b       	or	r24, r25
     6a0:	69 f7       	brne	.-38     	; 0x67c <WRITE_EN+0xbe>
     6a2:	14 c0       	rjmp	.+40     	; 0x6cc <WRITE_EN+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6a4:	6d 81       	ldd	r22, Y+5	; 0x05
     6a6:	7e 81       	ldd	r23, Y+6	; 0x06
     6a8:	8f 81       	ldd	r24, Y+7	; 0x07
     6aa:	98 85       	ldd	r25, Y+8	; 0x08
     6ac:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     6b0:	dc 01       	movw	r26, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	9a 87       	std	Y+10, r25	; 0x0a
     6b6:	89 87       	std	Y+9, r24	; 0x09
     6b8:	89 85       	ldd	r24, Y+9	; 0x09
     6ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     6bc:	9e 87       	std	Y+14, r25	; 0x0e
     6be:	8d 87       	std	Y+13, r24	; 0x0d
     6c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     6c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <WRITE_EN+0x106>
     6c8:	9e 87       	std	Y+14, r25	; 0x0e
     6ca:	8d 87       	std	Y+13, r24	; 0x0d
	 _delay_ms(2);
 }
     6cc:	2e 96       	adiw	r28, 0x0e	; 14
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <WRITE_DI>:
 
 
  void WRITE_DI(void)
  {
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	2e 97       	sbiw	r28, 0x0e	; 14
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
	  writePin(PB4,LOW);
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	8c e0       	ldi	r24, 0x0C	; 12
     6f6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
	  SPI_Transceive(0x04);
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
	  writePin(PB4,HIGH);
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	8c e0       	ldi	r24, 0x0C	; 12
     704:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e4       	ldi	r27, 0x40	; 64
     710:	89 83       	std	Y+1, r24	; 0x01
     712:	9a 83       	std	Y+2, r25	; 0x02
     714:	ab 83       	std	Y+3, r26	; 0x03
     716:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	4a ef       	ldi	r20, 0xFA	; 250
     71e:	54 e4       	ldi	r21, 0x44	; 68
     720:	69 81       	ldd	r22, Y+1	; 0x01
     722:	7a 81       	ldd	r23, Y+2	; 0x02
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     72c:	dc 01       	movw	r26, r24
     72e:	cb 01       	movw	r24, r22
     730:	8d 83       	std	Y+5, r24	; 0x05
     732:	9e 83       	std	Y+6, r25	; 0x06
     734:	af 83       	std	Y+7, r26	; 0x07
     736:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	6d 81       	ldd	r22, Y+5	; 0x05
     742:	7e 81       	ldd	r23, Y+6	; 0x06
     744:	8f 81       	ldd	r24, Y+7	; 0x07
     746:	98 85       	ldd	r25, Y+8	; 0x08
     748:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     74c:	88 23       	and	r24, r24
     74e:	2c f4       	brge	.+10     	; 0x75a <WRITE_DI+0x7c>
		__ticks = 1;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	9a 87       	std	Y+10, r25	; 0x0a
     756:	89 87       	std	Y+9, r24	; 0x09
     758:	3f c0       	rjmp	.+126    	; 0x7d8 <WRITE_DI+0xfa>
	else if (__tmp > 65535)
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	6d 81       	ldd	r22, Y+5	; 0x05
     764:	7e 81       	ldd	r23, Y+6	; 0x06
     766:	8f 81       	ldd	r24, Y+7	; 0x07
     768:	98 85       	ldd	r25, Y+8	; 0x08
     76a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     76e:	18 16       	cp	r1, r24
     770:	4c f5       	brge	.+82     	; 0x7c4 <WRITE_DI+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	69 81       	ldd	r22, Y+1	; 0x01
     77c:	7a 81       	ldd	r23, Y+2	; 0x02
     77e:	8b 81       	ldd	r24, Y+3	; 0x03
     780:	9c 81       	ldd	r25, Y+4	; 0x04
     782:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     786:	dc 01       	movw	r26, r24
     788:	cb 01       	movw	r24, r22
     78a:	bc 01       	movw	r22, r24
     78c:	cd 01       	movw	r24, r26
     78e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     792:	dc 01       	movw	r26, r24
     794:	cb 01       	movw	r24, r22
     796:	9a 87       	std	Y+10, r25	; 0x0a
     798:	89 87       	std	Y+9, r24	; 0x09
     79a:	0f c0       	rjmp	.+30     	; 0x7ba <WRITE_DI+0xdc>
     79c:	88 ec       	ldi	r24, 0xC8	; 200
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	9c 87       	std	Y+12, r25	; 0x0c
     7a2:	8b 87       	std	Y+11, r24	; 0x0b
     7a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     7a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <WRITE_DI+0xca>
     7ac:	9c 87       	std	Y+12, r25	; 0x0c
     7ae:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b0:	89 85       	ldd	r24, Y+9	; 0x09
     7b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	9a 87       	std	Y+10, r25	; 0x0a
     7b8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7be:	89 2b       	or	r24, r25
     7c0:	69 f7       	brne	.-38     	; 0x79c <WRITE_DI+0xbe>
     7c2:	14 c0       	rjmp	.+40     	; 0x7ec <WRITE_DI+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7c4:	6d 81       	ldd	r22, Y+5	; 0x05
     7c6:	7e 81       	ldd	r23, Y+6	; 0x06
     7c8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ca:	98 85       	ldd	r25, Y+8	; 0x08
     7cc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     7d0:	dc 01       	movw	r26, r24
     7d2:	cb 01       	movw	r24, r22
     7d4:	9a 87       	std	Y+10, r25	; 0x0a
     7d6:	89 87       	std	Y+9, r24	; 0x09
     7d8:	89 85       	ldd	r24, Y+9	; 0x09
     7da:	9a 85       	ldd	r25, Y+10	; 0x0a
     7dc:	9e 87       	std	Y+14, r25	; 0x0e
     7de:	8d 87       	std	Y+13, r24	; 0x0d
     7e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <WRITE_DI+0x106>
     7e8:	9e 87       	std	Y+14, r25	; 0x0e
     7ea:	8d 87       	std	Y+13, r24	; 0x0d
	  _delay_ms(2);
  }
     7ec:	2e 96       	adiw	r28, 0x0e	; 14
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <writePageEEPROM>:
  
  
  
 void writePageEEPROM(u16 location,u8* str)
 {
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	63 97       	sbiw	r28, 0x13	; 19
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	99 8b       	std	Y+17, r25	; 0x11
     814:	88 8b       	std	Y+16, r24	; 0x10
     816:	7b 8b       	std	Y+19, r23	; 0x13
     818:	6a 8b       	std	Y+18, r22	; 0x12
	 u8 index=0;
     81a:	19 82       	std	Y+1, r1	; 0x01
	  WRITE_EN();					//write enable
     81c:	0e 94 df 02 	call	0x5be	; 0x5be <WRITE_EN>
	  writePin(PB4,LOW);			//CS enable
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	8c e0       	ldi	r24, 0x0C	; 12
     824:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
	  SPI_Transceive(((location>>5)& ~(0x7))|EROM_COM_WRITE);
     828:	88 89       	ldd	r24, Y+16	; 0x10
     82a:	99 89       	ldd	r25, Y+17	; 0x11
     82c:	96 95       	lsr	r25
     82e:	87 95       	ror	r24
     830:	92 95       	swap	r25
     832:	82 95       	swap	r24
     834:	8f 70       	andi	r24, 0x0F	; 15
     836:	89 27       	eor	r24, r25
     838:	9f 70       	andi	r25, 0x0F	; 15
     83a:	89 27       	eor	r24, r25
     83c:	88 7f       	andi	r24, 0xF8	; 248
     83e:	82 60       	ori	r24, 0x02	; 2
     840:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
	  SPI_Transceive((u8) location);
     844:	88 89       	ldd	r24, Y+16	; 0x10
     846:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
	  while(str[index]!='\0'&&(index<16))
     84a:	17 c0       	rjmp	.+46     	; 0x87a <__stack+0x1b>
	  {
		  SPI_Transceive(str[index]);
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	2a 89       	ldd	r18, Y+18	; 0x12
     854:	3b 89       	ldd	r19, Y+19	; 0x13
     856:	82 0f       	add	r24, r18
     858:	93 1f       	adc	r25, r19
     85a:	fc 01       	movw	r30, r24
     85c:	80 81       	ld	r24, Z
     85e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SPI_Transceive>
		  index++;
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	8f 5f       	subi	r24, 0xFF	; 255
     866:	89 83       	std	Y+1, r24	; 0x01
		  autoAddress++;
     868:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
     86c:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x1>
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <__data_end+0x1>
     876:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_end>
	 u8 index=0;
	  WRITE_EN();					//write enable
	  writePin(PB4,LOW);			//CS enable
	  SPI_Transceive(((location>>5)& ~(0x7))|EROM_COM_WRITE);
	  SPI_Transceive((u8) location);
	  while(str[index]!='\0'&&(index<16))
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	88 2f       	mov	r24, r24
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	2a 89       	ldd	r18, Y+18	; 0x12
     882:	3b 89       	ldd	r19, Y+19	; 0x13
     884:	82 0f       	add	r24, r18
     886:	93 1f       	adc	r25, r19
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	88 23       	and	r24, r24
     88e:	19 f0       	breq	.+6      	; 0x896 <__stack+0x37>
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	80 31       	cpi	r24, 0x10	; 16
     894:	d8 f2       	brcs	.-74     	; 0x84c <writePageEEPROM+0x4e>
		  SPI_Transceive(str[index]);
		  index++;
		  autoAddress++;
		  
	  }
	  writePin(PB4,HIGH);  
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	8c e0       	ldi	r24, 0x0C	; 12
     89a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	a0 e2       	ldi	r26, 0x20	; 32
     8a4:	b1 e4       	ldi	r27, 0x41	; 65
     8a6:	8a 83       	std	Y+2, r24	; 0x02
     8a8:	9b 83       	std	Y+3, r25	; 0x03
     8aa:	ac 83       	std	Y+4, r26	; 0x04
     8ac:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	4a ef       	ldi	r20, 0xFA	; 250
     8b4:	54 e4       	ldi	r21, 0x44	; 68
     8b6:	6a 81       	ldd	r22, Y+2	; 0x02
     8b8:	7b 81       	ldd	r23, Y+3	; 0x03
     8ba:	8c 81       	ldd	r24, Y+4	; 0x04
     8bc:	9d 81       	ldd	r25, Y+5	; 0x05
     8be:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	8e 83       	std	Y+6, r24	; 0x06
     8c8:	9f 83       	std	Y+7, r25	; 0x07
     8ca:	a8 87       	std	Y+8, r26	; 0x08
     8cc:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e8       	ldi	r20, 0x80	; 128
     8d4:	5f e3       	ldi	r21, 0x3F	; 63
     8d6:	6e 81       	ldd	r22, Y+6	; 0x06
     8d8:	7f 81       	ldd	r23, Y+7	; 0x07
     8da:	88 85       	ldd	r24, Y+8	; 0x08
     8dc:	99 85       	ldd	r25, Y+9	; 0x09
     8de:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     8e2:	88 23       	and	r24, r24
     8e4:	2c f4       	brge	.+10     	; 0x8f0 <__stack+0x91>
		__ticks = 1;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	9b 87       	std	Y+11, r25	; 0x0b
     8ec:	8a 87       	std	Y+10, r24	; 0x0a
     8ee:	3f c0       	rjmp	.+126    	; 0x96e <__stack+0x10f>
	else if (__tmp > 65535)
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	3f ef       	ldi	r19, 0xFF	; 255
     8f4:	4f e7       	ldi	r20, 0x7F	; 127
     8f6:	57 e4       	ldi	r21, 0x47	; 71
     8f8:	6e 81       	ldd	r22, Y+6	; 0x06
     8fa:	7f 81       	ldd	r23, Y+7	; 0x07
     8fc:	88 85       	ldd	r24, Y+8	; 0x08
     8fe:	99 85       	ldd	r25, Y+9	; 0x09
     900:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     904:	18 16       	cp	r1, r24
     906:	4c f5       	brge	.+82     	; 0x95a <__stack+0xfb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e2       	ldi	r20, 0x20	; 32
     90e:	51 e4       	ldi	r21, 0x41	; 65
     910:	6a 81       	ldd	r22, Y+2	; 0x02
     912:	7b 81       	ldd	r23, Y+3	; 0x03
     914:	8c 81       	ldd	r24, Y+4	; 0x04
     916:	9d 81       	ldd	r25, Y+5	; 0x05
     918:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	bc 01       	movw	r22, r24
     922:	cd 01       	movw	r24, r26
     924:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	9b 87       	std	Y+11, r25	; 0x0b
     92e:	8a 87       	std	Y+10, r24	; 0x0a
     930:	0f c0       	rjmp	.+30     	; 0x950 <__stack+0xf1>
     932:	88 ec       	ldi	r24, 0xC8	; 200
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	9d 87       	std	Y+13, r25	; 0x0d
     938:	8c 87       	std	Y+12, r24	; 0x0c
     93a:	8c 85       	ldd	r24, Y+12	; 0x0c
     93c:	9d 85       	ldd	r25, Y+13	; 0x0d
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <__stack+0xdf>
     942:	9d 87       	std	Y+13, r25	; 0x0d
     944:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     946:	8a 85       	ldd	r24, Y+10	; 0x0a
     948:	9b 85       	ldd	r25, Y+11	; 0x0b
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	9b 87       	std	Y+11, r25	; 0x0b
     94e:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     950:	8a 85       	ldd	r24, Y+10	; 0x0a
     952:	9b 85       	ldd	r25, Y+11	; 0x0b
     954:	89 2b       	or	r24, r25
     956:	69 f7       	brne	.-38     	; 0x932 <__stack+0xd3>
     958:	14 c0       	rjmp	.+40     	; 0x982 <__stack+0x123>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     95a:	6e 81       	ldd	r22, Y+6	; 0x06
     95c:	7f 81       	ldd	r23, Y+7	; 0x07
     95e:	88 85       	ldd	r24, Y+8	; 0x08
     960:	99 85       	ldd	r25, Y+9	; 0x09
     962:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	9b 87       	std	Y+11, r25	; 0x0b
     96c:	8a 87       	std	Y+10, r24	; 0x0a
     96e:	8a 85       	ldd	r24, Y+10	; 0x0a
     970:	9b 85       	ldd	r25, Y+11	; 0x0b
     972:	9f 87       	std	Y+15, r25	; 0x0f
     974:	8e 87       	std	Y+14, r24	; 0x0e
     976:	8e 85       	ldd	r24, Y+14	; 0x0e
     978:	9f 85       	ldd	r25, Y+15	; 0x0f
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <__stack+0x11b>
     97e:	9f 87       	std	Y+15, r25	; 0x0f
     980:	8e 87       	std	Y+14, r24	; 0x0e
	  _delay_ms(10);
	  WRITE_DI();//write disable
     982:	0e 94 6f 03 	call	0x6de	; 0x6de <WRITE_DI>
 }
     986:	63 96       	adiw	r28, 0x13	; 19
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <ReadEEPROMSTR>:
 
void ReadEEPROMSTR(u16 location,u8 CharNum,u8 * ReadStr)
{
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <ReadEEPROMSTR+0xa>
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <ReadEEPROMSTR+0xc>
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <ReadEEPROMSTR+0xe>
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	9b 83       	std	Y+3, r25	; 0x03
     9ac:	8a 83       	std	Y+2, r24	; 0x02
     9ae:	6c 83       	std	Y+4, r22	; 0x04
     9b0:	5e 83       	std	Y+6, r21	; 0x06
     9b2:	4d 83       	std	Y+5, r20	; 0x05
	u8 Counter = 0;
     9b4:	19 82       	std	Y+1, r1	; 0x01
	for(;Counter<CharNum;Counter++)
     9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <ReadEEPROMSTR+0x4c>
	{
		ReadStr[Counter]=readEEPROM((location+Counter));
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	88 2f       	mov	r24, r24
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	2d 81       	ldd	r18, Y+5	; 0x05
     9c0:	3e 81       	ldd	r19, Y+6	; 0x06
     9c2:	89 01       	movw	r16, r18
     9c4:	08 0f       	add	r16, r24
     9c6:	19 1f       	adc	r17, r25
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	28 2f       	mov	r18, r24
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	9b 81       	ldd	r25, Y+3	; 0x03
     9d2:	82 0f       	add	r24, r18
     9d4:	93 1f       	adc	r25, r19
     9d6:	0e 94 c8 01 	call	0x390	; 0x390 <readEEPROM>
     9da:	f8 01       	movw	r30, r16
     9dc:	80 83       	st	Z, r24
 }
 
void ReadEEPROMSTR(u16 location,u8 CharNum,u8 * ReadStr)
{
	u8 Counter = 0;
	for(;Counter<CharNum;Counter++)
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	99 81       	ldd	r25, Y+1	; 0x01
     9e6:	8c 81       	ldd	r24, Y+4	; 0x04
     9e8:	98 17       	cp	r25, r24
     9ea:	30 f3       	brcs	.-52     	; 0x9b8 <ReadEEPROMSTR+0x20>
	{
		ReadStr[Counter]=readEEPROM((location+Counter));
	}
}
     9ec:	26 96       	adiw	r28, 0x06	; 6
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	08 95       	ret

00000a02 <CLR_EEPROM>:

void CLR_EEPROM(void)
{
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	00 d0       	rcall	.+0      	; 0xa08 <CLR_EEPROM+0x6>
     a08:	00 d0       	rcall	.+0      	; 0xa0a <CLR_EEPROM+0x8>
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
	u16 counter=0;
     a0e:	1a 82       	std	Y+2, r1	; 0x02
     a10:	19 82       	std	Y+1, r1	; 0x01
	while(readEEPROM(counter)!='\0')
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <CLR_EEPROM+0x1c>
	counter++;
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	9a 81       	ldd	r25, Y+2	; 0x02
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	89 83       	std	Y+1, r24	; 0x01
}

void CLR_EEPROM(void)
{
	u16 counter=0;
	while(readEEPROM(counter)!='\0')
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	0e 94 c8 01 	call	0x390	; 0x390 <readEEPROM>
     a26:	88 23       	and	r24, r24
     a28:	a9 f7       	brne	.-22     	; 0xa14 <CLR_EEPROM+0x12>
	counter++;
	u16 x;
	for(x=0;x<counter;x++)
     a2a:	1c 82       	std	Y+4, r1	; 0x04
     a2c:	1b 82       	std	Y+3, r1	; 0x03
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <CLR_EEPROM+0x42>
	{
		writeEEPROM(x,'\0');
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	9c 81       	ldd	r25, Y+4	; 0x04
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	0e 94 20 01 	call	0x240	; 0x240 <writeEEPROM>
{
	u16 counter=0;
	while(readEEPROM(counter)!='\0')
	counter++;
	u16 x;
	for(x=0;x<counter;x++)
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	8b 83       	std	Y+3, r24	; 0x03
     a44:	2b 81       	ldd	r18, Y+3	; 0x03
     a46:	3c 81       	ldd	r19, Y+4	; 0x04
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	28 17       	cp	r18, r24
     a4e:	39 07       	cpc	r19, r25
     a50:	78 f3       	brcs	.-34     	; 0xa30 <CLR_EEPROM+0x2e>
	{
		writeEEPROM(x,'\0');
	}
}
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <write_EEPROM_auto>:

void write_EEPROM_auto(u8* str){
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <write_EEPROM_auto+0x6>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <write_EEPROM_auto+0x8>
     a68:	1f 92       	push	r1
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	9d 83       	std	Y+5, r25	; 0x05
     a70:	8c 83       	std	Y+4, r24	; 0x04
	u8 i=0,size=0,calls=0;
     a72:	19 82       	std	Y+1, r1	; 0x01
     a74:	1a 82       	std	Y+2, r1	; 0x02
     a76:	1b 82       	std	Y+3, r1	; 0x03
	while(str[i]!='\0')
     a78:	06 c0       	rjmp	.+12     	; 0xa86 <write_EEPROM_auto+0x26>
	{
		size++;
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	8a 83       	std	Y+2, r24	; 0x02
		i++;
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	8f 5f       	subi	r24, 0xFF	; 255
     a84:	89 83       	std	Y+1, r24	; 0x01
	}
}

void write_EEPROM_auto(u8* str){
	u8 i=0,size=0,calls=0;
	while(str[i]!='\0')
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	88 2f       	mov	r24, r24
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	2c 81       	ldd	r18, Y+4	; 0x04
     a8e:	3d 81       	ldd	r19, Y+5	; 0x05
     a90:	82 0f       	add	r24, r18
     a92:	93 1f       	adc	r25, r19
     a94:	fc 01       	movw	r30, r24
     a96:	80 81       	ld	r24, Z
     a98:	88 23       	and	r24, r24
     a9a:	79 f7       	brne	.-34     	; 0xa7a <write_EEPROM_auto+0x1a>
	{
		size++;
		i++;
	}
	calls = (size/16)+1;
     a9c:	8a 81       	ldd	r24, Y+2	; 0x02
     a9e:	82 95       	swap	r24
     aa0:	8f 70       	andi	r24, 0x0F	; 15
     aa2:	8f 5f       	subi	r24, 0xFF	; 255
     aa4:	8b 83       	std	Y+3, r24	; 0x03
	for(i=0 ; i < calls ; i++)
     aa6:	19 82       	std	Y+1, r1	; 0x01
     aa8:	18 c0       	rjmp	.+48     	; 0xada <write_EEPROM_auto+0x7a>
	{
		writePageEEPROM(autoAddress,&str[i*16]);
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	82 95       	swap	r24
     ab2:	92 95       	swap	r25
     ab4:	90 7f       	andi	r25, 0xF0	; 240
     ab6:	98 27       	eor	r25, r24
     ab8:	80 7f       	andi	r24, 0xF0	; 240
     aba:	98 27       	eor	r25, r24
     abc:	9c 01       	movw	r18, r24
     abe:	8c 81       	ldd	r24, Y+4	; 0x04
     ac0:	9d 81       	ldd	r25, Y+5	; 0x05
     ac2:	28 0f       	add	r18, r24
     ac4:	39 1f       	adc	r19, r25
     ac6:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
     aca:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x1>
     ace:	b9 01       	movw	r22, r18
     ad0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <writePageEEPROM>
	{
		size++;
		i++;
	}
	calls = (size/16)+1;
	for(i=0 ; i < calls ; i++)
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	8f 5f       	subi	r24, 0xFF	; 255
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	99 81       	ldd	r25, Y+1	; 0x01
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	98 17       	cp	r25, r24
     ae0:	20 f3       	brcs	.-56     	; 0xaaa <write_EEPROM_auto+0x4a>
	{
		writePageEEPROM(autoAddress,&str[i*16]);
	}
	

     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <LCD_init>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	2e 97       	sbiw	r28, 0x0e	; 14
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	41 e0       	ldi	r20, 0x01	; 1
     b08:	60 ef       	ldi	r22, 0xF0	; 240
     b0a:	8a e3       	ldi	r24, 0x3A	; 58
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 13 0c 	call	0x1826	; 0x1826 <pinsDirection>
     b12:	41 e0       	ldi	r20, 0x01	; 1
     b14:	6e e0       	ldi	r22, 0x0E	; 14
     b16:	87 e3       	ldi	r24, 0x37	; 55
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 13 0c 	call	0x1826	; 0x1826 <pinsDirection>
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	8a e0       	ldi	r24, 0x0A	; 10
     b22:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e2       	ldi	r26, 0x20	; 32
     b2c:	b2 e4       	ldi	r27, 0x42	; 66
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	9a 83       	std	Y+2, r25	; 0x02
     b32:	ab 83       	std	Y+3, r26	; 0x03
     b34:	bc 83       	std	Y+4, r27	; 0x04
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	4a ef       	ldi	r20, 0xFA	; 250
     b3c:	54 e4       	ldi	r21, 0x44	; 68
     b3e:	69 81       	ldd	r22, Y+1	; 0x01
     b40:	7a 81       	ldd	r23, Y+2	; 0x02
     b42:	8b 81       	ldd	r24, Y+3	; 0x03
     b44:	9c 81       	ldd	r25, Y+4	; 0x04
     b46:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	8d 83       	std	Y+5, r24	; 0x05
     b50:	9e 83       	std	Y+6, r25	; 0x06
     b52:	af 83       	std	Y+7, r26	; 0x07
     b54:	b8 87       	std	Y+8, r27	; 0x08
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	40 e8       	ldi	r20, 0x80	; 128
     b5c:	5f e3       	ldi	r21, 0x3F	; 63
     b5e:	6d 81       	ldd	r22, Y+5	; 0x05
     b60:	7e 81       	ldd	r23, Y+6	; 0x06
     b62:	8f 81       	ldd	r24, Y+7	; 0x07
     b64:	98 85       	ldd	r25, Y+8	; 0x08
     b66:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     b6a:	88 23       	and	r24, r24
     b6c:	2c f4       	brge	.+10     	; 0xb78 <LCD_init+0x86>
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	9a 87       	std	Y+10, r25	; 0x0a
     b74:	89 87       	std	Y+9, r24	; 0x09
     b76:	3f c0       	rjmp	.+126    	; 0xbf6 <LCD_init+0x104>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	3f ef       	ldi	r19, 0xFF	; 255
     b7c:	4f e7       	ldi	r20, 0x7F	; 127
     b7e:	57 e4       	ldi	r21, 0x47	; 71
     b80:	6d 81       	ldd	r22, Y+5	; 0x05
     b82:	7e 81       	ldd	r23, Y+6	; 0x06
     b84:	8f 81       	ldd	r24, Y+7	; 0x07
     b86:	98 85       	ldd	r25, Y+8	; 0x08
     b88:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     b8c:	18 16       	cp	r1, r24
     b8e:	4c f5       	brge	.+82     	; 0xbe2 <LCD_init+0xf0>
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e2       	ldi	r20, 0x20	; 32
     b96:	51 e4       	ldi	r21, 0x41	; 65
     b98:	69 81       	ldd	r22, Y+1	; 0x01
     b9a:	7a 81       	ldd	r23, Y+2	; 0x02
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	bc 01       	movw	r22, r24
     baa:	cd 01       	movw	r24, r26
     bac:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	9a 87       	std	Y+10, r25	; 0x0a
     bb6:	89 87       	std	Y+9, r24	; 0x09
     bb8:	0f c0       	rjmp	.+30     	; 0xbd8 <LCD_init+0xe6>
     bba:	88 ec       	ldi	r24, 0xC8	; 200
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9c 87       	std	Y+12, r25	; 0x0c
     bc0:	8b 87       	std	Y+11, r24	; 0x0b
     bc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     bc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <LCD_init+0xd4>
     bca:	9c 87       	std	Y+12, r25	; 0x0c
     bcc:	8b 87       	std	Y+11, r24	; 0x0b
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	9a 87       	std	Y+10, r25	; 0x0a
     bd6:	89 87       	std	Y+9, r24	; 0x09
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	89 2b       	or	r24, r25
     bde:	69 f7       	brne	.-38     	; 0xbba <LCD_init+0xc8>
     be0:	14 c0       	rjmp	.+40     	; 0xc0a <LCD_init+0x118>
     be2:	6d 81       	ldd	r22, Y+5	; 0x05
     be4:	7e 81       	ldd	r23, Y+6	; 0x06
     be6:	8f 81       	ldd	r24, Y+7	; 0x07
     be8:	98 85       	ldd	r25, Y+8	; 0x08
     bea:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	9a 87       	std	Y+10, r25	; 0x0a
     bf4:	89 87       	std	Y+9, r24	; 0x09
     bf6:	89 85       	ldd	r24, Y+9	; 0x09
     bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfa:	9e 87       	std	Y+14, r25	; 0x0e
     bfc:	8d 87       	std	Y+13, r24	; 0x0d
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <LCD_init+0x110>
     c06:	9e 87       	std	Y+14, r25	; 0x0e
     c08:	8d 87       	std	Y+13, r24	; 0x0d
     c0a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_ret_Home>
     c0e:	86 e0       	ldi	r24, 0x06	; 6
     c10:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_send_cmd>
     c14:	8f e0       	ldi	r24, 0x0F	; 15
     c16:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_send_cmd>
     c1a:	80 e1       	ldi	r24, 0x10	; 16
     c1c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_send_cmd>
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_send_cmd>
     c26:	0e 94 1e 06 	call	0xc3c	; 0xc3c <LCD_CLEAR>
     c2a:	2e 96       	adiw	r28, 0x0e	; 14
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <LCD_CLEAR>:
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	2e 97       	sbiw	r28, 0x0e	; 14
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_send_cmd>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e4       	ldi	r27, 0x40	; 64
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	ab 83       	std	Y+3, r26	; 0x03
     c64:	bc 83       	std	Y+4, r27	; 0x04
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	4a ef       	ldi	r20, 0xFA	; 250
     c6c:	54 e4       	ldi	r21, 0x44	; 68
     c6e:	69 81       	ldd	r22, Y+1	; 0x01
     c70:	7a 81       	ldd	r23, Y+2	; 0x02
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	af 83       	std	Y+7, r26	; 0x07
     c84:	b8 87       	std	Y+8, r27	; 0x08
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	5f e3       	ldi	r21, 0x3F	; 63
     c8e:	6d 81       	ldd	r22, Y+5	; 0x05
     c90:	7e 81       	ldd	r23, Y+6	; 0x06
     c92:	8f 81       	ldd	r24, Y+7	; 0x07
     c94:	98 85       	ldd	r25, Y+8	; 0x08
     c96:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     c9a:	88 23       	and	r24, r24
     c9c:	2c f4       	brge	.+10     	; 0xca8 <LCD_CLEAR+0x6c>
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9a 87       	std	Y+10, r25	; 0x0a
     ca4:	89 87       	std	Y+9, r24	; 0x09
     ca6:	3f c0       	rjmp	.+126    	; 0xd26 <LCD_CLEAR+0xea>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	3f ef       	ldi	r19, 0xFF	; 255
     cac:	4f e7       	ldi	r20, 0x7F	; 127
     cae:	57 e4       	ldi	r21, 0x47	; 71
     cb0:	6d 81       	ldd	r22, Y+5	; 0x05
     cb2:	7e 81       	ldd	r23, Y+6	; 0x06
     cb4:	8f 81       	ldd	r24, Y+7	; 0x07
     cb6:	98 85       	ldd	r25, Y+8	; 0x08
     cb8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	4c f5       	brge	.+82     	; 0xd12 <LCD_CLEAR+0xd6>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e2       	ldi	r20, 0x20	; 32
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	69 81       	ldd	r22, Y+1	; 0x01
     cca:	7a 81       	ldd	r23, Y+2	; 0x02
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	9a 87       	std	Y+10, r25	; 0x0a
     ce6:	89 87       	std	Y+9, r24	; 0x09
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <LCD_CLEAR+0xcc>
     cea:	88 ec       	ldi	r24, 0xC8	; 200
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9c 87       	std	Y+12, r25	; 0x0c
     cf0:	8b 87       	std	Y+11, r24	; 0x0b
     cf2:	8b 85       	ldd	r24, Y+11	; 0x0b
     cf4:	9c 85       	ldd	r25, Y+12	; 0x0c
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <LCD_CLEAR+0xba>
     cfa:	9c 87       	std	Y+12, r25	; 0x0c
     cfc:	8b 87       	std	Y+11, r24	; 0x0b
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	9a 87       	std	Y+10, r25	; 0x0a
     d06:	89 87       	std	Y+9, r24	; 0x09
     d08:	89 85       	ldd	r24, Y+9	; 0x09
     d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0c:	89 2b       	or	r24, r25
     d0e:	69 f7       	brne	.-38     	; 0xcea <LCD_CLEAR+0xae>
     d10:	14 c0       	rjmp	.+40     	; 0xd3a <LCD_CLEAR+0xfe>
     d12:	6d 81       	ldd	r22, Y+5	; 0x05
     d14:	7e 81       	ldd	r23, Y+6	; 0x06
     d16:	8f 81       	ldd	r24, Y+7	; 0x07
     d18:	98 85       	ldd	r25, Y+8	; 0x08
     d1a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9a 87       	std	Y+10, r25	; 0x0a
     d24:	89 87       	std	Y+9, r24	; 0x09
     d26:	89 85       	ldd	r24, Y+9	; 0x09
     d28:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2a:	9e 87       	std	Y+14, r25	; 0x0e
     d2c:	8d 87       	std	Y+13, r24	; 0x0d
     d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d30:	9e 85       	ldd	r25, Y+14	; 0x0e
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <LCD_CLEAR+0xf6>
     d36:	9e 87       	std	Y+14, r25	; 0x0e
     d38:	8d 87       	std	Y+13, r24	; 0x0d
     d3a:	2e 96       	adiw	r28, 0x0e	; 14
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <LCD_ret_Home>:
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	2e 97       	sbiw	r28, 0x0e	; 14
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_send_cmd>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	a0 e0       	ldi	r26, 0x00	; 0
     d6c:	b0 e4       	ldi	r27, 0x40	; 64
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	ab 83       	std	Y+3, r26	; 0x03
     d74:	bc 83       	std	Y+4, r27	; 0x04
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	4a ef       	ldi	r20, 0xFA	; 250
     d7c:	54 e4       	ldi	r21, 0x44	; 68
     d7e:	69 81       	ldd	r22, Y+1	; 0x01
     d80:	7a 81       	ldd	r23, Y+2	; 0x02
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	8d 83       	std	Y+5, r24	; 0x05
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	af 83       	std	Y+7, r26	; 0x07
     d94:	b8 87       	std	Y+8, r27	; 0x08
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e8       	ldi	r20, 0x80	; 128
     d9c:	5f e3       	ldi	r21, 0x3F	; 63
     d9e:	6d 81       	ldd	r22, Y+5	; 0x05
     da0:	7e 81       	ldd	r23, Y+6	; 0x06
     da2:	8f 81       	ldd	r24, Y+7	; 0x07
     da4:	98 85       	ldd	r25, Y+8	; 0x08
     da6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     daa:	88 23       	and	r24, r24
     dac:	2c f4       	brge	.+10     	; 0xdb8 <LCD_ret_Home+0x6c>
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9a 87       	std	Y+10, r25	; 0x0a
     db4:	89 87       	std	Y+9, r24	; 0x09
     db6:	3f c0       	rjmp	.+126    	; 0xe36 <LCD_ret_Home+0xea>
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	3f ef       	ldi	r19, 0xFF	; 255
     dbc:	4f e7       	ldi	r20, 0x7F	; 127
     dbe:	57 e4       	ldi	r21, 0x47	; 71
     dc0:	6d 81       	ldd	r22, Y+5	; 0x05
     dc2:	7e 81       	ldd	r23, Y+6	; 0x06
     dc4:	8f 81       	ldd	r24, Y+7	; 0x07
     dc6:	98 85       	ldd	r25, Y+8	; 0x08
     dc8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     dcc:	18 16       	cp	r1, r24
     dce:	4c f5       	brge	.+82     	; 0xe22 <LCD_ret_Home+0xd6>
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e2       	ldi	r20, 0x20	; 32
     dd6:	51 e4       	ldi	r21, 0x41	; 65
     dd8:	69 81       	ldd	r22, Y+1	; 0x01
     dda:	7a 81       	ldd	r23, Y+2	; 0x02
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	bc 01       	movw	r22, r24
     dea:	cd 01       	movw	r24, r26
     dec:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	9a 87       	std	Y+10, r25	; 0x0a
     df6:	89 87       	std	Y+9, r24	; 0x09
     df8:	0f c0       	rjmp	.+30     	; 0xe18 <LCD_ret_Home+0xcc>
     dfa:	88 ec       	ldi	r24, 0xC8	; 200
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	9c 87       	std	Y+12, r25	; 0x0c
     e00:	8b 87       	std	Y+11, r24	; 0x0b
     e02:	8b 85       	ldd	r24, Y+11	; 0x0b
     e04:	9c 85       	ldd	r25, Y+12	; 0x0c
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	f1 f7       	brne	.-4      	; 0xe06 <LCD_ret_Home+0xba>
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	8b 87       	std	Y+11, r24	; 0x0b
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	9a 87       	std	Y+10, r25	; 0x0a
     e16:	89 87       	std	Y+9, r24	; 0x09
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	89 2b       	or	r24, r25
     e1e:	69 f7       	brne	.-38     	; 0xdfa <LCD_ret_Home+0xae>
     e20:	14 c0       	rjmp	.+40     	; 0xe4a <LCD_ret_Home+0xfe>
     e22:	6d 81       	ldd	r22, Y+5	; 0x05
     e24:	7e 81       	ldd	r23, Y+6	; 0x06
     e26:	8f 81       	ldd	r24, Y+7	; 0x07
     e28:	98 85       	ldd	r25, Y+8	; 0x08
     e2a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	9a 87       	std	Y+10, r25	; 0x0a
     e34:	89 87       	std	Y+9, r24	; 0x09
     e36:	89 85       	ldd	r24, Y+9	; 0x09
     e38:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3a:	9e 87       	std	Y+14, r25	; 0x0e
     e3c:	8d 87       	std	Y+13, r24	; 0x0d
     e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e40:	9e 85       	ldd	r25, Y+14	; 0x0e
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <LCD_ret_Home+0xf6>
     e46:	9e 87       	std	Y+14, r25	; 0x0e
     e48:	8d 87       	std	Y+13, r24	; 0x0d
     e4a:	2e 96       	adiw	r28, 0x0e	; 14
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <SendToLCD>:
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	a1 97       	sbiw	r28, 0x21	; 33
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	89 a3       	std	Y+33, r24	; 0x21
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	60 ef       	ldi	r22, 0xF0	; 240
     e76:	8b e3       	ldi	r24, 0x3B	; 59
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <writePins>
     e7e:	89 a1       	ldd	r24, Y+33	; 0x21
     e80:	80 7f       	andi	r24, 0xF0	; 240
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	68 2f       	mov	r22, r24
     e86:	8b e3       	ldi	r24, 0x3B	; 59
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <writePins>
     e8e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCD_latch>
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	60 ef       	ldi	r22, 0xF0	; 240
     e96:	8b e3       	ldi	r24, 0x3B	; 59
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <writePins>
     e9e:	89 a1       	ldd	r24, Y+33	; 0x21
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	82 95       	swap	r24
     ea6:	92 95       	swap	r25
     ea8:	90 7f       	andi	r25, 0xF0	; 240
     eaa:	98 27       	eor	r25, r24
     eac:	80 7f       	andi	r24, 0xF0	; 240
     eae:	98 27       	eor	r25, r24
     eb0:	41 e0       	ldi	r20, 0x01	; 1
     eb2:	68 2f       	mov	r22, r24
     eb4:	8b e3       	ldi	r24, 0x3B	; 59
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <writePins>
     ebc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCD_latch>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a0 e2       	ldi	r26, 0x20	; 32
     ec6:	b2 e4       	ldi	r27, 0x42	; 66
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	ab 83       	std	Y+3, r26	; 0x03
     ece:	bc 83       	std	Y+4, r27	; 0x04
     ed0:	2b ea       	ldi	r18, 0xAB	; 171
     ed2:	3a ea       	ldi	r19, 0xAA	; 170
     ed4:	4a e2       	ldi	r20, 0x2A	; 42
     ed6:	50 e4       	ldi	r21, 0x40	; 64
     ed8:	69 81       	ldd	r22, Y+1	; 0x01
     eda:	7a 81       	ldd	r23, Y+2	; 0x02
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	9e 83       	std	Y+6, r25	; 0x06
     eec:	af 83       	std	Y+7, r26	; 0x07
     eee:	b8 87       	std	Y+8, r27	; 0x08
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	ab 81       	ldd	r26, Y+3	; 0x03
     ef6:	bc 81       	ldd	r27, Y+4	; 0x04
     ef8:	9c 01       	movw	r18, r24
     efa:	ad 01       	movw	r20, r26
     efc:	bc 01       	movw	r22, r24
     efe:	cd 01       	movw	r24, r26
     f00:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__addsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	89 87       	std	Y+9, r24	; 0x09
     f0a:	9a 87       	std	Y+10, r25	; 0x0a
     f0c:	ab 87       	std	Y+11, r26	; 0x0b
     f0e:	bc 87       	std	Y+12, r27	; 0x0c
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	6d 81       	ldd	r22, Y+5	; 0x05
     f1a:	7e 81       	ldd	r23, Y+6	; 0x06
     f1c:	8f 81       	ldd	r24, Y+7	; 0x07
     f1e:	98 85       	ldd	r25, Y+8	; 0x08
     f20:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     f24:	88 23       	and	r24, r24
     f26:	1c f4       	brge	.+6      	; 0xf2e <SendToLCD+0xd2>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	8d 87       	std	Y+13, r24	; 0x0d
     f2c:	b2 c0       	rjmp	.+356    	; 0x1092 <SendToLCD+0x236>
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	3f ef       	ldi	r19, 0xFF	; 255
     f32:	4f e7       	ldi	r20, 0x7F	; 127
     f34:	57 e4       	ldi	r21, 0x47	; 71
     f36:	69 85       	ldd	r22, Y+9	; 0x09
     f38:	7a 85       	ldd	r23, Y+10	; 0x0a
     f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f3e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     f42:	18 16       	cp	r1, r24
     f44:	0c f0       	brlt	.+2      	; 0xf48 <SendToLCD+0xec>
     f46:	7b c0       	rjmp	.+246    	; 0x103e <SendToLCD+0x1e2>
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	4a e7       	ldi	r20, 0x7A	; 122
     f4e:	54 e4       	ldi	r21, 0x44	; 68
     f50:	69 81       	ldd	r22, Y+1	; 0x01
     f52:	7a 81       	ldd	r23, Y+2	; 0x02
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	8e 87       	std	Y+14, r24	; 0x0e
     f62:	9f 87       	std	Y+15, r25	; 0x0f
     f64:	a8 8b       	std	Y+16, r26	; 0x10
     f66:	b9 8b       	std	Y+17, r27	; 0x11
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	4a ef       	ldi	r20, 0xFA	; 250
     f6e:	54 e4       	ldi	r21, 0x44	; 68
     f70:	6e 85       	ldd	r22, Y+14	; 0x0e
     f72:	7f 85       	ldd	r23, Y+15	; 0x0f
     f74:	88 89       	ldd	r24, Y+16	; 0x10
     f76:	99 89       	ldd	r25, Y+17	; 0x11
     f78:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	8a 8b       	std	Y+18, r24	; 0x12
     f82:	9b 8b       	std	Y+19, r25	; 0x13
     f84:	ac 8b       	std	Y+20, r26	; 0x14
     f86:	bd 8b       	std	Y+21, r27	; 0x15
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e8       	ldi	r20, 0x80	; 128
     f8e:	5f e3       	ldi	r21, 0x3F	; 63
     f90:	6a 89       	ldd	r22, Y+18	; 0x12
     f92:	7b 89       	ldd	r23, Y+19	; 0x13
     f94:	8c 89       	ldd	r24, Y+20	; 0x14
     f96:	9d 89       	ldd	r25, Y+21	; 0x15
     f98:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	2c f4       	brge	.+10     	; 0xfaa <SendToLCD+0x14e>
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9f 8b       	std	Y+23, r25	; 0x17
     fa6:	8e 8b       	std	Y+22, r24	; 0x16
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <SendToLCD+0x1cc>
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	3f ef       	ldi	r19, 0xFF	; 255
     fae:	4f e7       	ldi	r20, 0x7F	; 127
     fb0:	57 e4       	ldi	r21, 0x47	; 71
     fb2:	6a 89       	ldd	r22, Y+18	; 0x12
     fb4:	7b 89       	ldd	r23, Y+19	; 0x13
     fb6:	8c 89       	ldd	r24, Y+20	; 0x14
     fb8:	9d 89       	ldd	r25, Y+21	; 0x15
     fba:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	4c f5       	brge	.+82     	; 0x1014 <SendToLCD+0x1b8>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e2       	ldi	r20, 0x20	; 32
     fc8:	51 e4       	ldi	r21, 0x41	; 65
     fca:	6e 85       	ldd	r22, Y+14	; 0x0e
     fcc:	7f 85       	ldd	r23, Y+15	; 0x0f
     fce:	88 89       	ldd	r24, Y+16	; 0x10
     fd0:	99 89       	ldd	r25, Y+17	; 0x11
     fd2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	9f 8b       	std	Y+23, r25	; 0x17
     fe8:	8e 8b       	std	Y+22, r24	; 0x16
     fea:	0f c0       	rjmp	.+30     	; 0x100a <SendToLCD+0x1ae>
     fec:	88 ec       	ldi	r24, 0xC8	; 200
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	99 8f       	std	Y+25, r25	; 0x19
     ff2:	88 8f       	std	Y+24, r24	; 0x18
     ff4:	88 8d       	ldd	r24, Y+24	; 0x18
     ff6:	99 8d       	ldd	r25, Y+25	; 0x19
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <SendToLCD+0x19c>
     ffc:	99 8f       	std	Y+25, r25	; 0x19
     ffe:	88 8f       	std	Y+24, r24	; 0x18
    1000:	8e 89       	ldd	r24, Y+22	; 0x16
    1002:	9f 89       	ldd	r25, Y+23	; 0x17
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	9f 8b       	std	Y+23, r25	; 0x17
    1008:	8e 8b       	std	Y+22, r24	; 0x16
    100a:	8e 89       	ldd	r24, Y+22	; 0x16
    100c:	9f 89       	ldd	r25, Y+23	; 0x17
    100e:	89 2b       	or	r24, r25
    1010:	69 f7       	brne	.-38     	; 0xfec <SendToLCD+0x190>
    1012:	3f c0       	rjmp	.+126    	; 0x1092 <SendToLCD+0x236>
    1014:	6a 89       	ldd	r22, Y+18	; 0x12
    1016:	7b 89       	ldd	r23, Y+19	; 0x13
    1018:	8c 89       	ldd	r24, Y+20	; 0x14
    101a:	9d 89       	ldd	r25, Y+21	; 0x15
    101c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9f 8b       	std	Y+23, r25	; 0x17
    1026:	8e 8b       	std	Y+22, r24	; 0x16
    1028:	8e 89       	ldd	r24, Y+22	; 0x16
    102a:	9f 89       	ldd	r25, Y+23	; 0x17
    102c:	9b 8f       	std	Y+27, r25	; 0x1b
    102e:	8a 8f       	std	Y+26, r24	; 0x1a
    1030:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1032:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <SendToLCD+0x1d8>
    1038:	9b 8f       	std	Y+27, r25	; 0x1b
    103a:	8a 8f       	std	Y+26, r24	; 0x1a
    103c:	2a c0       	rjmp	.+84     	; 0x1092 <SendToLCD+0x236>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	4f e7       	ldi	r20, 0x7F	; 127
    1044:	53 e4       	ldi	r21, 0x43	; 67
    1046:	6d 81       	ldd	r22, Y+5	; 0x05
    1048:	7e 81       	ldd	r23, Y+6	; 0x06
    104a:	8f 81       	ldd	r24, Y+7	; 0x07
    104c:	98 85       	ldd	r25, Y+8	; 0x08
    104e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
    1052:	18 16       	cp	r1, r24
    1054:	ac f4       	brge	.+42     	; 0x1080 <SendToLCD+0x224>
    1056:	69 85       	ldd	r22, Y+9	; 0x09
    1058:	7a 85       	ldd	r23, Y+10	; 0x0a
    105a:	8b 85       	ldd	r24, Y+11	; 0x0b
    105c:	9c 85       	ldd	r25, Y+12	; 0x0c
    105e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	9d 8f       	std	Y+29, r25	; 0x1d
    1068:	8c 8f       	std	Y+28, r24	; 0x1c
    106a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    106c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    106e:	9f 8f       	std	Y+31, r25	; 0x1f
    1070:	8e 8f       	std	Y+30, r24	; 0x1e
    1072:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1074:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <SendToLCD+0x21a>
    107a:	9f 8f       	std	Y+31, r25	; 0x1f
    107c:	8e 8f       	std	Y+30, r24	; 0x1e
    107e:	0f c0       	rjmp	.+30     	; 0x109e <SendToLCD+0x242>
    1080:	6d 81       	ldd	r22, Y+5	; 0x05
    1082:	7e 81       	ldd	r23, Y+6	; 0x06
    1084:	8f 81       	ldd	r24, Y+7	; 0x07
    1086:	98 85       	ldd	r25, Y+8	; 0x08
    1088:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	8d 87       	std	Y+13, r24	; 0x0d
    1092:	8d 85       	ldd	r24, Y+13	; 0x0d
    1094:	88 a3       	std	Y+32, r24	; 0x20
    1096:	88 a1       	ldd	r24, Y+32	; 0x20
    1098:	8a 95       	dec	r24
    109a:	f1 f7       	brne	.-4      	; 0x1098 <SendToLCD+0x23c>
    109c:	88 a3       	std	Y+32, r24	; 0x20
    109e:	a1 96       	adiw	r28, 0x21	; 33
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <LCD_send_cmd>:
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	1f 92       	push	r1
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	89 e0       	ldi	r24, 0x09	; 9
    10c0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <SendToLCD>
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <LCD_send_data>:
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	1f 92       	push	r1
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	89 e0       	ldi	r24, 0x09	; 9
    10e2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	0e 94 2e 07 	call	0xe5c	; 0xe5c <SendToLCD>
    10ec:	0f 90       	pop	r0
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <LCD_latch>:
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	c0 54       	subi	r28, 0x40	; 64
    10fe:	d1 09       	sbc	r29, r1
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	8b e0       	ldi	r24, 0x0B	; 11
    110e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	a0 e2       	ldi	r26, 0x20	; 32
    1118:	b2 e4       	ldi	r27, 0x42	; 66
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	ab 83       	std	Y+3, r26	; 0x03
    1120:	bc 83       	std	Y+4, r27	; 0x04
    1122:	2b ea       	ldi	r18, 0xAB	; 171
    1124:	3a ea       	ldi	r19, 0xAA	; 170
    1126:	4a e2       	ldi	r20, 0x2A	; 42
    1128:	50 e4       	ldi	r21, 0x40	; 64
    112a:	69 81       	ldd	r22, Y+1	; 0x01
    112c:	7a 81       	ldd	r23, Y+2	; 0x02
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	af 83       	std	Y+7, r26	; 0x07
    1140:	b8 87       	std	Y+8, r27	; 0x08
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	ab 81       	ldd	r26, Y+3	; 0x03
    1148:	bc 81       	ldd	r27, Y+4	; 0x04
    114a:	9c 01       	movw	r18, r24
    114c:	ad 01       	movw	r20, r26
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__addsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	89 87       	std	Y+9, r24	; 0x09
    115c:	9a 87       	std	Y+10, r25	; 0x0a
    115e:	ab 87       	std	Y+11, r26	; 0x0b
    1160:	bc 87       	std	Y+12, r27	; 0x0c
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e8       	ldi	r20, 0x80	; 128
    1168:	5f e3       	ldi	r21, 0x3F	; 63
    116a:	6d 81       	ldd	r22, Y+5	; 0x05
    116c:	7e 81       	ldd	r23, Y+6	; 0x06
    116e:	8f 81       	ldd	r24, Y+7	; 0x07
    1170:	98 85       	ldd	r25, Y+8	; 0x08
    1172:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
    1176:	88 23       	and	r24, r24
    1178:	1c f4       	brge	.+6      	; 0x1180 <LCD_latch+0x8c>
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	8d 87       	std	Y+13, r24	; 0x0d
    117e:	b2 c0       	rjmp	.+356    	; 0x12e4 <LCD_latch+0x1f0>
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	3f ef       	ldi	r19, 0xFF	; 255
    1184:	4f e7       	ldi	r20, 0x7F	; 127
    1186:	57 e4       	ldi	r21, 0x47	; 71
    1188:	69 85       	ldd	r22, Y+9	; 0x09
    118a:	7a 85       	ldd	r23, Y+10	; 0x0a
    118c:	8b 85       	ldd	r24, Y+11	; 0x0b
    118e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1190:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
    1194:	18 16       	cp	r1, r24
    1196:	0c f0       	brlt	.+2      	; 0x119a <LCD_latch+0xa6>
    1198:	7b c0       	rjmp	.+246    	; 0x1290 <LCD_latch+0x19c>
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	4a e7       	ldi	r20, 0x7A	; 122
    11a0:	54 e4       	ldi	r21, 0x44	; 68
    11a2:	69 81       	ldd	r22, Y+1	; 0x01
    11a4:	7a 81       	ldd	r23, Y+2	; 0x02
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	8e 87       	std	Y+14, r24	; 0x0e
    11b4:	9f 87       	std	Y+15, r25	; 0x0f
    11b6:	a8 8b       	std	Y+16, r26	; 0x10
    11b8:	b9 8b       	std	Y+17, r27	; 0x11
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a ef       	ldi	r20, 0xFA	; 250
    11c0:	54 e4       	ldi	r21, 0x44	; 68
    11c2:	6e 85       	ldd	r22, Y+14	; 0x0e
    11c4:	7f 85       	ldd	r23, Y+15	; 0x0f
    11c6:	88 89       	ldd	r24, Y+16	; 0x10
    11c8:	99 89       	ldd	r25, Y+17	; 0x11
    11ca:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	8a 8b       	std	Y+18, r24	; 0x12
    11d4:	9b 8b       	std	Y+19, r25	; 0x13
    11d6:	ac 8b       	std	Y+20, r26	; 0x14
    11d8:	bd 8b       	std	Y+21, r27	; 0x15
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e8       	ldi	r20, 0x80	; 128
    11e0:	5f e3       	ldi	r21, 0x3F	; 63
    11e2:	6a 89       	ldd	r22, Y+18	; 0x12
    11e4:	7b 89       	ldd	r23, Y+19	; 0x13
    11e6:	8c 89       	ldd	r24, Y+20	; 0x14
    11e8:	9d 89       	ldd	r25, Y+21	; 0x15
    11ea:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	2c f4       	brge	.+10     	; 0x11fc <LCD_latch+0x108>
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9f 8b       	std	Y+23, r25	; 0x17
    11f8:	8e 8b       	std	Y+22, r24	; 0x16
    11fa:	3f c0       	rjmp	.+126    	; 0x127a <LCD_latch+0x186>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	4f e7       	ldi	r20, 0x7F	; 127
    1202:	57 e4       	ldi	r21, 0x47	; 71
    1204:	6a 89       	ldd	r22, Y+18	; 0x12
    1206:	7b 89       	ldd	r23, Y+19	; 0x13
    1208:	8c 89       	ldd	r24, Y+20	; 0x14
    120a:	9d 89       	ldd	r25, Y+21	; 0x15
    120c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
    1210:	18 16       	cp	r1, r24
    1212:	4c f5       	brge	.+82     	; 0x1266 <LCD_latch+0x172>
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	6e 85       	ldd	r22, Y+14	; 0x0e
    121e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1220:	88 89       	ldd	r24, Y+16	; 0x10
    1222:	99 89       	ldd	r25, Y+17	; 0x11
    1224:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9f 8b       	std	Y+23, r25	; 0x17
    123a:	8e 8b       	std	Y+22, r24	; 0x16
    123c:	0f c0       	rjmp	.+30     	; 0x125c <LCD_latch+0x168>
    123e:	88 ec       	ldi	r24, 0xC8	; 200
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	99 8f       	std	Y+25, r25	; 0x19
    1244:	88 8f       	std	Y+24, r24	; 0x18
    1246:	88 8d       	ldd	r24, Y+24	; 0x18
    1248:	99 8d       	ldd	r25, Y+25	; 0x19
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <LCD_latch+0x156>
    124e:	99 8f       	std	Y+25, r25	; 0x19
    1250:	88 8f       	std	Y+24, r24	; 0x18
    1252:	8e 89       	ldd	r24, Y+22	; 0x16
    1254:	9f 89       	ldd	r25, Y+23	; 0x17
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	9f 8b       	std	Y+23, r25	; 0x17
    125a:	8e 8b       	std	Y+22, r24	; 0x16
    125c:	8e 89       	ldd	r24, Y+22	; 0x16
    125e:	9f 89       	ldd	r25, Y+23	; 0x17
    1260:	89 2b       	or	r24, r25
    1262:	69 f7       	brne	.-38     	; 0x123e <LCD_latch+0x14a>
    1264:	3f c0       	rjmp	.+126    	; 0x12e4 <LCD_latch+0x1f0>
    1266:	6a 89       	ldd	r22, Y+18	; 0x12
    1268:	7b 89       	ldd	r23, Y+19	; 0x13
    126a:	8c 89       	ldd	r24, Y+20	; 0x14
    126c:	9d 89       	ldd	r25, Y+21	; 0x15
    126e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9f 8b       	std	Y+23, r25	; 0x17
    1278:	8e 8b       	std	Y+22, r24	; 0x16
    127a:	8e 89       	ldd	r24, Y+22	; 0x16
    127c:	9f 89       	ldd	r25, Y+23	; 0x17
    127e:	9b 8f       	std	Y+27, r25	; 0x1b
    1280:	8a 8f       	std	Y+26, r24	; 0x1a
    1282:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1284:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <LCD_latch+0x192>
    128a:	9b 8f       	std	Y+27, r25	; 0x1b
    128c:	8a 8f       	std	Y+26, r24	; 0x1a
    128e:	2a c0       	rjmp	.+84     	; 0x12e4 <LCD_latch+0x1f0>
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	4f e7       	ldi	r20, 0x7F	; 127
    1296:	53 e4       	ldi	r21, 0x43	; 67
    1298:	6d 81       	ldd	r22, Y+5	; 0x05
    129a:	7e 81       	ldd	r23, Y+6	; 0x06
    129c:	8f 81       	ldd	r24, Y+7	; 0x07
    129e:	98 85       	ldd	r25, Y+8	; 0x08
    12a0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
    12a4:	18 16       	cp	r1, r24
    12a6:	ac f4       	brge	.+42     	; 0x12d2 <LCD_latch+0x1de>
    12a8:	69 85       	ldd	r22, Y+9	; 0x09
    12aa:	7a 85       	ldd	r23, Y+10	; 0x0a
    12ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    12b0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9d 8f       	std	Y+29, r25	; 0x1d
    12ba:	8c 8f       	std	Y+28, r24	; 0x1c
    12bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    12c0:	9f 8f       	std	Y+31, r25	; 0x1f
    12c2:	8e 8f       	std	Y+30, r24	; 0x1e
    12c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <LCD_latch+0x1d4>
    12cc:	9f 8f       	std	Y+31, r25	; 0x1f
    12ce:	8e 8f       	std	Y+30, r24	; 0x1e
    12d0:	0f c0       	rjmp	.+30     	; 0x12f0 <LCD_latch+0x1fc>
    12d2:	6d 81       	ldd	r22, Y+5	; 0x05
    12d4:	7e 81       	ldd	r23, Y+6	; 0x06
    12d6:	8f 81       	ldd	r24, Y+7	; 0x07
    12d8:	98 85       	ldd	r25, Y+8	; 0x08
    12da:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	8d 87       	std	Y+13, r24	; 0x0d
    12e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e6:	88 a3       	std	Y+32, r24	; 0x20
    12e8:	88 a1       	ldd	r24, Y+32	; 0x20
    12ea:	8a 95       	dec	r24
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <LCD_latch+0x1f6>
    12ee:	88 a3       	std	Y+32, r24	; 0x20
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	8b e0       	ldi	r24, 0x0B	; 11
    12f4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a0 e2       	ldi	r26, 0x20	; 32
    12fe:	b2 e4       	ldi	r27, 0x42	; 66
    1300:	89 a3       	std	Y+33, r24	; 0x21
    1302:	9a a3       	std	Y+34, r25	; 0x22
    1304:	ab a3       	std	Y+35, r26	; 0x23
    1306:	bc a3       	std	Y+36, r27	; 0x24
    1308:	2b ea       	ldi	r18, 0xAB	; 171
    130a:	3a ea       	ldi	r19, 0xAA	; 170
    130c:	4a e2       	ldi	r20, 0x2A	; 42
    130e:	50 e4       	ldi	r21, 0x40	; 64
    1310:	69 a1       	ldd	r22, Y+33	; 0x21
    1312:	7a a1       	ldd	r23, Y+34	; 0x22
    1314:	8b a1       	ldd	r24, Y+35	; 0x23
    1316:	9c a1       	ldd	r25, Y+36	; 0x24
    1318:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8d a3       	std	Y+37, r24	; 0x25
    1322:	9e a3       	std	Y+38, r25	; 0x26
    1324:	af a3       	std	Y+39, r26	; 0x27
    1326:	b8 a7       	std	Y+40, r27	; 0x28
    1328:	89 a1       	ldd	r24, Y+33	; 0x21
    132a:	9a a1       	ldd	r25, Y+34	; 0x22
    132c:	ab a1       	ldd	r26, Y+35	; 0x23
    132e:	bc a1       	ldd	r27, Y+36	; 0x24
    1330:	9c 01       	movw	r18, r24
    1332:	ad 01       	movw	r20, r26
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__addsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	89 a7       	std	Y+41, r24	; 0x29
    1342:	9a a7       	std	Y+42, r25	; 0x2a
    1344:	ab a7       	std	Y+43, r26	; 0x2b
    1346:	bc a7       	std	Y+44, r27	; 0x2c
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	5f e3       	ldi	r21, 0x3F	; 63
    1350:	6d a1       	ldd	r22, Y+37	; 0x25
    1352:	7e a1       	ldd	r23, Y+38	; 0x26
    1354:	8f a1       	ldd	r24, Y+39	; 0x27
    1356:	98 a5       	ldd	r25, Y+40	; 0x28
    1358:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
    135c:	88 23       	and	r24, r24
    135e:	1c f4       	brge	.+6      	; 0x1366 <LCD_latch+0x272>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	8d a7       	std	Y+45, r24	; 0x2d
    1364:	b2 c0       	rjmp	.+356    	; 0x14ca <LCD_latch+0x3d6>
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	57 e4       	ldi	r21, 0x47	; 71
    136e:	69 a5       	ldd	r22, Y+41	; 0x29
    1370:	7a a5       	ldd	r23, Y+42	; 0x2a
    1372:	8b a5       	ldd	r24, Y+43	; 0x2b
    1374:	9c a5       	ldd	r25, Y+44	; 0x2c
    1376:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
    137a:	18 16       	cp	r1, r24
    137c:	0c f0       	brlt	.+2      	; 0x1380 <LCD_latch+0x28c>
    137e:	7b c0       	rjmp	.+246    	; 0x1476 <LCD_latch+0x382>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a e7       	ldi	r20, 0x7A	; 122
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	69 a1       	ldd	r22, Y+33	; 0x21
    138a:	7a a1       	ldd	r23, Y+34	; 0x22
    138c:	8b a1       	ldd	r24, Y+35	; 0x23
    138e:	9c a1       	ldd	r25, Y+36	; 0x24
    1390:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__divsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	8e a7       	std	Y+46, r24	; 0x2e
    139a:	9f a7       	std	Y+47, r25	; 0x2f
    139c:	a8 ab       	std	Y+48, r26	; 0x30
    139e:	b9 ab       	std	Y+49, r27	; 0x31
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	4a ef       	ldi	r20, 0xFA	; 250
    13a6:	54 e4       	ldi	r21, 0x44	; 68
    13a8:	6e a5       	ldd	r22, Y+46	; 0x2e
    13aa:	7f a5       	ldd	r23, Y+47	; 0x2f
    13ac:	88 a9       	ldd	r24, Y+48	; 0x30
    13ae:	99 a9       	ldd	r25, Y+49	; 0x31
    13b0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8a ab       	std	Y+50, r24	; 0x32
    13ba:	9b ab       	std	Y+51, r25	; 0x33
    13bc:	ac ab       	std	Y+52, r26	; 0x34
    13be:	bd ab       	std	Y+53, r27	; 0x35
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e8       	ldi	r20, 0x80	; 128
    13c6:	5f e3       	ldi	r21, 0x3F	; 63
    13c8:	6a a9       	ldd	r22, Y+50	; 0x32
    13ca:	7b a9       	ldd	r23, Y+51	; 0x33
    13cc:	8c a9       	ldd	r24, Y+52	; 0x34
    13ce:	9d a9       	ldd	r25, Y+53	; 0x35
    13d0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__cmpsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <LCD_latch+0x2ee>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9f ab       	std	Y+55, r25	; 0x37
    13de:	8e ab       	std	Y+54, r24	; 0x36
    13e0:	3f c0       	rjmp	.+126    	; 0x1460 <LCD_latch+0x36c>
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	3f ef       	ldi	r19, 0xFF	; 255
    13e6:	4f e7       	ldi	r20, 0x7F	; 127
    13e8:	57 e4       	ldi	r21, 0x47	; 71
    13ea:	6a a9       	ldd	r22, Y+50	; 0x32
    13ec:	7b a9       	ldd	r23, Y+51	; 0x33
    13ee:	8c a9       	ldd	r24, Y+52	; 0x34
    13f0:	9d a9       	ldd	r25, Y+53	; 0x35
    13f2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	4c f5       	brge	.+82     	; 0x144c <LCD_latch+0x358>
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e2       	ldi	r20, 0x20	; 32
    1400:	51 e4       	ldi	r21, 0x41	; 65
    1402:	6e a5       	ldd	r22, Y+46	; 0x2e
    1404:	7f a5       	ldd	r23, Y+47	; 0x2f
    1406:	88 a9       	ldd	r24, Y+48	; 0x30
    1408:	99 a9       	ldd	r25, Y+49	; 0x31
    140a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9f ab       	std	Y+55, r25	; 0x37
    1420:	8e ab       	std	Y+54, r24	; 0x36
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <LCD_latch+0x34e>
    1424:	88 ec       	ldi	r24, 0xC8	; 200
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	99 af       	std	Y+57, r25	; 0x39
    142a:	88 af       	std	Y+56, r24	; 0x38
    142c:	88 ad       	ldd	r24, Y+56	; 0x38
    142e:	99 ad       	ldd	r25, Y+57	; 0x39
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <LCD_latch+0x33c>
    1434:	99 af       	std	Y+57, r25	; 0x39
    1436:	88 af       	std	Y+56, r24	; 0x38
    1438:	8e a9       	ldd	r24, Y+54	; 0x36
    143a:	9f a9       	ldd	r25, Y+55	; 0x37
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	9f ab       	std	Y+55, r25	; 0x37
    1440:	8e ab       	std	Y+54, r24	; 0x36
    1442:	8e a9       	ldd	r24, Y+54	; 0x36
    1444:	9f a9       	ldd	r25, Y+55	; 0x37
    1446:	89 2b       	or	r24, r25
    1448:	69 f7       	brne	.-38     	; 0x1424 <LCD_latch+0x330>
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <LCD_latch+0x3d6>
    144c:	6a a9       	ldd	r22, Y+50	; 0x32
    144e:	7b a9       	ldd	r23, Y+51	; 0x33
    1450:	8c a9       	ldd	r24, Y+52	; 0x34
    1452:	9d a9       	ldd	r25, Y+53	; 0x35
    1454:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9f ab       	std	Y+55, r25	; 0x37
    145e:	8e ab       	std	Y+54, r24	; 0x36
    1460:	8e a9       	ldd	r24, Y+54	; 0x36
    1462:	9f a9       	ldd	r25, Y+55	; 0x37
    1464:	9b af       	std	Y+59, r25	; 0x3b
    1466:	8a af       	std	Y+58, r24	; 0x3a
    1468:	8a ad       	ldd	r24, Y+58	; 0x3a
    146a:	9b ad       	ldd	r25, Y+59	; 0x3b
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <LCD_latch+0x378>
    1470:	9b af       	std	Y+59, r25	; 0x3b
    1472:	8a af       	std	Y+58, r24	; 0x3a
    1474:	2a c0       	rjmp	.+84     	; 0x14ca <LCD_latch+0x3d6>
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	53 e4       	ldi	r21, 0x43	; 67
    147e:	6d a1       	ldd	r22, Y+37	; 0x25
    1480:	7e a1       	ldd	r23, Y+38	; 0x26
    1482:	8f a1       	ldd	r24, Y+39	; 0x27
    1484:	98 a5       	ldd	r25, Y+40	; 0x28
    1486:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__gesf2>
    148a:	18 16       	cp	r1, r24
    148c:	ac f4       	brge	.+42     	; 0x14b8 <LCD_latch+0x3c4>
    148e:	69 a5       	ldd	r22, Y+41	; 0x29
    1490:	7a a5       	ldd	r23, Y+42	; 0x2a
    1492:	8b a5       	ldd	r24, Y+43	; 0x2b
    1494:	9c a5       	ldd	r25, Y+44	; 0x2c
    1496:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9d af       	std	Y+61, r25	; 0x3d
    14a0:	8c af       	std	Y+60, r24	; 0x3c
    14a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    14a4:	9d ad       	ldd	r25, Y+61	; 0x3d
    14a6:	9f af       	std	Y+63, r25	; 0x3f
    14a8:	8e af       	std	Y+62, r24	; 0x3e
    14aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    14ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <LCD_latch+0x3ba>
    14b2:	9f af       	std	Y+63, r25	; 0x3f
    14b4:	8e af       	std	Y+62, r24	; 0x3e
    14b6:	1c c0       	rjmp	.+56     	; 0x14f0 <LCD_latch+0x3fc>
    14b8:	6d a1       	ldd	r22, Y+37	; 0x25
    14ba:	7e a1       	ldd	r23, Y+38	; 0x26
    14bc:	8f a1       	ldd	r24, Y+39	; 0x27
    14be:	98 a5       	ldd	r25, Y+40	; 0x28
    14c0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	8d a7       	std	Y+45, r24	; 0x2d
    14ca:	2d a5       	ldd	r18, Y+45	; 0x2d
    14cc:	ce 01       	movw	r24, r28
    14ce:	80 5c       	subi	r24, 0xC0	; 192
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 83       	st	Z, r18
    14d6:	ce 01       	movw	r24, r28
    14d8:	80 5c       	subi	r24, 0xC0	; 192
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	fc 01       	movw	r30, r24
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	2a 95       	dec	r18
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <LCD_latch+0x3ee>
    14e6:	ce 01       	movw	r24, r28
    14e8:	80 5c       	subi	r24, 0xC0	; 192
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
    14f0:	c0 5c       	subi	r28, 0xC0	; 192
    14f2:	df 4f       	sbci	r29, 0xFF	; 255
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <disp_char>:
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	1f 92       	push	r1
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_send_data>
    1516:	0f 90       	pop	r0
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <disp_str>:
void disp_str(u8* str)
{
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	00 d0       	rcall	.+0      	; 0x1524 <disp_str+0x6>
    1524:	1f 92       	push	r1
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	9b 83       	std	Y+3, r25	; 0x03
    152c:	8a 83       	std	Y+2, r24	; 0x02
	u8 indx=0;
    152e:	19 82       	std	Y+1, r1	; 0x01
	while(str[indx]!='\0')
    1530:	0e c0       	rjmp	.+28     	; 0x154e <disp_str+0x30>
	{
		disp_char(indx[str]);
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	2a 81       	ldd	r18, Y+2	; 0x02
    153a:	3b 81       	ldd	r19, Y+3	; 0x03
    153c:	82 0f       	add	r24, r18
    153e:	93 1f       	adc	r25, r19
    1540:	fc 01       	movw	r30, r24
    1542:	80 81       	ld	r24, Z
    1544:	0e 94 82 0a 	call	0x1504	; 0x1504 <disp_char>
		indx++;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	89 83       	std	Y+1, r24	; 0x01
	disp_char(letter);	
}
void disp_str(u8* str)
{
	u8 indx=0;
	while(str[indx]!='\0')
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	2a 81       	ldd	r18, Y+2	; 0x02
    1556:	3b 81       	ldd	r19, Y+3	; 0x03
    1558:	82 0f       	add	r24, r18
    155a:	93 1f       	adc	r25, r19
    155c:	fc 01       	movw	r30, r24
    155e:	80 81       	ld	r24, Z
    1560:	88 23       	and	r24, r24
    1562:	39 f7       	brne	.-50     	; 0x1532 <disp_str+0x14>
	{
		disp_char(indx[str]);
		indx++;
	}
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	00 d0       	rcall	.+0      	; 0x1576 <LCD_GOTXY+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	6a 83       	std	Y+2, r22	; 0x02
	if (row==1)
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	29 f4       	brne	.+10     	; 0x158e <LCD_GOTXY+0x1e>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	81 58       	subi	r24, 0x81	; 129
    1588:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_send_cmd>
    158c:	07 c0       	rjmp	.+14     	; 0x159c <LCD_GOTXY+0x2c>
	}
	else if(row==2)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	21 f4       	brne	.+8      	; 0x159c <LCD_GOTXY+0x2c>
	{
		LCD_send_cmd(DDRAM_ADD+0x40+col-1);	
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	81 54       	subi	r24, 0x41	; 65
    1598:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_send_cmd>
	}
	else{}
	
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <disp_strXY>:

void disp_strXY(u8 row,u8 col,u8* str)
{
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <disp_strXY+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <disp_strXY+0x8>
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	6a 83       	std	Y+2, r22	; 0x02
    15b6:	5c 83       	std	Y+4, r21	; 0x04
    15b8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GOTXY(row,col);
    15ba:	6a 81       	ldd	r22, Y+2	; 0x02
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LCD_GOTXY>
	disp_str(str);
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	0e 94 8f 0a 	call	0x151e	; 0x151e <disp_str>
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	00 d0       	rcall	.+0      	; 0x15de <writePin+0x6>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	6a 83       	std	Y+2, r22	; 0x02
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	88 30       	cpi	r24, 0x08	; 8
    15ea:	90 f5       	brcc	.+100    	; 0x1650 <writePin+0x78>
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	a9 f4       	brne	.+42     	; 0x161c <writePin+0x44>
    15f2:	8b e3       	ldi	r24, 0x3B	; 59
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	2b e3       	ldi	r18, 0x3B	; 59
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	f9 01       	movw	r30, r18
    15fc:	20 81       	ld	r18, Z
    15fe:	62 2f       	mov	r22, r18
    1600:	29 81       	ldd	r18, Y+1	; 0x01
    1602:	42 2f       	mov	r20, r18
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	21 e0       	ldi	r18, 0x01	; 1
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <writePin+0x38>
    160c:	22 0f       	add	r18, r18
    160e:	33 1f       	adc	r19, r19
    1610:	4a 95       	dec	r20
    1612:	e2 f7       	brpl	.-8      	; 0x160c <writePin+0x34>
    1614:	26 2b       	or	r18, r22
    1616:	fc 01       	movw	r30, r24
    1618:	20 83       	st	Z, r18
    161a:	d0 c0       	rjmp	.+416    	; 0x17bc <writePin+0x1e4>
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	88 23       	and	r24, r24
    1620:	09 f0       	breq	.+2      	; 0x1624 <writePin+0x4c>
    1622:	cc c0       	rjmp	.+408    	; 0x17bc <writePin+0x1e4>
    1624:	8b e3       	ldi	r24, 0x3B	; 59
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	2b e3       	ldi	r18, 0x3B	; 59
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	f9 01       	movw	r30, r18
    162e:	20 81       	ld	r18, Z
    1630:	62 2f       	mov	r22, r18
    1632:	29 81       	ldd	r18, Y+1	; 0x01
    1634:	42 2f       	mov	r20, r18
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	21 e0       	ldi	r18, 0x01	; 1
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <writePin+0x6a>
    163e:	22 0f       	add	r18, r18
    1640:	33 1f       	adc	r19, r19
    1642:	4a 95       	dec	r20
    1644:	e2 f7       	brpl	.-8      	; 0x163e <writePin+0x66>
    1646:	20 95       	com	r18
    1648:	26 23       	and	r18, r22
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
    164e:	b6 c0       	rjmp	.+364    	; 0x17bc <writePin+0x1e4>
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	88 30       	cpi	r24, 0x08	; 8
    1654:	d0 f1       	brcs	.+116    	; 0x16ca <writePin+0xf2>
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	80 31       	cpi	r24, 0x10	; 16
    165a:	b8 f5       	brcc	.+110    	; 0x16ca <writePin+0xf2>
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	c1 f4       	brne	.+48     	; 0x1692 <writePin+0xba>
    1662:	88 e3       	ldi	r24, 0x38	; 56
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	28 e3       	ldi	r18, 0x38	; 56
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	f9 01       	movw	r30, r18
    166c:	20 81       	ld	r18, Z
    166e:	62 2f       	mov	r22, r18
    1670:	29 81       	ldd	r18, Y+1	; 0x01
    1672:	22 2f       	mov	r18, r18
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	a9 01       	movw	r20, r18
    1678:	48 50       	subi	r20, 0x08	; 8
    167a:	51 09       	sbc	r21, r1
    167c:	21 e0       	ldi	r18, 0x01	; 1
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <writePin+0xae>
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	4a 95       	dec	r20
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <writePin+0xaa>
    168a:	26 2b       	or	r18, r22
    168c:	fc 01       	movw	r30, r24
    168e:	20 83       	st	Z, r18
    1690:	1b c0       	rjmp	.+54     	; 0x16c8 <writePin+0xf0>
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	88 23       	and	r24, r24
    1696:	c1 f4       	brne	.+48     	; 0x16c8 <writePin+0xf0>
    1698:	88 e3       	ldi	r24, 0x38	; 56
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	28 e3       	ldi	r18, 0x38	; 56
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	f9 01       	movw	r30, r18
    16a2:	20 81       	ld	r18, Z
    16a4:	62 2f       	mov	r22, r18
    16a6:	29 81       	ldd	r18, Y+1	; 0x01
    16a8:	22 2f       	mov	r18, r18
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	a9 01       	movw	r20, r18
    16ae:	48 50       	subi	r20, 0x08	; 8
    16b0:	51 09       	sbc	r21, r1
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <writePin+0xe4>
    16b8:	22 0f       	add	r18, r18
    16ba:	33 1f       	adc	r19, r19
    16bc:	4a 95       	dec	r20
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <writePin+0xe0>
    16c0:	20 95       	com	r18
    16c2:	26 23       	and	r18, r22
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
    16c8:	79 c0       	rjmp	.+242    	; 0x17bc <writePin+0x1e4>
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	80 31       	cpi	r24, 0x10	; 16
    16ce:	d0 f1       	brcs	.+116    	; 0x1744 <writePin+0x16c>
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	88 31       	cpi	r24, 0x18	; 24
    16d4:	b8 f5       	brcc	.+110    	; 0x1744 <writePin+0x16c>
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	c1 f4       	brne	.+48     	; 0x170c <writePin+0x134>
    16dc:	85 e3       	ldi	r24, 0x35	; 53
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	25 e3       	ldi	r18, 0x35	; 53
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	f9 01       	movw	r30, r18
    16e6:	20 81       	ld	r18, Z
    16e8:	62 2f       	mov	r22, r18
    16ea:	29 81       	ldd	r18, Y+1	; 0x01
    16ec:	22 2f       	mov	r18, r18
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	a9 01       	movw	r20, r18
    16f2:	40 51       	subi	r20, 0x10	; 16
    16f4:	51 09       	sbc	r21, r1
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <writePin+0x128>
    16fc:	22 0f       	add	r18, r18
    16fe:	33 1f       	adc	r19, r19
    1700:	4a 95       	dec	r20
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <writePin+0x124>
    1704:	26 2b       	or	r18, r22
    1706:	fc 01       	movw	r30, r24
    1708:	20 83       	st	Z, r18
    170a:	1b c0       	rjmp	.+54     	; 0x1742 <writePin+0x16a>
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	88 23       	and	r24, r24
    1710:	c1 f4       	brne	.+48     	; 0x1742 <writePin+0x16a>
    1712:	85 e3       	ldi	r24, 0x35	; 53
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	25 e3       	ldi	r18, 0x35	; 53
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	f9 01       	movw	r30, r18
    171c:	20 81       	ld	r18, Z
    171e:	62 2f       	mov	r22, r18
    1720:	29 81       	ldd	r18, Y+1	; 0x01
    1722:	22 2f       	mov	r18, r18
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	a9 01       	movw	r20, r18
    1728:	40 51       	subi	r20, 0x10	; 16
    172a:	51 09       	sbc	r21, r1
    172c:	21 e0       	ldi	r18, 0x01	; 1
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <writePin+0x15e>
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	4a 95       	dec	r20
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <writePin+0x15a>
    173a:	20 95       	com	r18
    173c:	26 23       	and	r18, r22
    173e:	fc 01       	movw	r30, r24
    1740:	20 83       	st	Z, r18
    1742:	3c c0       	rjmp	.+120    	; 0x17bc <writePin+0x1e4>
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	88 31       	cpi	r24, 0x18	; 24
    1748:	c8 f1       	brcs	.+114    	; 0x17bc <writePin+0x1e4>
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	80 32       	cpi	r24, 0x20	; 32
    174e:	b0 f5       	brcc	.+108    	; 0x17bc <writePin+0x1e4>
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	c1 f4       	brne	.+48     	; 0x1786 <writePin+0x1ae>
    1756:	82 e3       	ldi	r24, 0x32	; 50
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	22 e3       	ldi	r18, 0x32	; 50
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	f9 01       	movw	r30, r18
    1760:	20 81       	ld	r18, Z
    1762:	62 2f       	mov	r22, r18
    1764:	29 81       	ldd	r18, Y+1	; 0x01
    1766:	22 2f       	mov	r18, r18
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	a9 01       	movw	r20, r18
    176c:	48 51       	subi	r20, 0x18	; 24
    176e:	51 09       	sbc	r21, r1
    1770:	21 e0       	ldi	r18, 0x01	; 1
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <writePin+0x1a2>
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	4a 95       	dec	r20
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <writePin+0x19e>
    177e:	26 2b       	or	r18, r22
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
    1784:	1b c0       	rjmp	.+54     	; 0x17bc <writePin+0x1e4>
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	88 23       	and	r24, r24
    178a:	c1 f4       	brne	.+48     	; 0x17bc <writePin+0x1e4>
    178c:	82 e3       	ldi	r24, 0x32	; 50
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	22 e3       	ldi	r18, 0x32	; 50
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	20 81       	ld	r18, Z
    1798:	62 2f       	mov	r22, r18
    179a:	29 81       	ldd	r18, Y+1	; 0x01
    179c:	22 2f       	mov	r18, r18
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	48 51       	subi	r20, 0x18	; 24
    17a4:	51 09       	sbc	r21, r1
    17a6:	21 e0       	ldi	r18, 0x01	; 1
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <writePin+0x1d8>
    17ac:	22 0f       	add	r18, r18
    17ae:	33 1f       	adc	r19, r19
    17b0:	4a 95       	dec	r20
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <writePin+0x1d4>
    17b4:	20 95       	com	r18
    17b6:	26 23       	and	r18, r22
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <writePins+0x6>
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <writePins+0x8>
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	6b 83       	std	Y+3, r22	; 0x03
    17d8:	4c 83       	std	Y+4, r20	; 0x04
	if(logic==HIGH)
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	61 f4       	brne	.+24     	; 0x17f8 <writePins+0x32>
		SETBits(*port,mask);
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	fc 01       	movw	r30, r24
    17e6:	90 81       	ld	r25, Z
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	29 2f       	mov	r18, r25
    17ec:	28 2b       	or	r18, r24
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	fc 01       	movw	r30, r24
    17f4:	20 83       	st	Z, r18
    17f6:	10 c0       	rjmp	.+32     	; 0x1818 <writePins+0x52>
	else if(logic==LOW)
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	88 23       	and	r24, r24
    17fc:	69 f4       	brne	.+26     	; 0x1818 <writePins+0x52>
		CLRBits(*port,mask);
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	fc 01       	movw	r30, r24
    1804:	80 81       	ld	r24, Z
    1806:	98 2f       	mov	r25, r24
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	80 95       	com	r24
    180c:	89 23       	and	r24, r25
    180e:	28 2f       	mov	r18, r24
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18
	else{}
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <pinsDirection>:
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	00 d0       	rcall	.+0      	; 0x182c <pinsDirection+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <pinsDirection+0x8>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	6b 83       	std	Y+3, r22	; 0x03
    1838:	4c 83       	std	Y+4, r20	; 0x04
	if(direction == OUTPUT)
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	61 f4       	brne	.+24     	; 0x1858 <pinsDirection+0x32>
		SETBits(*ddr,mask);
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	fc 01       	movw	r30, r24
    1846:	90 81       	ld	r25, Z
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	29 2f       	mov	r18, r25
    184c:	28 2b       	or	r18, r24
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	fc 01       	movw	r30, r24
    1854:	20 83       	st	Z, r18
    1856:	10 c0       	rjmp	.+32     	; 0x1878 <pinsDirection+0x52>
	else if(direction == INPUT)
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	88 23       	and	r24, r24
    185c:	69 f4       	brne	.+26     	; 0x1878 <pinsDirection+0x52>
		CLRBits(*ddr,mask);
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	fc 01       	movw	r30, r24
    1864:	80 81       	ld	r24, Z
    1866:	98 2f       	mov	r25, r24
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	80 95       	com	r24
    186c:	89 23       	and	r24, r25
    186e:	28 2f       	mov	r18, r24
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	fc 01       	movw	r30, r24
    1876:	20 83       	st	Z, r18
	else{}
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <SPI_Init>:
#include "SPI.h"
void SPI_Init(SPI_Mode spiMode){
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	1f 92       	push	r1
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
	switch(spiMode){
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	21 f0       	breq	.+8      	; 0x18a4 <SPI_Init+0x1e>
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <SPI_Init+0x1c>
    18a0:	45 c0       	rjmp	.+138    	; 0x192c <SPI_Init+0xa6>
    18a2:	7b c0       	rjmp	.+246    	; 0x199a <SPI_Init+0x114>
	case SPI_MASTER:
	SETBit(SPI_DDR,SPI_SS);
    18a4:	87 e3       	ldi	r24, 0x37	; 55
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	27 e3       	ldi	r18, 0x37	; 55
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	f9 01       	movw	r30, r18
    18ae:	20 81       	ld	r18, Z
    18b0:	20 61       	ori	r18, 0x10	; 16
    18b2:	fc 01       	movw	r30, r24
    18b4:	20 83       	st	Z, r18
	SETBit(SPI_DDR,SPI_SCK);
    18b6:	87 e3       	ldi	r24, 0x37	; 55
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	27 e3       	ldi	r18, 0x37	; 55
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	f9 01       	movw	r30, r18
    18c0:	20 81       	ld	r18, Z
    18c2:	20 68       	ori	r18, 0x80	; 128
    18c4:	fc 01       	movw	r30, r24
    18c6:	20 83       	st	Z, r18
	SETBit(SPI_DDR,SPI_MOSI);
    18c8:	87 e3       	ldi	r24, 0x37	; 55
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	27 e3       	ldi	r18, 0x37	; 55
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	f9 01       	movw	r30, r18
    18d2:	20 81       	ld	r18, Z
    18d4:	20 62       	ori	r18, 0x20	; 32
    18d6:	fc 01       	movw	r30, r24
    18d8:	20 83       	st	Z, r18
	CLRBit(SPI_DDR,SPI_MISO);
    18da:	87 e3       	ldi	r24, 0x37	; 55
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	27 e3       	ldi	r18, 0x37	; 55
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	f9 01       	movw	r30, r18
    18e4:	20 81       	ld	r18, Z
    18e6:	2f 7b       	andi	r18, 0xBF	; 191
    18e8:	fc 01       	movw	r30, r24
    18ea:	20 83       	st	Z, r18
	
		SETBit(SPCR,SPR0);
    18ec:	8d e2       	ldi	r24, 0x2D	; 45
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	2d e2       	ldi	r18, 0x2D	; 45
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	f9 01       	movw	r30, r18
    18f6:	20 81       	ld	r18, Z
    18f8:	21 60       	ori	r18, 0x01	; 1
    18fa:	fc 01       	movw	r30, r24
    18fc:	20 83       	st	Z, r18
		SETBit(SPCR,MSTR);
    18fe:	8d e2       	ldi	r24, 0x2D	; 45
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	2d e2       	ldi	r18, 0x2D	; 45
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	f9 01       	movw	r30, r18
    1908:	20 81       	ld	r18, Z
    190a:	20 61       	ori	r18, 0x10	; 16
    190c:	fc 01       	movw	r30, r24
    190e:	20 83       	st	Z, r18
		SETBit(SPCR,SPE);
    1910:	8d e2       	ldi	r24, 0x2D	; 45
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	2d e2       	ldi	r18, 0x2D	; 45
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	f9 01       	movw	r30, r18
    191a:	20 81       	ld	r18, Z
    191c:	20 64       	ori	r18, 0x40	; 64
    191e:	fc 01       	movw	r30, r24
    1920:	20 83       	st	Z, r18
	    writePin(PB4,HIGH);
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	8c e0       	ldi	r24, 0x0C	; 12
    1926:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <writePin>

	break;
    192a:	37 c0       	rjmp	.+110    	; 0x199a <SPI_Init+0x114>
	case SPI_SLAVE:
	CLRBit(SPI_DDR,SPI_SS);
    192c:	87 e3       	ldi	r24, 0x37	; 55
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	27 e3       	ldi	r18, 0x37	; 55
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	f9 01       	movw	r30, r18
    1936:	20 81       	ld	r18, Z
    1938:	2f 7e       	andi	r18, 0xEF	; 239
    193a:	fc 01       	movw	r30, r24
    193c:	20 83       	st	Z, r18
	CLRBit(SPI_DDR,SPI_SCK);
    193e:	87 e3       	ldi	r24, 0x37	; 55
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	27 e3       	ldi	r18, 0x37	; 55
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	f9 01       	movw	r30, r18
    1948:	20 81       	ld	r18, Z
    194a:	2f 77       	andi	r18, 0x7F	; 127
    194c:	fc 01       	movw	r30, r24
    194e:	20 83       	st	Z, r18
	CLRBit(SPI_DDR,SPI_MOSI);
    1950:	87 e3       	ldi	r24, 0x37	; 55
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	27 e3       	ldi	r18, 0x37	; 55
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	f9 01       	movw	r30, r18
    195a:	20 81       	ld	r18, Z
    195c:	2f 7d       	andi	r18, 0xDF	; 223
    195e:	fc 01       	movw	r30, r24
    1960:	20 83       	st	Z, r18
	SETBit(SPI_DDR,SPI_MISO);
    1962:	87 e3       	ldi	r24, 0x37	; 55
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	27 e3       	ldi	r18, 0x37	; 55
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	f9 01       	movw	r30, r18
    196c:	20 81       	ld	r18, Z
    196e:	20 64       	ori	r18, 0x40	; 64
    1970:	fc 01       	movw	r30, r24
    1972:	20 83       	st	Z, r18
	
		CLRBit(SPCR,MSTR);
    1974:	8d e2       	ldi	r24, 0x2D	; 45
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	2d e2       	ldi	r18, 0x2D	; 45
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	f9 01       	movw	r30, r18
    197e:	20 81       	ld	r18, Z
    1980:	2f 7e       	andi	r18, 0xEF	; 239
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18
		SETBit(SPCR,SPE);
    1986:	8d e2       	ldi	r24, 0x2D	; 45
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	2d e2       	ldi	r18, 0x2D	; 45
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	f9 01       	movw	r30, r18
    1990:	20 81       	ld	r18, Z
    1992:	20 64       	ori	r18, 0x40	; 64
    1994:	fc 01       	movw	r30, r24
    1996:	20 83       	st	Z, r18

	break;
    1998:	00 00       	nop
	}
}
    199a:	0f 90       	pop	r0
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <SPI_Transceive>:
u8 SPI_Transceive(u8 data){
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	1f 92       	push	r1
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	89 83       	std	Y+1, r24	; 0x01
		SPDR = data;
    19ae:	8f e2       	ldi	r24, 0x2F	; 47
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	29 81       	ldd	r18, Y+1	; 0x01
    19b4:	fc 01       	movw	r30, r24
    19b6:	20 83       	st	Z, r18
		while(!(SPSR & (1<<SPIF)));
    19b8:	00 00       	nop
    19ba:	8e e2       	ldi	r24, 0x2E	; 46
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	fc 01       	movw	r30, r24
    19c0:	80 81       	ld	r24, Z
    19c2:	88 23       	and	r24, r24
    19c4:	d4 f7       	brge	.-12     	; 0x19ba <SPI_Transceive+0x18>
		return SPDR;
    19c6:	8f e2       	ldi	r24, 0x2F	; 47
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	fc 01       	movw	r30, r24
    19cc:	80 81       	ld	r24, Z
}
    19ce:	0f 90       	pop	r0
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <__subsf3>:
    19d6:	50 58       	subi	r21, 0x80	; 128

000019d8 <__addsf3>:
    19d8:	bb 27       	eor	r27, r27
    19da:	aa 27       	eor	r26, r26
    19dc:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__addsf3x>
    19e0:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__fp_round>
    19e4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fp_pscA>
    19e8:	38 f0       	brcs	.+14     	; 0x19f8 <__addsf3+0x20>
    19ea:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__fp_pscB>
    19ee:	20 f0       	brcs	.+8      	; 0x19f8 <__addsf3+0x20>
    19f0:	39 f4       	brne	.+14     	; 0x1a00 <__addsf3+0x28>
    19f2:	9f 3f       	cpi	r25, 0xFF	; 255
    19f4:	19 f4       	brne	.+6      	; 0x19fc <__addsf3+0x24>
    19f6:	26 f4       	brtc	.+8      	; 0x1a00 <__addsf3+0x28>
    19f8:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__fp_nan>
    19fc:	0e f4       	brtc	.+2      	; 0x1a00 <__addsf3+0x28>
    19fe:	e0 95       	com	r30
    1a00:	e7 fb       	bst	r30, 7
    1a02:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__fp_inf>

00001a06 <__addsf3x>:
    1a06:	e9 2f       	mov	r30, r25
    1a08:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fp_split3>
    1a0c:	58 f3       	brcs	.-42     	; 0x19e4 <__addsf3+0xc>
    1a0e:	ba 17       	cp	r27, r26
    1a10:	62 07       	cpc	r22, r18
    1a12:	73 07       	cpc	r23, r19
    1a14:	84 07       	cpc	r24, r20
    1a16:	95 07       	cpc	r25, r21
    1a18:	20 f0       	brcs	.+8      	; 0x1a22 <__addsf3x+0x1c>
    1a1a:	79 f4       	brne	.+30     	; 0x1a3a <__addsf3x+0x34>
    1a1c:	a6 f5       	brtc	.+104    	; 0x1a86 <__addsf3x+0x80>
    1a1e:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_zero>
    1a22:	0e f4       	brtc	.+2      	; 0x1a26 <__addsf3x+0x20>
    1a24:	e0 95       	com	r30
    1a26:	0b 2e       	mov	r0, r27
    1a28:	ba 2f       	mov	r27, r26
    1a2a:	a0 2d       	mov	r26, r0
    1a2c:	0b 01       	movw	r0, r22
    1a2e:	b9 01       	movw	r22, r18
    1a30:	90 01       	movw	r18, r0
    1a32:	0c 01       	movw	r0, r24
    1a34:	ca 01       	movw	r24, r20
    1a36:	a0 01       	movw	r20, r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	ff 27       	eor	r31, r31
    1a3c:	59 1b       	sub	r21, r25
    1a3e:	99 f0       	breq	.+38     	; 0x1a66 <__addsf3x+0x60>
    1a40:	59 3f       	cpi	r21, 0xF9	; 249
    1a42:	50 f4       	brcc	.+20     	; 0x1a58 <__addsf3x+0x52>
    1a44:	50 3e       	cpi	r21, 0xE0	; 224
    1a46:	68 f1       	brcs	.+90     	; 0x1aa2 <__addsf3x+0x9c>
    1a48:	1a 16       	cp	r1, r26
    1a4a:	f0 40       	sbci	r31, 0x00	; 0
    1a4c:	a2 2f       	mov	r26, r18
    1a4e:	23 2f       	mov	r18, r19
    1a50:	34 2f       	mov	r19, r20
    1a52:	44 27       	eor	r20, r20
    1a54:	58 5f       	subi	r21, 0xF8	; 248
    1a56:	f3 cf       	rjmp	.-26     	; 0x1a3e <__addsf3x+0x38>
    1a58:	46 95       	lsr	r20
    1a5a:	37 95       	ror	r19
    1a5c:	27 95       	ror	r18
    1a5e:	a7 95       	ror	r26
    1a60:	f0 40       	sbci	r31, 0x00	; 0
    1a62:	53 95       	inc	r21
    1a64:	c9 f7       	brne	.-14     	; 0x1a58 <__addsf3x+0x52>
    1a66:	7e f4       	brtc	.+30     	; 0x1a86 <__addsf3x+0x80>
    1a68:	1f 16       	cp	r1, r31
    1a6a:	ba 0b       	sbc	r27, r26
    1a6c:	62 0b       	sbc	r22, r18
    1a6e:	73 0b       	sbc	r23, r19
    1a70:	84 0b       	sbc	r24, r20
    1a72:	ba f0       	brmi	.+46     	; 0x1aa2 <__addsf3x+0x9c>
    1a74:	91 50       	subi	r25, 0x01	; 1
    1a76:	a1 f0       	breq	.+40     	; 0x1aa0 <__addsf3x+0x9a>
    1a78:	ff 0f       	add	r31, r31
    1a7a:	bb 1f       	adc	r27, r27
    1a7c:	66 1f       	adc	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	c2 f7       	brpl	.-16     	; 0x1a74 <__addsf3x+0x6e>
    1a84:	0e c0       	rjmp	.+28     	; 0x1aa2 <__addsf3x+0x9c>
    1a86:	ba 0f       	add	r27, r26
    1a88:	62 1f       	adc	r22, r18
    1a8a:	73 1f       	adc	r23, r19
    1a8c:	84 1f       	adc	r24, r20
    1a8e:	48 f4       	brcc	.+18     	; 0x1aa2 <__addsf3x+0x9c>
    1a90:	87 95       	ror	r24
    1a92:	77 95       	ror	r23
    1a94:	67 95       	ror	r22
    1a96:	b7 95       	ror	r27
    1a98:	f7 95       	ror	r31
    1a9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a9c:	08 f0       	brcs	.+2      	; 0x1aa0 <__addsf3x+0x9a>
    1a9e:	b0 cf       	rjmp	.-160    	; 0x1a00 <__addsf3+0x28>
    1aa0:	93 95       	inc	r25
    1aa2:	88 0f       	add	r24, r24
    1aa4:	08 f0       	brcs	.+2      	; 0x1aa8 <__addsf3x+0xa2>
    1aa6:	99 27       	eor	r25, r25
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	97 95       	ror	r25
    1aac:	87 95       	ror	r24
    1aae:	08 95       	ret

00001ab0 <__cmpsf2>:
    1ab0:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_cmp>
    1ab4:	08 f4       	brcc	.+2      	; 0x1ab8 <__cmpsf2+0x8>
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	08 95       	ret

00001aba <__divsf3>:
    1aba:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__divsf3x>
    1abe:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__fp_round>
    1ac2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__fp_pscB>
    1ac6:	58 f0       	brcs	.+22     	; 0x1ade <__divsf3+0x24>
    1ac8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fp_pscA>
    1acc:	40 f0       	brcs	.+16     	; 0x1ade <__divsf3+0x24>
    1ace:	29 f4       	brne	.+10     	; 0x1ada <__divsf3+0x20>
    1ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad2:	29 f0       	breq	.+10     	; 0x1ade <__divsf3+0x24>
    1ad4:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__fp_inf>
    1ad8:	51 11       	cpse	r21, r1
    1ada:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_szero>
    1ade:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__fp_nan>

00001ae2 <__divsf3x>:
    1ae2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fp_split3>
    1ae6:	68 f3       	brcs	.-38     	; 0x1ac2 <__divsf3+0x8>

00001ae8 <__divsf3_pse>:
    1ae8:	99 23       	and	r25, r25
    1aea:	b1 f3       	breq	.-20     	; 0x1ad8 <__divsf3+0x1e>
    1aec:	55 23       	and	r21, r21
    1aee:	91 f3       	breq	.-28     	; 0x1ad4 <__divsf3+0x1a>
    1af0:	95 1b       	sub	r25, r21
    1af2:	55 0b       	sbc	r21, r21
    1af4:	bb 27       	eor	r27, r27
    1af6:	aa 27       	eor	r26, r26
    1af8:	62 17       	cp	r22, r18
    1afa:	73 07       	cpc	r23, r19
    1afc:	84 07       	cpc	r24, r20
    1afe:	38 f0       	brcs	.+14     	; 0x1b0e <__divsf3_pse+0x26>
    1b00:	9f 5f       	subi	r25, 0xFF	; 255
    1b02:	5f 4f       	sbci	r21, 0xFF	; 255
    1b04:	22 0f       	add	r18, r18
    1b06:	33 1f       	adc	r19, r19
    1b08:	44 1f       	adc	r20, r20
    1b0a:	aa 1f       	adc	r26, r26
    1b0c:	a9 f3       	breq	.-22     	; 0x1af8 <__divsf3_pse+0x10>
    1b0e:	35 d0       	rcall	.+106    	; 0x1b7a <__divsf3_pse+0x92>
    1b10:	0e 2e       	mov	r0, r30
    1b12:	3a f0       	brmi	.+14     	; 0x1b22 <__divsf3_pse+0x3a>
    1b14:	e0 e8       	ldi	r30, 0x80	; 128
    1b16:	32 d0       	rcall	.+100    	; 0x1b7c <__divsf3_pse+0x94>
    1b18:	91 50       	subi	r25, 0x01	; 1
    1b1a:	50 40       	sbci	r21, 0x00	; 0
    1b1c:	e6 95       	lsr	r30
    1b1e:	00 1c       	adc	r0, r0
    1b20:	ca f7       	brpl	.-14     	; 0x1b14 <__divsf3_pse+0x2c>
    1b22:	2b d0       	rcall	.+86     	; 0x1b7a <__divsf3_pse+0x92>
    1b24:	fe 2f       	mov	r31, r30
    1b26:	29 d0       	rcall	.+82     	; 0x1b7a <__divsf3_pse+0x92>
    1b28:	66 0f       	add	r22, r22
    1b2a:	77 1f       	adc	r23, r23
    1b2c:	88 1f       	adc	r24, r24
    1b2e:	bb 1f       	adc	r27, r27
    1b30:	26 17       	cp	r18, r22
    1b32:	37 07       	cpc	r19, r23
    1b34:	48 07       	cpc	r20, r24
    1b36:	ab 07       	cpc	r26, r27
    1b38:	b0 e8       	ldi	r27, 0x80	; 128
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <__divsf3_pse+0x56>
    1b3c:	bb 0b       	sbc	r27, r27
    1b3e:	80 2d       	mov	r24, r0
    1b40:	bf 01       	movw	r22, r30
    1b42:	ff 27       	eor	r31, r31
    1b44:	93 58       	subi	r25, 0x83	; 131
    1b46:	5f 4f       	sbci	r21, 0xFF	; 255
    1b48:	3a f0       	brmi	.+14     	; 0x1b58 <__divsf3_pse+0x70>
    1b4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b4c:	51 05       	cpc	r21, r1
    1b4e:	78 f0       	brcs	.+30     	; 0x1b6e <__divsf3_pse+0x86>
    1b50:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__fp_inf>
    1b54:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_szero>
    1b58:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5a:	e4 f3       	brlt	.-8      	; 0x1b54 <__divsf3_pse+0x6c>
    1b5c:	98 3e       	cpi	r25, 0xE8	; 232
    1b5e:	d4 f3       	brlt	.-12     	; 0x1b54 <__divsf3_pse+0x6c>
    1b60:	86 95       	lsr	r24
    1b62:	77 95       	ror	r23
    1b64:	67 95       	ror	r22
    1b66:	b7 95       	ror	r27
    1b68:	f7 95       	ror	r31
    1b6a:	9f 5f       	subi	r25, 0xFF	; 255
    1b6c:	c9 f7       	brne	.-14     	; 0x1b60 <__divsf3_pse+0x78>
    1b6e:	88 0f       	add	r24, r24
    1b70:	91 1d       	adc	r25, r1
    1b72:	96 95       	lsr	r25
    1b74:	87 95       	ror	r24
    1b76:	97 f9       	bld	r25, 7
    1b78:	08 95       	ret
    1b7a:	e1 e0       	ldi	r30, 0x01	; 1
    1b7c:	66 0f       	add	r22, r22
    1b7e:	77 1f       	adc	r23, r23
    1b80:	88 1f       	adc	r24, r24
    1b82:	bb 1f       	adc	r27, r27
    1b84:	62 17       	cp	r22, r18
    1b86:	73 07       	cpc	r23, r19
    1b88:	84 07       	cpc	r24, r20
    1b8a:	ba 07       	cpc	r27, r26
    1b8c:	20 f0       	brcs	.+8      	; 0x1b96 <__divsf3_pse+0xae>
    1b8e:	62 1b       	sub	r22, r18
    1b90:	73 0b       	sbc	r23, r19
    1b92:	84 0b       	sbc	r24, r20
    1b94:	ba 0b       	sbc	r27, r26
    1b96:	ee 1f       	adc	r30, r30
    1b98:	88 f7       	brcc	.-30     	; 0x1b7c <__divsf3_pse+0x94>
    1b9a:	e0 95       	com	r30
    1b9c:	08 95       	ret

00001b9e <__fixunssfsi>:
    1b9e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__fp_splitA>
    1ba2:	88 f0       	brcs	.+34     	; 0x1bc6 <__fixunssfsi+0x28>
    1ba4:	9f 57       	subi	r25, 0x7F	; 127
    1ba6:	98 f0       	brcs	.+38     	; 0x1bce <__fixunssfsi+0x30>
    1ba8:	b9 2f       	mov	r27, r25
    1baa:	99 27       	eor	r25, r25
    1bac:	b7 51       	subi	r27, 0x17	; 23
    1bae:	b0 f0       	brcs	.+44     	; 0x1bdc <__fixunssfsi+0x3e>
    1bb0:	e1 f0       	breq	.+56     	; 0x1bea <__fixunssfsi+0x4c>
    1bb2:	66 0f       	add	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	88 1f       	adc	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	1a f0       	brmi	.+6      	; 0x1bc2 <__fixunssfsi+0x24>
    1bbc:	ba 95       	dec	r27
    1bbe:	c9 f7       	brne	.-14     	; 0x1bb2 <__fixunssfsi+0x14>
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <__fixunssfsi+0x4c>
    1bc2:	b1 30       	cpi	r27, 0x01	; 1
    1bc4:	91 f0       	breq	.+36     	; 0x1bea <__fixunssfsi+0x4c>
    1bc6:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__fp_zero>
    1bca:	b1 e0       	ldi	r27, 0x01	; 1
    1bcc:	08 95       	ret
    1bce:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_zero>
    1bd2:	67 2f       	mov	r22, r23
    1bd4:	78 2f       	mov	r23, r24
    1bd6:	88 27       	eor	r24, r24
    1bd8:	b8 5f       	subi	r27, 0xF8	; 248
    1bda:	39 f0       	breq	.+14     	; 0x1bea <__fixunssfsi+0x4c>
    1bdc:	b9 3f       	cpi	r27, 0xF9	; 249
    1bde:	cc f3       	brlt	.-14     	; 0x1bd2 <__fixunssfsi+0x34>
    1be0:	86 95       	lsr	r24
    1be2:	77 95       	ror	r23
    1be4:	67 95       	ror	r22
    1be6:	b3 95       	inc	r27
    1be8:	d9 f7       	brne	.-10     	; 0x1be0 <__fixunssfsi+0x42>
    1bea:	3e f4       	brtc	.+14     	; 0x1bfa <__fixunssfsi+0x5c>
    1bec:	90 95       	com	r25
    1bee:	80 95       	com	r24
    1bf0:	70 95       	com	r23
    1bf2:	61 95       	neg	r22
    1bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfa:	08 95       	ret

00001bfc <__fp_cmp>:
    1bfc:	99 0f       	add	r25, r25
    1bfe:	00 08       	sbc	r0, r0
    1c00:	55 0f       	add	r21, r21
    1c02:	aa 0b       	sbc	r26, r26
    1c04:	e0 e8       	ldi	r30, 0x80	; 128
    1c06:	fe ef       	ldi	r31, 0xFE	; 254
    1c08:	16 16       	cp	r1, r22
    1c0a:	17 06       	cpc	r1, r23
    1c0c:	e8 07       	cpc	r30, r24
    1c0e:	f9 07       	cpc	r31, r25
    1c10:	c0 f0       	brcs	.+48     	; 0x1c42 <__fp_cmp+0x46>
    1c12:	12 16       	cp	r1, r18
    1c14:	13 06       	cpc	r1, r19
    1c16:	e4 07       	cpc	r30, r20
    1c18:	f5 07       	cpc	r31, r21
    1c1a:	98 f0       	brcs	.+38     	; 0x1c42 <__fp_cmp+0x46>
    1c1c:	62 1b       	sub	r22, r18
    1c1e:	73 0b       	sbc	r23, r19
    1c20:	84 0b       	sbc	r24, r20
    1c22:	95 0b       	sbc	r25, r21
    1c24:	39 f4       	brne	.+14     	; 0x1c34 <__fp_cmp+0x38>
    1c26:	0a 26       	eor	r0, r26
    1c28:	61 f0       	breq	.+24     	; 0x1c42 <__fp_cmp+0x46>
    1c2a:	23 2b       	or	r18, r19
    1c2c:	24 2b       	or	r18, r20
    1c2e:	25 2b       	or	r18, r21
    1c30:	21 f4       	brne	.+8      	; 0x1c3a <__fp_cmp+0x3e>
    1c32:	08 95       	ret
    1c34:	0a 26       	eor	r0, r26
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <__fp_cmp+0x3e>
    1c38:	a1 40       	sbci	r26, 0x01	; 1
    1c3a:	a6 95       	lsr	r26
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	81 1d       	adc	r24, r1
    1c40:	81 1d       	adc	r24, r1
    1c42:	08 95       	ret

00001c44 <__fp_inf>:
    1c44:	97 f9       	bld	r25, 7
    1c46:	9f 67       	ori	r25, 0x7F	; 127
    1c48:	80 e8       	ldi	r24, 0x80	; 128
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	08 95       	ret

00001c50 <__fp_nan>:
    1c50:	9f ef       	ldi	r25, 0xFF	; 255
    1c52:	80 ec       	ldi	r24, 0xC0	; 192
    1c54:	08 95       	ret

00001c56 <__fp_pscA>:
    1c56:	00 24       	eor	r0, r0
    1c58:	0a 94       	dec	r0
    1c5a:	16 16       	cp	r1, r22
    1c5c:	17 06       	cpc	r1, r23
    1c5e:	18 06       	cpc	r1, r24
    1c60:	09 06       	cpc	r0, r25
    1c62:	08 95       	ret

00001c64 <__fp_pscB>:
    1c64:	00 24       	eor	r0, r0
    1c66:	0a 94       	dec	r0
    1c68:	12 16       	cp	r1, r18
    1c6a:	13 06       	cpc	r1, r19
    1c6c:	14 06       	cpc	r1, r20
    1c6e:	05 06       	cpc	r0, r21
    1c70:	08 95       	ret

00001c72 <__fp_round>:
    1c72:	09 2e       	mov	r0, r25
    1c74:	03 94       	inc	r0
    1c76:	00 0c       	add	r0, r0
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <__fp_round+0xc>
    1c7a:	88 23       	and	r24, r24
    1c7c:	52 f0       	brmi	.+20     	; 0x1c92 <__fp_round+0x20>
    1c7e:	bb 0f       	add	r27, r27
    1c80:	40 f4       	brcc	.+16     	; 0x1c92 <__fp_round+0x20>
    1c82:	bf 2b       	or	r27, r31
    1c84:	11 f4       	brne	.+4      	; 0x1c8a <__fp_round+0x18>
    1c86:	60 ff       	sbrs	r22, 0
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <__fp_round+0x20>
    1c8a:	6f 5f       	subi	r22, 0xFF	; 255
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c90:	9f 4f       	sbci	r25, 0xFF	; 255
    1c92:	08 95       	ret

00001c94 <__fp_split3>:
    1c94:	57 fd       	sbrc	r21, 7
    1c96:	90 58       	subi	r25, 0x80	; 128
    1c98:	44 0f       	add	r20, r20
    1c9a:	55 1f       	adc	r21, r21
    1c9c:	59 f0       	breq	.+22     	; 0x1cb4 <__fp_splitA+0x10>
    1c9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca0:	71 f0       	breq	.+28     	; 0x1cbe <__fp_splitA+0x1a>
    1ca2:	47 95       	ror	r20

00001ca4 <__fp_splitA>:
    1ca4:	88 0f       	add	r24, r24
    1ca6:	97 fb       	bst	r25, 7
    1ca8:	99 1f       	adc	r25, r25
    1caa:	61 f0       	breq	.+24     	; 0x1cc4 <__fp_splitA+0x20>
    1cac:	9f 3f       	cpi	r25, 0xFF	; 255
    1cae:	79 f0       	breq	.+30     	; 0x1cce <__fp_splitA+0x2a>
    1cb0:	87 95       	ror	r24
    1cb2:	08 95       	ret
    1cb4:	12 16       	cp	r1, r18
    1cb6:	13 06       	cpc	r1, r19
    1cb8:	14 06       	cpc	r1, r20
    1cba:	55 1f       	adc	r21, r21
    1cbc:	f2 cf       	rjmp	.-28     	; 0x1ca2 <__fp_split3+0xe>
    1cbe:	46 95       	lsr	r20
    1cc0:	f1 df       	rcall	.-30     	; 0x1ca4 <__fp_splitA>
    1cc2:	08 c0       	rjmp	.+16     	; 0x1cd4 <__fp_splitA+0x30>
    1cc4:	16 16       	cp	r1, r22
    1cc6:	17 06       	cpc	r1, r23
    1cc8:	18 06       	cpc	r1, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	f1 cf       	rjmp	.-30     	; 0x1cb0 <__fp_splitA+0xc>
    1cce:	86 95       	lsr	r24
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	61 05       	cpc	r22, r1
    1cd4:	08 94       	sec
    1cd6:	08 95       	ret

00001cd8 <__fp_zero>:
    1cd8:	e8 94       	clt

00001cda <__fp_szero>:
    1cda:	bb 27       	eor	r27, r27
    1cdc:	66 27       	eor	r22, r22
    1cde:	77 27       	eor	r23, r23
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	97 f9       	bld	r25, 7
    1ce4:	08 95       	ret

00001ce6 <__gesf2>:
    1ce6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_cmp>
    1cea:	08 f4       	brcc	.+2      	; 0x1cee <__gesf2+0x8>
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	08 95       	ret

00001cf0 <__mulsf3>:
    1cf0:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__mulsf3x>
    1cf4:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__fp_round>
    1cf8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__fp_pscA>
    1cfc:	38 f0       	brcs	.+14     	; 0x1d0c <__mulsf3+0x1c>
    1cfe:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__fp_pscB>
    1d02:	20 f0       	brcs	.+8      	; 0x1d0c <__mulsf3+0x1c>
    1d04:	95 23       	and	r25, r21
    1d06:	11 f0       	breq	.+4      	; 0x1d0c <__mulsf3+0x1c>
    1d08:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__fp_inf>
    1d0c:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__fp_nan>
    1d10:	11 24       	eor	r1, r1
    1d12:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_szero>

00001d16 <__mulsf3x>:
    1d16:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fp_split3>
    1d1a:	70 f3       	brcs	.-36     	; 0x1cf8 <__mulsf3+0x8>

00001d1c <__mulsf3_pse>:
    1d1c:	95 9f       	mul	r25, r21
    1d1e:	c1 f3       	breq	.-16     	; 0x1d10 <__mulsf3+0x20>
    1d20:	95 0f       	add	r25, r21
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	55 1f       	adc	r21, r21
    1d26:	62 9f       	mul	r22, r18
    1d28:	f0 01       	movw	r30, r0
    1d2a:	72 9f       	mul	r23, r18
    1d2c:	bb 27       	eor	r27, r27
    1d2e:	f0 0d       	add	r31, r0
    1d30:	b1 1d       	adc	r27, r1
    1d32:	63 9f       	mul	r22, r19
    1d34:	aa 27       	eor	r26, r26
    1d36:	f0 0d       	add	r31, r0
    1d38:	b1 1d       	adc	r27, r1
    1d3a:	aa 1f       	adc	r26, r26
    1d3c:	64 9f       	mul	r22, r20
    1d3e:	66 27       	eor	r22, r22
    1d40:	b0 0d       	add	r27, r0
    1d42:	a1 1d       	adc	r26, r1
    1d44:	66 1f       	adc	r22, r22
    1d46:	82 9f       	mul	r24, r18
    1d48:	22 27       	eor	r18, r18
    1d4a:	b0 0d       	add	r27, r0
    1d4c:	a1 1d       	adc	r26, r1
    1d4e:	62 1f       	adc	r22, r18
    1d50:	73 9f       	mul	r23, r19
    1d52:	b0 0d       	add	r27, r0
    1d54:	a1 1d       	adc	r26, r1
    1d56:	62 1f       	adc	r22, r18
    1d58:	83 9f       	mul	r24, r19
    1d5a:	a0 0d       	add	r26, r0
    1d5c:	61 1d       	adc	r22, r1
    1d5e:	22 1f       	adc	r18, r18
    1d60:	74 9f       	mul	r23, r20
    1d62:	33 27       	eor	r19, r19
    1d64:	a0 0d       	add	r26, r0
    1d66:	61 1d       	adc	r22, r1
    1d68:	23 1f       	adc	r18, r19
    1d6a:	84 9f       	mul	r24, r20
    1d6c:	60 0d       	add	r22, r0
    1d6e:	21 1d       	adc	r18, r1
    1d70:	82 2f       	mov	r24, r18
    1d72:	76 2f       	mov	r23, r22
    1d74:	6a 2f       	mov	r22, r26
    1d76:	11 24       	eor	r1, r1
    1d78:	9f 57       	subi	r25, 0x7F	; 127
    1d7a:	50 40       	sbci	r21, 0x00	; 0
    1d7c:	9a f0       	brmi	.+38     	; 0x1da4 <__mulsf3_pse+0x88>
    1d7e:	f1 f0       	breq	.+60     	; 0x1dbc <__mulsf3_pse+0xa0>
    1d80:	88 23       	and	r24, r24
    1d82:	4a f0       	brmi	.+18     	; 0x1d96 <__mulsf3_pse+0x7a>
    1d84:	ee 0f       	add	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	bb 1f       	adc	r27, r27
    1d8a:	66 1f       	adc	r22, r22
    1d8c:	77 1f       	adc	r23, r23
    1d8e:	88 1f       	adc	r24, r24
    1d90:	91 50       	subi	r25, 0x01	; 1
    1d92:	50 40       	sbci	r21, 0x00	; 0
    1d94:	a9 f7       	brne	.-22     	; 0x1d80 <__mulsf3_pse+0x64>
    1d96:	9e 3f       	cpi	r25, 0xFE	; 254
    1d98:	51 05       	cpc	r21, r1
    1d9a:	80 f0       	brcs	.+32     	; 0x1dbc <__mulsf3_pse+0xa0>
    1d9c:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__fp_inf>
    1da0:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__fp_szero>
    1da4:	5f 3f       	cpi	r21, 0xFF	; 255
    1da6:	e4 f3       	brlt	.-8      	; 0x1da0 <__mulsf3_pse+0x84>
    1da8:	98 3e       	cpi	r25, 0xE8	; 232
    1daa:	d4 f3       	brlt	.-12     	; 0x1da0 <__mulsf3_pse+0x84>
    1dac:	86 95       	lsr	r24
    1dae:	77 95       	ror	r23
    1db0:	67 95       	ror	r22
    1db2:	b7 95       	ror	r27
    1db4:	f7 95       	ror	r31
    1db6:	e7 95       	ror	r30
    1db8:	9f 5f       	subi	r25, 0xFF	; 255
    1dba:	c1 f7       	brne	.-16     	; 0x1dac <__mulsf3_pse+0x90>
    1dbc:	fe 2b       	or	r31, r30
    1dbe:	88 0f       	add	r24, r24
    1dc0:	91 1d       	adc	r25, r1
    1dc2:	96 95       	lsr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	97 f9       	bld	r25, 7
    1dc8:	08 95       	ret

00001dca <_exit>:
    1dca:	f8 94       	cli

00001dcc <__stop_program>:
    1dcc:	ff cf       	rjmp	.-2      	; 0x1dcc <__stop_program>
