
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000262  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f5  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000605  00000000  00000000  00000c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c8  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000233  00000000  00000000  00001c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include "includes.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	pinsDirection(&DDRB,0x11,INPUT);
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	61 e1       	ldi	r22, 0x11	; 17
  78:	87 e3       	ldi	r24, 0x37	; 55
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinsDirection>
	pinsDirection(&DDRC,0x84,OUTPUT);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	64 e8       	ldi	r22, 0x84	; 132
  84:	84 e3       	ldi	r24, 0x34	; 52
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinsDirection>
	writePins(&PORTC,0x84,LOW);
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	64 e8       	ldi	r22, 0x84	; 132
  90:	85 e3       	ldi	r24, 0x35	; 53
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 cf 00 	call	0x19e	; 0x19e <writePins>
	
	
    /* Replace with your application code */
    while (1) 
    {
	writePins(&PORTC,0x84,LOW);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	64 e8       	ldi	r22, 0x84	; 132
  9c:	85 e3       	ldi	r24, 0x35	; 53
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 cf 00 	call	0x19e	; 0x19e <writePins>
	if (!readPin(PB0))
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	0e 94 64 00 	call	0xc8	; 0xc8 <readPin>
  aa:	88 23       	and	r24, r24
  ac:	61 f4       	brne	.+24     	; 0xc6 <main+0x5a>
	{
		writePins(&PORTC,0x84,HIGH);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	64 e8       	ldi	r22, 0x84	; 132
  b2:	85 e3       	ldi	r24, 0x35	; 53
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 cf 00 	call	0x19e	; 0x19e <writePins>
		while(!readPin(PB4));
  ba:	00 00       	nop
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	0e 94 64 00 	call	0xc8	; 0xc8 <readPin>
  c2:	88 23       	and	r24, r24
  c4:	d9 f3       	breq	.-10     	; 0xbc <main+0x50>
	}
    }
  c6:	e8 cf       	rjmp	.-48     	; 0x98 <main+0x2c>

000000c8 <readPin>:
		else{}
	}
	else{}
}

u8 readPin(u8 pinNo){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <readPin+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 result=0;
  d4:	19 82       	std	Y+1, r1	; 0x01
	if((pinNo>=PA0)&&(pinNo<=PA7))
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	88 f4       	brcc	.+34     	; 0xfe <readPin+0x36>
		result=GETBit(PINA,pinNo);
  dc:	89 e3       	ldi	r24, 0x39	; 57
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	80 81       	ld	r24, Z
  e4:	88 2f       	mov	r24, r24
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	2a 81       	ldd	r18, Y+2	; 0x02
  ea:	22 2f       	mov	r18, r18
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <readPin+0x2c>
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	2a 95       	dec	r18
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <readPin+0x28>
  f8:	81 70       	andi	r24, 0x01	; 1
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	4a c0       	rjmp	.+148    	; 0x192 <readPin+0xca>
	else if((pinNo>=PB0)&&(pinNo<=PB7))
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	88 30       	cpi	r24, 0x08	; 8
 102:	b0 f0       	brcs	.+44     	; 0x130 <readPin+0x68>
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	98 f4       	brcc	.+38     	; 0x130 <readPin+0x68>
		result=GETBit(PINB,pinNo-8);
 10a:	86 e3       	ldi	r24, 0x36	; 54
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	80 81       	ld	r24, Z
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	2a 81       	ldd	r18, Y+2	; 0x02
 118:	22 2f       	mov	r18, r18
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	28 50       	subi	r18, 0x08	; 8
 11e:	31 09       	sbc	r19, r1
 120:	02 c0       	rjmp	.+4      	; 0x126 <readPin+0x5e>
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	2a 95       	dec	r18
 128:	e2 f7       	brpl	.-8      	; 0x122 <readPin+0x5a>
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	31 c0       	rjmp	.+98     	; 0x192 <readPin+0xca>
	else if((pinNo>=PC0)&&(pinNo<=PC7))
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	80 31       	cpi	r24, 0x10	; 16
 134:	b0 f0       	brcs	.+44     	; 0x162 <readPin+0x9a>
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	88 31       	cpi	r24, 0x18	; 24
 13a:	98 f4       	brcc	.+38     	; 0x162 <readPin+0x9a>
		result=GETBit(PINC,pinNo-16);
 13c:	83 e3       	ldi	r24, 0x33	; 51
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2a 81       	ldd	r18, Y+2	; 0x02
 14a:	22 2f       	mov	r18, r18
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	20 51       	subi	r18, 0x10	; 16
 150:	31 09       	sbc	r19, r1
 152:	02 c0       	rjmp	.+4      	; 0x158 <readPin+0x90>
 154:	95 95       	asr	r25
 156:	87 95       	ror	r24
 158:	2a 95       	dec	r18
 15a:	e2 f7       	brpl	.-8      	; 0x154 <readPin+0x8c>
 15c:	81 70       	andi	r24, 0x01	; 1
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	18 c0       	rjmp	.+48     	; 0x192 <readPin+0xca>
	else if((pinNo>=PD0)&&(pinNo<=PD7))
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	88 31       	cpi	r24, 0x18	; 24
 166:	a8 f0       	brcs	.+42     	; 0x192 <readPin+0xca>
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	80 32       	cpi	r24, 0x20	; 32
 16c:	90 f4       	brcc	.+36     	; 0x192 <readPin+0xca>
		result=GETBit(PIND,pinNo-24);
 16e:	80 e3       	ldi	r24, 0x30	; 48
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	2a 81       	ldd	r18, Y+2	; 0x02
 17c:	22 2f       	mov	r18, r18
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	28 51       	subi	r18, 0x18	; 24
 182:	31 09       	sbc	r19, r1
 184:	02 c0       	rjmp	.+4      	; 0x18a <readPin+0xc2>
 186:	95 95       	asr	r25
 188:	87 95       	ror	r24
 18a:	2a 95       	dec	r18
 18c:	e2 f7       	brpl	.-8      	; 0x186 <readPin+0xbe>
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	89 83       	std	Y+1, r24	; 0x01
	else{}
	return result;
 192:	89 81       	ldd	r24, Y+1	; 0x01
}
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <writePins+0x6>
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <writePins+0x8>
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	9a 83       	std	Y+2, r25	; 0x02
 1ac:	89 83       	std	Y+1, r24	; 0x01
 1ae:	6b 83       	std	Y+3, r22	; 0x03
 1b0:	4c 83       	std	Y+4, r20	; 0x04
	if(logic==HIGH)
 1b2:	8c 81       	ldd	r24, Y+4	; 0x04
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	61 f4       	brne	.+24     	; 0x1d0 <writePins+0x32>
		SETBits(*port,mask);
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
 1bc:	fc 01       	movw	r30, r24
 1be:	90 81       	ld	r25, Z
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	29 2f       	mov	r18, r25
 1c4:	28 2b       	or	r18, r24
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
 1ce:	10 c0       	rjmp	.+32     	; 0x1f0 <writePins+0x52>
	else if(logic==LOW)
 1d0:	8c 81       	ldd	r24, Y+4	; 0x04
 1d2:	88 23       	and	r24, r24
 1d4:	69 f4       	brne	.+26     	; 0x1f0 <writePins+0x52>
		CLRBits(*port,mask);
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	98 2f       	mov	r25, r24
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	80 95       	com	r24
 1e4:	89 23       	and	r24, r25
 1e6:	28 2f       	mov	r18, r24
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	9a 81       	ldd	r25, Y+2	; 0x02
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
	else{}
}
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <pinsDirection>:
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 d0       	rcall	.+0      	; 0x204 <pinsDirection+0x6>
 204:	00 d0       	rcall	.+0      	; 0x206 <pinsDirection+0x8>
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	9a 83       	std	Y+2, r25	; 0x02
 20c:	89 83       	std	Y+1, r24	; 0x01
 20e:	6b 83       	std	Y+3, r22	; 0x03
 210:	4c 83       	std	Y+4, r20	; 0x04
	if(direction == OUTPUT)
 212:	8c 81       	ldd	r24, Y+4	; 0x04
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	61 f4       	brne	.+24     	; 0x230 <pinsDirection+0x32>
		SETBits(*ddr,mask);
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	fc 01       	movw	r30, r24
 21e:	90 81       	ld	r25, Z
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	29 2f       	mov	r18, r25
 224:	28 2b       	or	r18, r24
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
 22e:	10 c0       	rjmp	.+32     	; 0x250 <pinsDirection+0x52>
	else if(direction == INPUT)
 230:	8c 81       	ldd	r24, Y+4	; 0x04
 232:	88 23       	and	r24, r24
 234:	69 f4       	brne	.+26     	; 0x250 <pinsDirection+0x52>
		CLRBits(*ddr,mask);
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
 23a:	fc 01       	movw	r30, r24
 23c:	80 81       	ld	r24, Z
 23e:	98 2f       	mov	r25, r24
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	80 95       	com	r24
 244:	89 23       	and	r24, r25
 246:	28 2f       	mov	r18, r24
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
	else{}
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
