
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000101c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000101c  00001090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001475  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008bc  00000000  00000000  00002699  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008df  00000000  00000000  00002f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00003834  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b1  00000000  00000000  00003a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d19  00000000  00000000  00003ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004bee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 41 00 	call	0x82	; 0x82 <main>
      7a:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include "includes.h"
#include "LCD.h"
#include <math.h>
int main(void)
{
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
      88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
      8a:	cd b7       	in	r28, 0x3d	; 61
      8c:	de b7       	in	r29, 0x3e	; 62
	LCD_init();	
      8e:	0e 94 24 01 	call	0x248	; 0x248 <LCD_init>
	
    /* Replace with your application code */
	 pinDirection(PB0,INPUT);
      92:	60 e0       	ldi	r22, 0x00	; 0
      94:	88 e0       	ldi	r24, 0x08	; 8
      96:	0e 94 8d 02 	call	0x51a	; 0x51a <pinDirection>
	 
	u32 count=0,i=0;
	u32 delay =1000,row=1;
	disp_strXY(1,1,"counter = ");
      9a:	40 e6       	ldi	r20, 0x60	; 96
      9c:	50 e0       	ldi	r21, 0x00	; 0
      9e:	61 e0       	ldi	r22, 0x01	; 1
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	0e 94 a8 01 	call	0x350	; 0x350 <disp_strXY>
	
    /* Replace with your application code */
	 pinDirection(PB0,INPUT);
	 
	u32 count=0,i=0;
	u32 delay =1000,row=1;
      a6:	41 2c       	mov	r4, r1
      a8:	51 2c       	mov	r5, r1
      aa:	32 01       	movw	r6, r4
      ac:	43 94       	inc	r4
	LCD_init();	
	
    /* Replace with your application code */
	 pinDirection(PB0,INPUT);
	 
	u32 count=0,i=0;
      ae:	81 2c       	mov	r8, r1
      b0:	91 2c       	mov	r9, r1
      b2:	54 01       	movw	r10, r8
	disp_strXY(1,1,"counter = ");
	//disp_intXY(2,3,2021);
    while (1) 
    {
		delay =1000;
		if (readPin(PB0))
      b4:	88 e0       	ldi	r24, 0x08	; 8
      b6:	0e 94 23 03 	call	0x646	; 0x646 <readPin>
      ba:	88 23       	and	r24, r24
      bc:	09 f4       	brne	.+2      	; 0xc0 <main+0x3e>
      be:	54 c0       	rjmp	.+168    	; 0x168 <main+0xe6>
		{
			row++;
      c0:	2f ef       	ldi	r18, 0xFF	; 255
      c2:	42 1a       	sub	r4, r18
      c4:	52 0a       	sbc	r5, r18
      c6:	62 0a       	sbc	r6, r18
      c8:	72 0a       	sbc	r7, r18
			delay=delay/(row*0.5);
      ca:	c3 01       	movw	r24, r6
      cc:	b2 01       	movw	r22, r4
      ce:	0e 94 27 04 	call	0x84e	; 0x84e <__floatunsisf>
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	40 e0       	ldi	r20, 0x00	; 0
      d8:	5f e3       	ldi	r21, 0x3F	; 63
      da:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3>
      de:	9b 01       	movw	r18, r22
      e0:	ac 01       	movw	r20, r24
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	70 e0       	ldi	r23, 0x00	; 0
      e6:	8a e7       	ldi	r24, 0x7A	; 122
      e8:	94 e4       	ldi	r25, 0x44	; 68
      ea:	0e 94 86 03 	call	0x70c	; 0x70c <__divsf3>
      ee:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__fixunssfsi>
      f2:	6b 01       	movw	r12, r22
      f4:	7c 01       	movw	r14, r24
			if (delay<100)
      f6:	84 e6       	ldi	r24, 0x64	; 100
      f8:	c8 16       	cp	r12, r24
      fa:	d1 04       	cpc	r13, r1
      fc:	e1 04       	cpc	r14, r1
      fe:	f1 04       	cpc	r15, r1
     100:	38 f4       	brcc	.+14     	; 0x110 <main+0x8e>
			{
				delay=100;
     102:	0f 2e       	mov	r0, r31
     104:	f4 e6       	ldi	r31, 0x64	; 100
     106:	cf 2e       	mov	r12, r31
     108:	d1 2c       	mov	r13, r1
     10a:	e1 2c       	mov	r14, r1
     10c:	f1 2c       	mov	r15, r1
     10e:	f0 2d       	mov	r31, r0
			}
			disp_strXY(1,11,"    ");
     110:	4b e6       	ldi	r20, 0x6B	; 107
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	6b e0       	ldi	r22, 0x0B	; 11
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 a8 01 	call	0x350	; 0x350 <disp_strXY>
			disp_intXY(1,11,count++);
     11c:	d5 01       	movw	r26, r10
     11e:	c4 01       	movw	r24, r8
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	a1 1d       	adc	r26, r1
     124:	b1 1d       	adc	r27, r1
     126:	89 83       	std	Y+1, r24	; 0x01
     128:	9a 83       	std	Y+2, r25	; 0x02
     12a:	ab 83       	std	Y+3, r26	; 0x03
     12c:	bc 83       	std	Y+4, r27	; 0x04
     12e:	a5 01       	movw	r20, r10
     130:	94 01       	movw	r18, r8
     132:	6b e0       	ldi	r22, 0x0B	; 11
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	0e 94 e6 01 	call	0x3cc	; 0x3cc <disp_intXY>
			for (i=0;i<=delay;i++)
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	dc 01       	movw	r26, r24
     140:	09 c0       	rjmp	.+18     	; 0x154 <main+0xd2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     142:	ef ec       	ldi	r30, 0xCF	; 207
     144:	f7 e0       	ldi	r31, 0x07	; 7
     146:	31 97       	sbiw	r30, 0x01	; 1
     148:	f1 f7       	brne	.-4      	; 0x146 <main+0xc4>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0xca>
     14c:	00 00       	nop
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	a1 1d       	adc	r26, r1
     152:	b1 1d       	adc	r27, r1
     154:	c8 16       	cp	r12, r24
     156:	d9 06       	cpc	r13, r25
     158:	ea 06       	cpc	r14, r26
     15a:	fb 06       	cpc	r15, r27
     15c:	90 f7       	brcc	.-28     	; 0x142 <main+0xc0>
			if (delay<100)
			{
				delay=100;
			}
			disp_strXY(1,11,"    ");
			disp_intXY(1,11,count++);
     15e:	89 80       	ldd	r8, Y+1	; 0x01
     160:	9a 80       	ldd	r9, Y+2	; 0x02
     162:	ab 80       	ldd	r10, Y+3	; 0x03
     164:	bc 80       	ldd	r11, Y+4	; 0x04
     166:	a6 cf       	rjmp	.-180    	; 0xb4 <main+0x32>
			
		}
		else
		{
			delay =1000;
			disp_strXY(1,11,"    ");
     168:	4b e6       	ldi	r20, 0x6B	; 107
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	6b e0       	ldi	r22, 0x0B	; 11
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 a8 01 	call	0x350	; 0x350 <disp_strXY>
			disp_intXY(1,11,count++);
     174:	75 01       	movw	r14, r10
     176:	64 01       	movw	r12, r8
     178:	ff ef       	ldi	r31, 0xFF	; 255
     17a:	cf 1a       	sub	r12, r31
     17c:	df 0a       	sbc	r13, r31
     17e:	ef 0a       	sbc	r14, r31
     180:	ff 0a       	sbc	r15, r31
     182:	a5 01       	movw	r20, r10
     184:	94 01       	movw	r18, r8
     186:	6b e0       	ldi	r22, 0x0B	; 11
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <disp_intXY>
			for (i=0;i<=delay;i++)
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	dc 01       	movw	r26, r24
     194:	09 c0       	rjmp	.+18     	; 0x1a8 <main+0x126>
     196:	ef ec       	ldi	r30, 0xCF	; 207
     198:	f7 e0       	ldi	r31, 0x07	; 7
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x118>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x11e>
     1a0:	00 00       	nop
     1a2:	01 96       	adiw	r24, 0x01	; 1
     1a4:	a1 1d       	adc	r26, r1
     1a6:	b1 1d       	adc	r27, r1
     1a8:	89 3e       	cpi	r24, 0xE9	; 233
     1aa:	f3 e0       	ldi	r31, 0x03	; 3
     1ac:	9f 07       	cpc	r25, r31
     1ae:	a1 05       	cpc	r26, r1
     1b0:	b1 05       	cpc	r27, r1
     1b2:	88 f3       	brcs	.-30     	; 0x196 <main+0x114>
		}
		else
		{
			delay =1000;
			disp_strXY(1,11,"    ");
			disp_intXY(1,11,count++);
     1b4:	46 01       	movw	r8, r12
     1b6:	57 01       	movw	r10, r14
     1b8:	7d cf       	rjmp	.-262    	; 0xb4 <main+0x32>

000001ba <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	8b e0       	ldi	r24, 0x0B	; 11
     1be:	0e 94 f7 01 	call	0x3ee	; 0x3ee <writePin>
     1c2:	8a e6       	ldi	r24, 0x6A	; 106
     1c4:	8a 95       	dec	r24
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_latch+0xa>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_latch+0x10>
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	8b e0       	ldi	r24, 0x0B	; 11
     1ce:	0e 94 f7 01 	call	0x3ee	; 0x3ee <writePin>
     1d2:	8a e6       	ldi	r24, 0x6A	; 106
     1d4:	8a 95       	dec	r24
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_latch+0x1a>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_latch+0x20>
     1da:	08 95       	ret

000001dc <LCD_send_cmd>:
     1dc:	cf 93       	push	r28
     1de:	c8 2f       	mov	r28, r24
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	89 e0       	ldi	r24, 0x09	; 9
     1e4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <writePin>
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	60 ef       	ldi	r22, 0xF0	; 240
     1ec:	8b e3       	ldi	r24, 0x3B	; 59
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <writePins>
     1f4:	6c 2f       	mov	r22, r28
     1f6:	60 7f       	andi	r22, 0xF0	; 240
     1f8:	41 e0       	ldi	r20, 0x01	; 1
     1fa:	8b e3       	ldi	r24, 0x3B	; 59
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 68 03 	call	0x6d0	; 0x6d0 <writePins>
     202:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_latch>
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	60 ef       	ldi	r22, 0xF0	; 240
     20a:	8b e3       	ldi	r24, 0x3B	; 59
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <writePins>
     212:	80 e1       	ldi	r24, 0x10	; 16
     214:	c8 9f       	mul	r28, r24
     216:	b0 01       	movw	r22, r0
     218:	11 24       	eor	r1, r1
     21a:	41 e0       	ldi	r20, 0x01	; 1
     21c:	8b e3       	ldi	r24, 0x3B	; 59
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 68 03 	call	0x6d0	; 0x6d0 <writePins>
     224:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_latch>
     228:	8a e6       	ldi	r24, 0x6A	; 106
     22a:	8a 95       	dec	r24
     22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_send_cmd+0x4e>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_send_cmd+0x54>
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <LCD_CLEAR>:
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_send_cmd>
     23a:	8f e9       	ldi	r24, 0x9F	; 159
     23c:	9f e0       	ldi	r25, 0x0F	; 15
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <LCD_CLEAR+0xa>
     242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_CLEAR+0x10>
     244:	00 00       	nop
     246:	08 95       	ret

00000248 <LCD_init>:
     248:	41 e0       	ldi	r20, 0x01	; 1
     24a:	60 ef       	ldi	r22, 0xF0	; 240
     24c:	8a e3       	ldi	r24, 0x3A	; 58
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 77 03 	call	0x6ee	; 0x6ee <pinsDirection>
     254:	41 e0       	ldi	r20, 0x01	; 1
     256:	6e e0       	ldi	r22, 0x0E	; 14
     258:	87 e3       	ldi	r24, 0x37	; 55
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 77 03 	call	0x6ee	; 0x6ee <pinsDirection>
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	8a e0       	ldi	r24, 0x0A	; 10
     264:	0e 94 f7 01 	call	0x3ee	; 0x3ee <writePin>
     268:	2f ef       	ldi	r18, 0xFF	; 255
     26a:	89 ef       	ldi	r24, 0xF9	; 249
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	21 50       	subi	r18, 0x01	; 1
     270:	80 40       	sbci	r24, 0x00	; 0
     272:	90 40       	sbci	r25, 0x00	; 0
     274:	e1 f7       	brne	.-8      	; 0x26e <LCD_init+0x26>
     276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_init+0x30>
     278:	00 00       	nop
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_send_cmd>
     280:	2f ef       	ldi	r18, 0xFF	; 255
     282:	89 ef       	ldi	r24, 0xF9	; 249
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	21 50       	subi	r18, 0x01	; 1
     288:	80 40       	sbci	r24, 0x00	; 0
     28a:	90 40       	sbci	r25, 0x00	; 0
     28c:	e1 f7       	brne	.-8      	; 0x286 <LCD_init+0x3e>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_init+0x48>
     290:	00 00       	nop
     292:	86 e0       	ldi	r24, 0x06	; 6
     294:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_send_cmd>
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_send_cmd>
     29e:	80 e1       	ldi	r24, 0x10	; 16
     2a0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_send_cmd>
     2a4:	88 e2       	ldi	r24, 0x28	; 40
     2a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_send_cmd>
     2aa:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_CLEAR>
     2ae:	08 95       	ret

000002b0 <LCD_send_data>:
     2b0:	cf 93       	push	r28
     2b2:	c8 2f       	mov	r28, r24
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	89 e0       	ldi	r24, 0x09	; 9
     2b8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <writePin>
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	60 ef       	ldi	r22, 0xF0	; 240
     2c0:	8b e3       	ldi	r24, 0x3B	; 59
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <writePins>
     2c8:	6c 2f       	mov	r22, r28
     2ca:	60 7f       	andi	r22, 0xF0	; 240
     2cc:	41 e0       	ldi	r20, 0x01	; 1
     2ce:	8b e3       	ldi	r24, 0x3B	; 59
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <writePins>
     2d6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_latch>
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	60 ef       	ldi	r22, 0xF0	; 240
     2de:	8b e3       	ldi	r24, 0x3B	; 59
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <writePins>
     2e6:	80 e1       	ldi	r24, 0x10	; 16
     2e8:	c8 9f       	mul	r28, r24
     2ea:	b0 01       	movw	r22, r0
     2ec:	11 24       	eor	r1, r1
     2ee:	41 e0       	ldi	r20, 0x01	; 1
     2f0:	8b e3       	ldi	r24, 0x3B	; 59
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <writePins>
     2f8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_latch>
     2fc:	8a e6       	ldi	r24, 0x6A	; 106
     2fe:	8a 95       	dec	r24
     300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_send_data+0x4e>
     302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_send_data+0x54>
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <disp_char>:
     308:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_send_data>
     30c:	08 95       	ret

0000030e <disp_str>:
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	8c 01       	movw	r16, r24
     316:	c0 e0       	ldi	r28, 0x00	; 0
     318:	03 c0       	rjmp	.+6      	; 0x320 <disp_str+0x12>
     31a:	0e 94 84 01 	call	0x308	; 0x308 <disp_char>
     31e:	cf 5f       	subi	r28, 0xFF	; 255
     320:	f8 01       	movw	r30, r16
     322:	ec 0f       	add	r30, r28
     324:	f1 1d       	adc	r31, r1
     326:	80 81       	ld	r24, Z
     328:	81 11       	cpse	r24, r1
     32a:	f7 cf       	rjmp	.-18     	; 0x31a <disp_str+0xc>
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	08 95       	ret

00000334 <LCD_GOTXY>:
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	29 f4       	brne	.+10     	; 0x342 <LCD_GOTXY+0xe>
     338:	8f e7       	ldi	r24, 0x7F	; 127
     33a:	86 0f       	add	r24, r22
     33c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_send_cmd>
     340:	08 95       	ret
     342:	82 30       	cpi	r24, 0x02	; 2
     344:	21 f4       	brne	.+8      	; 0x34e <LCD_GOTXY+0x1a>
     346:	8f eb       	ldi	r24, 0xBF	; 191
     348:	86 0f       	add	r24, r22
     34a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_send_cmd>
     34e:	08 95       	ret

00000350 <disp_strXY>:
	else{}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
     356:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_GOTXY>
	disp_str(str);
     35a:	ce 01       	movw	r24, r28
     35c:	0e 94 87 01 	call	0x30e	; 0x30e <disp_str>
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <disp_int>:


void disp_int(u32 intvalue)
{
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	2b 97       	sbiw	r28, 0x0b	; 11
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
	u8 string[11]={0};
     37e:	8e 01       	movw	r16, r28
     380:	0f 5f       	subi	r16, 0xFF	; 255
     382:	1f 4f       	sbci	r17, 0xFF	; 255
     384:	2b e0       	ldi	r18, 0x0B	; 11
     386:	f8 01       	movw	r30, r16
     388:	11 92       	st	Z+, r1
     38a:	2a 95       	dec	r18
     38c:	e9 f7       	brne	.-6      	; 0x388 <disp_int+0x22>
		sprintf(string,"%u",intvalue);
     38e:	9f 93       	push	r25
     390:	8f 93       	push	r24
     392:	7f 93       	push	r23
     394:	6f 93       	push	r22
     396:	80 e7       	ldi	r24, 0x70	; 112
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	9f 93       	push	r25
     39c:	8f 93       	push	r24
     39e:	1f 93       	push	r17
     3a0:	0f 93       	push	r16
     3a2:	0e 94 22 05 	call	0xa44	; 0xa44 <sprintf>
		disp_str(string);
     3a6:	c8 01       	movw	r24, r16
     3a8:	0e 94 87 01 	call	0x30e	; 0x30e <disp_str>
}
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	2b 96       	adiw	r28, 0x0b	; 11
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	08 95       	ret

000003cc <disp_intXY>:
void disp_intXY(u8 row,u8 col,u32 intvalue)
{
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	69 01       	movw	r12, r18
     3d6:	7a 01       	movw	r14, r20
	LCD_GOTXY(row,col);
     3d8:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_GOTXY>
	disp_int(intvalue);
     3dc:	c7 01       	movw	r24, r14
     3de:	b6 01       	movw	r22, r12
     3e0:	0e 94 b3 01 	call	0x366	; 0x366 <disp_int>
}
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <writePin>:
 */ 
#include "includes.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
	if((pinNo>=PA0)&&(pinNo<=PA7)){
     3ee:	88 30       	cpi	r24, 0x08	; 8
     3f0:	f8 f4       	brcc	.+62     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		if(logic==HIGH)
     3f2:	61 30       	cpi	r22, 0x01	; 1
     3f4:	69 f4       	brne	.+26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			SETBit(PORTA,pinNo);
     3f6:	4b b3       	in	r20, 0x1b	; 27
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	b9 01       	movw	r22, r18
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	66 0f       	add	r22, r22
     402:	77 1f       	adc	r23, r23
     404:	8a 95       	dec	r24
     406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	cb 01       	movw	r24, r22
     40a:	84 2b       	or	r24, r20
     40c:	8b bb       	out	0x1b, r24	; 27
     40e:	08 95       	ret
		else if(logic==LOW)
     410:	61 11       	cpse	r22, r1
     412:	82 c0       	rjmp	.+260    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
			CLRBit(PORTA,pinNo);
     414:	4b b3       	in	r20, 0x1b	; 27
     416:	21 e0       	ldi	r18, 0x01	; 1
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	b9 01       	movw	r22, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41e:	66 0f       	add	r22, r22
     420:	77 1f       	adc	r23, r23
     422:	8a 95       	dec	r24
     424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	cb 01       	movw	r24, r22
     428:	80 95       	com	r24
     42a:	84 23       	and	r24, r20
     42c:	8b bb       	out	0x1b, r24	; 27
     42e:	08 95       	ret
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
     430:	98 ef       	ldi	r25, 0xF8	; 248
     432:	98 0f       	add	r25, r24
     434:	98 30       	cpi	r25, 0x08	; 8
     436:	18 f5       	brcc	.+70     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		if(logic==HIGH)
     438:	61 30       	cpi	r22, 0x01	; 1
     43a:	79 f4       	brne	.+30     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			SETBit(PORTB,(pinNo-8));
     43c:	48 b3       	in	r20, 0x18	; 24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	08 97       	sbiw	r24, 0x08	; 8
     442:	21 e0       	ldi	r18, 0x01	; 1
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	b9 01       	movw	r22, r18
     448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	66 0f       	add	r22, r22
     44c:	77 1f       	adc	r23, r23
     44e:	8a 95       	dec	r24
     450:	e2 f7       	brpl	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     452:	cb 01       	movw	r24, r22
     454:	84 2b       	or	r24, r20
     456:	88 bb       	out	0x18, r24	; 24
     458:	08 95       	ret
		else if(logic==LOW)
     45a:	61 11       	cpse	r22, r1
     45c:	5d c0       	rjmp	.+186    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
			CLRBit(PORTB,(pinNo-8));
     45e:	48 b3       	in	r20, 0x18	; 24
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	08 97       	sbiw	r24, 0x08	; 8
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	b9 01       	movw	r22, r18
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46c:	66 0f       	add	r22, r22
     46e:	77 1f       	adc	r23, r23
     470:	8a 95       	dec	r24
     472:	e2 f7       	brpl	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     474:	cb 01       	movw	r24, r22
     476:	80 95       	com	r24
     478:	84 23       	and	r24, r20
     47a:	88 bb       	out	0x18, r24	; 24
     47c:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
     47e:	90 ef       	ldi	r25, 0xF0	; 240
     480:	98 0f       	add	r25, r24
     482:	98 30       	cpi	r25, 0x08	; 8
     484:	18 f5       	brcc	.+70     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		if(logic==HIGH)
     486:	61 30       	cpi	r22, 0x01	; 1
     488:	79 f4       	brne	.+30     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			SETBit(PORTC,(pinNo-16));
     48a:	45 b3       	in	r20, 0x15	; 21
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	40 97       	sbiw	r24, 0x10	; 16
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	b9 01       	movw	r22, r18
     496:	02 c0       	rjmp	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     498:	66 0f       	add	r22, r22
     49a:	77 1f       	adc	r23, r23
     49c:	8a 95       	dec	r24
     49e:	e2 f7       	brpl	.-8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     4a0:	cb 01       	movw	r24, r22
     4a2:	84 2b       	or	r24, r20
     4a4:	85 bb       	out	0x15, r24	; 21
     4a6:	08 95       	ret
		else if(logic==LOW)
     4a8:	61 11       	cpse	r22, r1
     4aa:	36 c0       	rjmp	.+108    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
			CLRBit(PORTC,(pinNo-16));
     4ac:	45 b3       	in	r20, 0x15	; 21
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	40 97       	sbiw	r24, 0x10	; 16
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	b9 01       	movw	r22, r18
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4ba:	66 0f       	add	r22, r22
     4bc:	77 1f       	adc	r23, r23
     4be:	8a 95       	dec	r24
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4c2:	cb 01       	movw	r24, r22
     4c4:	80 95       	com	r24
     4c6:	84 23       	and	r24, r20
     4c8:	85 bb       	out	0x15, r24	; 21
     4ca:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
     4cc:	98 ee       	ldi	r25, 0xE8	; 232
     4ce:	98 0f       	add	r25, r24
     4d0:	98 30       	cpi	r25, 0x08	; 8
     4d2:	10 f5       	brcc	.+68     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
		if(logic==HIGH)
     4d4:	61 30       	cpi	r22, 0x01	; 1
     4d6:	79 f4       	brne	.+30     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
			SETBit(PORTD,(pinNo-24));
     4d8:	42 b3       	in	r20, 0x12	; 18
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	48 97       	sbiw	r24, 0x18	; 24
     4de:	21 e0       	ldi	r18, 0x01	; 1
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	b9 01       	movw	r22, r18
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4e6:	66 0f       	add	r22, r22
     4e8:	77 1f       	adc	r23, r23
     4ea:	8a 95       	dec	r24
     4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4ee:	cb 01       	movw	r24, r22
     4f0:	84 2b       	or	r24, r20
     4f2:	82 bb       	out	0x12, r24	; 18
     4f4:	08 95       	ret
		else if(logic==LOW)
     4f6:	61 11       	cpse	r22, r1
     4f8:	0f c0       	rjmp	.+30     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
			CLRBit(PORTD,(pinNo-24));
     4fa:	42 b3       	in	r20, 0x12	; 18
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	48 97       	sbiw	r24, 0x18	; 24
     500:	21 e0       	ldi	r18, 0x01	; 1
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	b9 01       	movw	r22, r18
     506:	02 c0       	rjmp	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     508:	66 0f       	add	r22, r22
     50a:	77 1f       	adc	r23, r23
     50c:	8a 95       	dec	r24
     50e:	e2 f7       	brpl	.-8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     510:	cb 01       	movw	r24, r22
     512:	80 95       	com	r24
     514:	84 23       	and	r24, r20
     516:	82 bb       	out	0x12, r24	; 18
     518:	08 95       	ret

0000051a <pinDirection>:
		else{}
	}
	else{}
}
void pinDirection(u8 pinNo, u8 direction){
	if((pinNo >= PA0) && (pinNo <= PA7)){
     51a:	88 30       	cpi	r24, 0x08	; 8
     51c:	f8 f4       	brcc	.+62     	; 0x55c <pinDirection+0x42>
		if(direction == OUTPUT)
     51e:	61 30       	cpi	r22, 0x01	; 1
     520:	69 f4       	brne	.+26     	; 0x53c <pinDirection+0x22>
			SETBit(DDRA,pinNo);
     522:	4a b3       	in	r20, 0x1a	; 26
     524:	21 e0       	ldi	r18, 0x01	; 1
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	b9 01       	movw	r22, r18
     52a:	02 c0       	rjmp	.+4      	; 0x530 <pinDirection+0x16>
     52c:	66 0f       	add	r22, r22
     52e:	77 1f       	adc	r23, r23
     530:	8a 95       	dec	r24
     532:	e2 f7       	brpl	.-8      	; 0x52c <pinDirection+0x12>
     534:	cb 01       	movw	r24, r22
     536:	84 2b       	or	r24, r20
     538:	8a bb       	out	0x1a, r24	; 26
     53a:	08 95       	ret
		else if(direction == INPUT)
     53c:	61 11       	cpse	r22, r1
     53e:	82 c0       	rjmp	.+260    	; 0x644 <pinDirection+0x12a>
			CLRBit(DDRA,pinNo);
     540:	4a b3       	in	r20, 0x1a	; 26
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	b9 01       	movw	r22, r18
     548:	02 c0       	rjmp	.+4      	; 0x54e <pinDirection+0x34>
     54a:	66 0f       	add	r22, r22
     54c:	77 1f       	adc	r23, r23
     54e:	8a 95       	dec	r24
     550:	e2 f7       	brpl	.-8      	; 0x54a <pinDirection+0x30>
     552:	cb 01       	movw	r24, r22
     554:	80 95       	com	r24
     556:	84 23       	and	r24, r20
     558:	8a bb       	out	0x1a, r24	; 26
     55a:	08 95       	ret
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
     55c:	98 ef       	ldi	r25, 0xF8	; 248
     55e:	98 0f       	add	r25, r24
     560:	98 30       	cpi	r25, 0x08	; 8
     562:	18 f5       	brcc	.+70     	; 0x5aa <pinDirection+0x90>
		if(direction == OUTPUT)
     564:	61 30       	cpi	r22, 0x01	; 1
     566:	79 f4       	brne	.+30     	; 0x586 <pinDirection+0x6c>
			SETBit(DDRB,(pinNo-8));
     568:	47 b3       	in	r20, 0x17	; 23
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	08 97       	sbiw	r24, 0x08	; 8
     56e:	21 e0       	ldi	r18, 0x01	; 1
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	b9 01       	movw	r22, r18
     574:	02 c0       	rjmp	.+4      	; 0x57a <pinDirection+0x60>
     576:	66 0f       	add	r22, r22
     578:	77 1f       	adc	r23, r23
     57a:	8a 95       	dec	r24
     57c:	e2 f7       	brpl	.-8      	; 0x576 <pinDirection+0x5c>
     57e:	cb 01       	movw	r24, r22
     580:	84 2b       	or	r24, r20
     582:	87 bb       	out	0x17, r24	; 23
     584:	08 95       	ret
		else if(direction == LOW)
     586:	61 11       	cpse	r22, r1
     588:	5d c0       	rjmp	.+186    	; 0x644 <pinDirection+0x12a>
			CLRBit(DDRB,(pinNo-8));
     58a:	47 b3       	in	r20, 0x17	; 23
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	08 97       	sbiw	r24, 0x08	; 8
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	b9 01       	movw	r22, r18
     596:	02 c0       	rjmp	.+4      	; 0x59c <pinDirection+0x82>
     598:	66 0f       	add	r22, r22
     59a:	77 1f       	adc	r23, r23
     59c:	8a 95       	dec	r24
     59e:	e2 f7       	brpl	.-8      	; 0x598 <pinDirection+0x7e>
     5a0:	cb 01       	movw	r24, r22
     5a2:	80 95       	com	r24
     5a4:	84 23       	and	r24, r20
     5a6:	87 bb       	out	0x17, r24	; 23
     5a8:	08 95       	ret
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
     5aa:	90 ef       	ldi	r25, 0xF0	; 240
     5ac:	98 0f       	add	r25, r24
     5ae:	98 30       	cpi	r25, 0x08	; 8
     5b0:	18 f5       	brcc	.+70     	; 0x5f8 <pinDirection+0xde>
		if(direction == OUTPUT)
     5b2:	61 30       	cpi	r22, 0x01	; 1
     5b4:	79 f4       	brne	.+30     	; 0x5d4 <pinDirection+0xba>
			SETBit(DDRC,(pinNo-16));
     5b6:	44 b3       	in	r20, 0x14	; 20
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	40 97       	sbiw	r24, 0x10	; 16
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	b9 01       	movw	r22, r18
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <pinDirection+0xae>
     5c4:	66 0f       	add	r22, r22
     5c6:	77 1f       	adc	r23, r23
     5c8:	8a 95       	dec	r24
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <pinDirection+0xaa>
     5cc:	cb 01       	movw	r24, r22
     5ce:	84 2b       	or	r24, r20
     5d0:	84 bb       	out	0x14, r24	; 20
     5d2:	08 95       	ret
		else if(direction==INPUT)
     5d4:	61 11       	cpse	r22, r1
     5d6:	36 c0       	rjmp	.+108    	; 0x644 <pinDirection+0x12a>
			CLRBit(DDRC,(pinNo-16));
     5d8:	44 b3       	in	r20, 0x14	; 20
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	40 97       	sbiw	r24, 0x10	; 16
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	b9 01       	movw	r22, r18
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <pinDirection+0xd0>
     5e6:	66 0f       	add	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	8a 95       	dec	r24
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <pinDirection+0xcc>
     5ee:	cb 01       	movw	r24, r22
     5f0:	80 95       	com	r24
     5f2:	84 23       	and	r24, r20
     5f4:	84 bb       	out	0x14, r24	; 20
     5f6:	08 95       	ret
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
     5f8:	98 ee       	ldi	r25, 0xE8	; 232
     5fa:	98 0f       	add	r25, r24
     5fc:	98 30       	cpi	r25, 0x08	; 8
     5fe:	10 f5       	brcc	.+68     	; 0x644 <pinDirection+0x12a>
		if(direction == OUTPUT)
     600:	61 30       	cpi	r22, 0x01	; 1
     602:	79 f4       	brne	.+30     	; 0x622 <pinDirection+0x108>
			SETBit(DDRD,(pinNo-24));
     604:	41 b3       	in	r20, 0x11	; 17
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	48 97       	sbiw	r24, 0x18	; 24
     60a:	21 e0       	ldi	r18, 0x01	; 1
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	b9 01       	movw	r22, r18
     610:	02 c0       	rjmp	.+4      	; 0x616 <pinDirection+0xfc>
     612:	66 0f       	add	r22, r22
     614:	77 1f       	adc	r23, r23
     616:	8a 95       	dec	r24
     618:	e2 f7       	brpl	.-8      	; 0x612 <pinDirection+0xf8>
     61a:	cb 01       	movw	r24, r22
     61c:	84 2b       	or	r24, r20
     61e:	81 bb       	out	0x11, r24	; 17
     620:	08 95       	ret
		else if(direction == INPUT)
     622:	61 11       	cpse	r22, r1
     624:	0f c0       	rjmp	.+30     	; 0x644 <pinDirection+0x12a>
			CLRBit(DDRD,(pinNo-24));
     626:	41 b3       	in	r20, 0x11	; 17
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	48 97       	sbiw	r24, 0x18	; 24
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	b9 01       	movw	r22, r18
     632:	02 c0       	rjmp	.+4      	; 0x638 <pinDirection+0x11e>
     634:	66 0f       	add	r22, r22
     636:	77 1f       	adc	r23, r23
     638:	8a 95       	dec	r24
     63a:	e2 f7       	brpl	.-8      	; 0x634 <pinDirection+0x11a>
     63c:	cb 01       	movw	r24, r22
     63e:	80 95       	com	r24
     640:	84 23       	and	r24, r20
     642:	81 bb       	out	0x11, r24	; 17
     644:	08 95       	ret

00000646 <readPin>:
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PA0)&&(pinNo<=PA7))
     646:	88 30       	cpi	r24, 0x08	; 8
     648:	58 f4       	brcc	.+22     	; 0x660 <readPin+0x1a>
		result=GETBit(PINA,pinNo);
     64a:	29 b3       	in	r18, 0x19	; 25
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	a9 01       	movw	r20, r18
     650:	02 c0       	rjmp	.+4      	; 0x656 <readPin+0x10>
     652:	55 95       	asr	r21
     654:	47 95       	ror	r20
     656:	8a 95       	dec	r24
     658:	e2 f7       	brpl	.-8      	; 0x652 <readPin+0xc>
     65a:	ca 01       	movw	r24, r20
     65c:	81 70       	andi	r24, 0x01	; 1
     65e:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
     660:	98 ef       	ldi	r25, 0xF8	; 248
     662:	98 0f       	add	r25, r24
     664:	98 30       	cpi	r25, 0x08	; 8
     666:	70 f4       	brcc	.+28     	; 0x684 <readPin+0x3e>
		result=GETBit(PINB,pinNo-8);
     668:	96 b3       	in	r25, 0x16	; 22
     66a:	28 2f       	mov	r18, r24
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	28 50       	subi	r18, 0x08	; 8
     670:	31 09       	sbc	r19, r1
     672:	89 2f       	mov	r24, r25
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	02 c0       	rjmp	.+4      	; 0x67c <readPin+0x36>
     678:	95 95       	asr	r25
     67a:	87 95       	ror	r24
     67c:	2a 95       	dec	r18
     67e:	e2 f7       	brpl	.-8      	; 0x678 <readPin+0x32>
     680:	81 70       	andi	r24, 0x01	; 1
     682:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
     684:	90 ef       	ldi	r25, 0xF0	; 240
     686:	98 0f       	add	r25, r24
     688:	98 30       	cpi	r25, 0x08	; 8
     68a:	70 f4       	brcc	.+28     	; 0x6a8 <readPin+0x62>
		result=GETBit(PINC,pinNo-16);
     68c:	93 b3       	in	r25, 0x13	; 19
     68e:	28 2f       	mov	r18, r24
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	20 51       	subi	r18, 0x10	; 16
     694:	31 09       	sbc	r19, r1
     696:	89 2f       	mov	r24, r25
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <readPin+0x5a>
     69c:	95 95       	asr	r25
     69e:	87 95       	ror	r24
     6a0:	2a 95       	dec	r18
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <readPin+0x56>
     6a4:	81 70       	andi	r24, 0x01	; 1
     6a6:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
     6a8:	98 ee       	ldi	r25, 0xE8	; 232
     6aa:	98 0f       	add	r25, r24
     6ac:	98 30       	cpi	r25, 0x08	; 8
     6ae:	70 f4       	brcc	.+28     	; 0x6cc <readPin+0x86>
		result=GETBit(PIND,pinNo-24);
     6b0:	90 b3       	in	r25, 0x10	; 16
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	28 51       	subi	r18, 0x18	; 24
     6b8:	31 09       	sbc	r19, r1
     6ba:	89 2f       	mov	r24, r25
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <readPin+0x7e>
     6c0:	95 95       	asr	r25
     6c2:	87 95       	ror	r24
     6c4:	2a 95       	dec	r18
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <readPin+0x7a>
     6c8:	81 70       	andi	r24, 0x01	; 1
     6ca:	08 95       	ret
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
		result=GETBit(PINC,pinNo-16);
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,pinNo-24);
	else{}
	return result;
}
     6ce:	08 95       	ret

000006d0 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
     6d0:	41 30       	cpi	r20, 0x01	; 1
     6d2:	29 f4       	brne	.+10     	; 0x6de <writePins+0xe>
		SETBits(*port,mask);
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 81       	ld	r18, Z
     6d8:	62 2b       	or	r22, r18
     6da:	60 83       	st	Z, r22
     6dc:	08 95       	ret
	else if(logic==LOW)
     6de:	41 11       	cpse	r20, r1
     6e0:	05 c0       	rjmp	.+10     	; 0x6ec <writePins+0x1c>
		CLRBits(*port,mask);
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 81       	ld	r18, Z
     6e6:	60 95       	com	r22
     6e8:	62 23       	and	r22, r18
     6ea:	60 83       	st	Z, r22
     6ec:	08 95       	ret

000006ee <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
     6ee:	41 30       	cpi	r20, 0x01	; 1
     6f0:	29 f4       	brne	.+10     	; 0x6fc <pinsDirection+0xe>
		SETBits(*ddr,mask);
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 81       	ld	r18, Z
     6f6:	62 2b       	or	r22, r18
     6f8:	60 83       	st	Z, r22
     6fa:	08 95       	ret
	else if(direction == INPUT)
     6fc:	41 11       	cpse	r20, r1
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
     700:	fc 01       	movw	r30, r24
     702:	20 81       	ld	r18, Z
     704:	60 95       	com	r22
     706:	62 23       	and	r22, r18
     708:	60 83       	st	Z, r22
     70a:	08 95       	ret

0000070c <__divsf3>:
     70c:	0e 94 9a 03 	call	0x734	; 0x734 <__divsf3x>
     710:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_round>
     714:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fp_pscB>
     718:	58 f0       	brcs	.+22     	; 0x730 <__divsf3+0x24>
     71a:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_pscA>
     71e:	40 f0       	brcs	.+16     	; 0x730 <__divsf3+0x24>
     720:	29 f4       	brne	.+10     	; 0x72c <__divsf3+0x20>
     722:	5f 3f       	cpi	r21, 0xFF	; 255
     724:	29 f0       	breq	.+10     	; 0x730 <__divsf3+0x24>
     726:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_inf>
     72a:	51 11       	cpse	r21, r1
     72c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_szero>
     730:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__fp_nan>

00000734 <__divsf3x>:
     734:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_split3>
     738:	68 f3       	brcs	.-38     	; 0x714 <__divsf3+0x8>

0000073a <__divsf3_pse>:
     73a:	99 23       	and	r25, r25
     73c:	b1 f3       	breq	.-20     	; 0x72a <__divsf3+0x1e>
     73e:	55 23       	and	r21, r21
     740:	91 f3       	breq	.-28     	; 0x726 <__divsf3+0x1a>
     742:	95 1b       	sub	r25, r21
     744:	55 0b       	sbc	r21, r21
     746:	bb 27       	eor	r27, r27
     748:	aa 27       	eor	r26, r26
     74a:	62 17       	cp	r22, r18
     74c:	73 07       	cpc	r23, r19
     74e:	84 07       	cpc	r24, r20
     750:	38 f0       	brcs	.+14     	; 0x760 <__divsf3_pse+0x26>
     752:	9f 5f       	subi	r25, 0xFF	; 255
     754:	5f 4f       	sbci	r21, 0xFF	; 255
     756:	22 0f       	add	r18, r18
     758:	33 1f       	adc	r19, r19
     75a:	44 1f       	adc	r20, r20
     75c:	aa 1f       	adc	r26, r26
     75e:	a9 f3       	breq	.-22     	; 0x74a <__divsf3_pse+0x10>
     760:	35 d0       	rcall	.+106    	; 0x7cc <__divsf3_pse+0x92>
     762:	0e 2e       	mov	r0, r30
     764:	3a f0       	brmi	.+14     	; 0x774 <__divsf3_pse+0x3a>
     766:	e0 e8       	ldi	r30, 0x80	; 128
     768:	32 d0       	rcall	.+100    	; 0x7ce <__divsf3_pse+0x94>
     76a:	91 50       	subi	r25, 0x01	; 1
     76c:	50 40       	sbci	r21, 0x00	; 0
     76e:	e6 95       	lsr	r30
     770:	00 1c       	adc	r0, r0
     772:	ca f7       	brpl	.-14     	; 0x766 <__divsf3_pse+0x2c>
     774:	2b d0       	rcall	.+86     	; 0x7cc <__divsf3_pse+0x92>
     776:	fe 2f       	mov	r31, r30
     778:	29 d0       	rcall	.+82     	; 0x7cc <__divsf3_pse+0x92>
     77a:	66 0f       	add	r22, r22
     77c:	77 1f       	adc	r23, r23
     77e:	88 1f       	adc	r24, r24
     780:	bb 1f       	adc	r27, r27
     782:	26 17       	cp	r18, r22
     784:	37 07       	cpc	r19, r23
     786:	48 07       	cpc	r20, r24
     788:	ab 07       	cpc	r26, r27
     78a:	b0 e8       	ldi	r27, 0x80	; 128
     78c:	09 f0       	breq	.+2      	; 0x790 <__divsf3_pse+0x56>
     78e:	bb 0b       	sbc	r27, r27
     790:	80 2d       	mov	r24, r0
     792:	bf 01       	movw	r22, r30
     794:	ff 27       	eor	r31, r31
     796:	93 58       	subi	r25, 0x83	; 131
     798:	5f 4f       	sbci	r21, 0xFF	; 255
     79a:	3a f0       	brmi	.+14     	; 0x7aa <__divsf3_pse+0x70>
     79c:	9e 3f       	cpi	r25, 0xFE	; 254
     79e:	51 05       	cpc	r21, r1
     7a0:	78 f0       	brcs	.+30     	; 0x7c0 <__divsf3_pse+0x86>
     7a2:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_inf>
     7a6:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_szero>
     7aa:	5f 3f       	cpi	r21, 0xFF	; 255
     7ac:	e4 f3       	brlt	.-8      	; 0x7a6 <__divsf3_pse+0x6c>
     7ae:	98 3e       	cpi	r25, 0xE8	; 232
     7b0:	d4 f3       	brlt	.-12     	; 0x7a6 <__divsf3_pse+0x6c>
     7b2:	86 95       	lsr	r24
     7b4:	77 95       	ror	r23
     7b6:	67 95       	ror	r22
     7b8:	b7 95       	ror	r27
     7ba:	f7 95       	ror	r31
     7bc:	9f 5f       	subi	r25, 0xFF	; 255
     7be:	c9 f7       	brne	.-14     	; 0x7b2 <__divsf3_pse+0x78>
     7c0:	88 0f       	add	r24, r24
     7c2:	91 1d       	adc	r25, r1
     7c4:	96 95       	lsr	r25
     7c6:	87 95       	ror	r24
     7c8:	97 f9       	bld	r25, 7
     7ca:	08 95       	ret
     7cc:	e1 e0       	ldi	r30, 0x01	; 1
     7ce:	66 0f       	add	r22, r22
     7d0:	77 1f       	adc	r23, r23
     7d2:	88 1f       	adc	r24, r24
     7d4:	bb 1f       	adc	r27, r27
     7d6:	62 17       	cp	r22, r18
     7d8:	73 07       	cpc	r23, r19
     7da:	84 07       	cpc	r24, r20
     7dc:	ba 07       	cpc	r27, r26
     7de:	20 f0       	brcs	.+8      	; 0x7e8 <__divsf3_pse+0xae>
     7e0:	62 1b       	sub	r22, r18
     7e2:	73 0b       	sbc	r23, r19
     7e4:	84 0b       	sbc	r24, r20
     7e6:	ba 0b       	sbc	r27, r26
     7e8:	ee 1f       	adc	r30, r30
     7ea:	88 f7       	brcc	.-30     	; 0x7ce <__divsf3_pse+0x94>
     7ec:	e0 95       	com	r30
     7ee:	08 95       	ret

000007f0 <__fixunssfsi>:
     7f0:	0e 94 94 04 	call	0x928	; 0x928 <__fp_splitA>
     7f4:	88 f0       	brcs	.+34     	; 0x818 <__fixunssfsi+0x28>
     7f6:	9f 57       	subi	r25, 0x7F	; 127
     7f8:	98 f0       	brcs	.+38     	; 0x820 <__fixunssfsi+0x30>
     7fa:	b9 2f       	mov	r27, r25
     7fc:	99 27       	eor	r25, r25
     7fe:	b7 51       	subi	r27, 0x17	; 23
     800:	b0 f0       	brcs	.+44     	; 0x82e <__fixunssfsi+0x3e>
     802:	e1 f0       	breq	.+56     	; 0x83c <__fixunssfsi+0x4c>
     804:	66 0f       	add	r22, r22
     806:	77 1f       	adc	r23, r23
     808:	88 1f       	adc	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	1a f0       	brmi	.+6      	; 0x814 <__fixunssfsi+0x24>
     80e:	ba 95       	dec	r27
     810:	c9 f7       	brne	.-14     	; 0x804 <__fixunssfsi+0x14>
     812:	14 c0       	rjmp	.+40     	; 0x83c <__fixunssfsi+0x4c>
     814:	b1 30       	cpi	r27, 0x01	; 1
     816:	91 f0       	breq	.+36     	; 0x83c <__fixunssfsi+0x4c>
     818:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_zero>
     81c:	b1 e0       	ldi	r27, 0x01	; 1
     81e:	08 95       	ret
     820:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_zero>
     824:	67 2f       	mov	r22, r23
     826:	78 2f       	mov	r23, r24
     828:	88 27       	eor	r24, r24
     82a:	b8 5f       	subi	r27, 0xF8	; 248
     82c:	39 f0       	breq	.+14     	; 0x83c <__fixunssfsi+0x4c>
     82e:	b9 3f       	cpi	r27, 0xF9	; 249
     830:	cc f3       	brlt	.-14     	; 0x824 <__fixunssfsi+0x34>
     832:	86 95       	lsr	r24
     834:	77 95       	ror	r23
     836:	67 95       	ror	r22
     838:	b3 95       	inc	r27
     83a:	d9 f7       	brne	.-10     	; 0x832 <__fixunssfsi+0x42>
     83c:	3e f4       	brtc	.+14     	; 0x84c <__fixunssfsi+0x5c>
     83e:	90 95       	com	r25
     840:	80 95       	com	r24
     842:	70 95       	com	r23
     844:	61 95       	neg	r22
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	8f 4f       	sbci	r24, 0xFF	; 255
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	08 95       	ret

0000084e <__floatunsisf>:
     84e:	e8 94       	clt
     850:	09 c0       	rjmp	.+18     	; 0x864 <__stack+0x5>

00000852 <__floatsisf>:
     852:	97 fb       	bst	r25, 7
     854:	3e f4       	brtc	.+14     	; 0x864 <__stack+0x5>
     856:	90 95       	com	r25
     858:	80 95       	com	r24
     85a:	70 95       	com	r23
     85c:	61 95       	neg	r22
     85e:	7f 4f       	sbci	r23, 0xFF	; 255
     860:	8f 4f       	sbci	r24, 0xFF	; 255
     862:	9f 4f       	sbci	r25, 0xFF	; 255
     864:	99 23       	and	r25, r25
     866:	a9 f0       	breq	.+42     	; 0x892 <__stack+0x33>
     868:	f9 2f       	mov	r31, r25
     86a:	96 e9       	ldi	r25, 0x96	; 150
     86c:	bb 27       	eor	r27, r27
     86e:	93 95       	inc	r25
     870:	f6 95       	lsr	r31
     872:	87 95       	ror	r24
     874:	77 95       	ror	r23
     876:	67 95       	ror	r22
     878:	b7 95       	ror	r27
     87a:	f1 11       	cpse	r31, r1
     87c:	f8 cf       	rjmp	.-16     	; 0x86e <__stack+0xf>
     87e:	fa f4       	brpl	.+62     	; 0x8be <__stack+0x5f>
     880:	bb 0f       	add	r27, r27
     882:	11 f4       	brne	.+4      	; 0x888 <__stack+0x29>
     884:	60 ff       	sbrs	r22, 0
     886:	1b c0       	rjmp	.+54     	; 0x8be <__stack+0x5f>
     888:	6f 5f       	subi	r22, 0xFF	; 255
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	8f 4f       	sbci	r24, 0xFF	; 255
     88e:	9f 4f       	sbci	r25, 0xFF	; 255
     890:	16 c0       	rjmp	.+44     	; 0x8be <__stack+0x5f>
     892:	88 23       	and	r24, r24
     894:	11 f0       	breq	.+4      	; 0x89a <__stack+0x3b>
     896:	96 e9       	ldi	r25, 0x96	; 150
     898:	11 c0       	rjmp	.+34     	; 0x8bc <__stack+0x5d>
     89a:	77 23       	and	r23, r23
     89c:	21 f0       	breq	.+8      	; 0x8a6 <__stack+0x47>
     89e:	9e e8       	ldi	r25, 0x8E	; 142
     8a0:	87 2f       	mov	r24, r23
     8a2:	76 2f       	mov	r23, r22
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <__stack+0x51>
     8a6:	66 23       	and	r22, r22
     8a8:	71 f0       	breq	.+28     	; 0x8c6 <__stack+0x67>
     8aa:	96 e8       	ldi	r25, 0x86	; 134
     8ac:	86 2f       	mov	r24, r22
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	2a f0       	brmi	.+10     	; 0x8be <__stack+0x5f>
     8b4:	9a 95       	dec	r25
     8b6:	66 0f       	add	r22, r22
     8b8:	77 1f       	adc	r23, r23
     8ba:	88 1f       	adc	r24, r24
     8bc:	da f7       	brpl	.-10     	; 0x8b4 <__stack+0x55>
     8be:	88 0f       	add	r24, r24
     8c0:	96 95       	lsr	r25
     8c2:	87 95       	ror	r24
     8c4:	97 f9       	bld	r25, 7
     8c6:	08 95       	ret

000008c8 <__fp_inf>:
     8c8:	97 f9       	bld	r25, 7
     8ca:	9f 67       	ori	r25, 0x7F	; 127
     8cc:	80 e8       	ldi	r24, 0x80	; 128
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	08 95       	ret

000008d4 <__fp_nan>:
     8d4:	9f ef       	ldi	r25, 0xFF	; 255
     8d6:	80 ec       	ldi	r24, 0xC0	; 192
     8d8:	08 95       	ret

000008da <__fp_pscA>:
     8da:	00 24       	eor	r0, r0
     8dc:	0a 94       	dec	r0
     8de:	16 16       	cp	r1, r22
     8e0:	17 06       	cpc	r1, r23
     8e2:	18 06       	cpc	r1, r24
     8e4:	09 06       	cpc	r0, r25
     8e6:	08 95       	ret

000008e8 <__fp_pscB>:
     8e8:	00 24       	eor	r0, r0
     8ea:	0a 94       	dec	r0
     8ec:	12 16       	cp	r1, r18
     8ee:	13 06       	cpc	r1, r19
     8f0:	14 06       	cpc	r1, r20
     8f2:	05 06       	cpc	r0, r21
     8f4:	08 95       	ret

000008f6 <__fp_round>:
     8f6:	09 2e       	mov	r0, r25
     8f8:	03 94       	inc	r0
     8fa:	00 0c       	add	r0, r0
     8fc:	11 f4       	brne	.+4      	; 0x902 <__fp_round+0xc>
     8fe:	88 23       	and	r24, r24
     900:	52 f0       	brmi	.+20     	; 0x916 <__fp_round+0x20>
     902:	bb 0f       	add	r27, r27
     904:	40 f4       	brcc	.+16     	; 0x916 <__fp_round+0x20>
     906:	bf 2b       	or	r27, r31
     908:	11 f4       	brne	.+4      	; 0x90e <__fp_round+0x18>
     90a:	60 ff       	sbrs	r22, 0
     90c:	04 c0       	rjmp	.+8      	; 0x916 <__fp_round+0x20>
     90e:	6f 5f       	subi	r22, 0xFF	; 255
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	8f 4f       	sbci	r24, 0xFF	; 255
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	08 95       	ret

00000918 <__fp_split3>:
     918:	57 fd       	sbrc	r21, 7
     91a:	90 58       	subi	r25, 0x80	; 128
     91c:	44 0f       	add	r20, r20
     91e:	55 1f       	adc	r21, r21
     920:	59 f0       	breq	.+22     	; 0x938 <__fp_splitA+0x10>
     922:	5f 3f       	cpi	r21, 0xFF	; 255
     924:	71 f0       	breq	.+28     	; 0x942 <__fp_splitA+0x1a>
     926:	47 95       	ror	r20

00000928 <__fp_splitA>:
     928:	88 0f       	add	r24, r24
     92a:	97 fb       	bst	r25, 7
     92c:	99 1f       	adc	r25, r25
     92e:	61 f0       	breq	.+24     	; 0x948 <__fp_splitA+0x20>
     930:	9f 3f       	cpi	r25, 0xFF	; 255
     932:	79 f0       	breq	.+30     	; 0x952 <__fp_splitA+0x2a>
     934:	87 95       	ror	r24
     936:	08 95       	ret
     938:	12 16       	cp	r1, r18
     93a:	13 06       	cpc	r1, r19
     93c:	14 06       	cpc	r1, r20
     93e:	55 1f       	adc	r21, r21
     940:	f2 cf       	rjmp	.-28     	; 0x926 <__fp_split3+0xe>
     942:	46 95       	lsr	r20
     944:	f1 df       	rcall	.-30     	; 0x928 <__fp_splitA>
     946:	08 c0       	rjmp	.+16     	; 0x958 <__fp_splitA+0x30>
     948:	16 16       	cp	r1, r22
     94a:	17 06       	cpc	r1, r23
     94c:	18 06       	cpc	r1, r24
     94e:	99 1f       	adc	r25, r25
     950:	f1 cf       	rjmp	.-30     	; 0x934 <__fp_splitA+0xc>
     952:	86 95       	lsr	r24
     954:	71 05       	cpc	r23, r1
     956:	61 05       	cpc	r22, r1
     958:	08 94       	sec
     95a:	08 95       	ret

0000095c <__fp_zero>:
     95c:	e8 94       	clt

0000095e <__fp_szero>:
     95e:	bb 27       	eor	r27, r27
     960:	66 27       	eor	r22, r22
     962:	77 27       	eor	r23, r23
     964:	cb 01       	movw	r24, r22
     966:	97 f9       	bld	r25, 7
     968:	08 95       	ret

0000096a <__mulsf3>:
     96a:	0e 94 c8 04 	call	0x990	; 0x990 <__mulsf3x>
     96e:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_round>
     972:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_pscA>
     976:	38 f0       	brcs	.+14     	; 0x986 <__mulsf3+0x1c>
     978:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fp_pscB>
     97c:	20 f0       	brcs	.+8      	; 0x986 <__mulsf3+0x1c>
     97e:	95 23       	and	r25, r21
     980:	11 f0       	breq	.+4      	; 0x986 <__mulsf3+0x1c>
     982:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_inf>
     986:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__fp_nan>
     98a:	11 24       	eor	r1, r1
     98c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_szero>

00000990 <__mulsf3x>:
     990:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_split3>
     994:	70 f3       	brcs	.-36     	; 0x972 <__mulsf3+0x8>

00000996 <__mulsf3_pse>:
     996:	95 9f       	mul	r25, r21
     998:	c1 f3       	breq	.-16     	; 0x98a <__mulsf3+0x20>
     99a:	95 0f       	add	r25, r21
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	55 1f       	adc	r21, r21
     9a0:	62 9f       	mul	r22, r18
     9a2:	f0 01       	movw	r30, r0
     9a4:	72 9f       	mul	r23, r18
     9a6:	bb 27       	eor	r27, r27
     9a8:	f0 0d       	add	r31, r0
     9aa:	b1 1d       	adc	r27, r1
     9ac:	63 9f       	mul	r22, r19
     9ae:	aa 27       	eor	r26, r26
     9b0:	f0 0d       	add	r31, r0
     9b2:	b1 1d       	adc	r27, r1
     9b4:	aa 1f       	adc	r26, r26
     9b6:	64 9f       	mul	r22, r20
     9b8:	66 27       	eor	r22, r22
     9ba:	b0 0d       	add	r27, r0
     9bc:	a1 1d       	adc	r26, r1
     9be:	66 1f       	adc	r22, r22
     9c0:	82 9f       	mul	r24, r18
     9c2:	22 27       	eor	r18, r18
     9c4:	b0 0d       	add	r27, r0
     9c6:	a1 1d       	adc	r26, r1
     9c8:	62 1f       	adc	r22, r18
     9ca:	73 9f       	mul	r23, r19
     9cc:	b0 0d       	add	r27, r0
     9ce:	a1 1d       	adc	r26, r1
     9d0:	62 1f       	adc	r22, r18
     9d2:	83 9f       	mul	r24, r19
     9d4:	a0 0d       	add	r26, r0
     9d6:	61 1d       	adc	r22, r1
     9d8:	22 1f       	adc	r18, r18
     9da:	74 9f       	mul	r23, r20
     9dc:	33 27       	eor	r19, r19
     9de:	a0 0d       	add	r26, r0
     9e0:	61 1d       	adc	r22, r1
     9e2:	23 1f       	adc	r18, r19
     9e4:	84 9f       	mul	r24, r20
     9e6:	60 0d       	add	r22, r0
     9e8:	21 1d       	adc	r18, r1
     9ea:	82 2f       	mov	r24, r18
     9ec:	76 2f       	mov	r23, r22
     9ee:	6a 2f       	mov	r22, r26
     9f0:	11 24       	eor	r1, r1
     9f2:	9f 57       	subi	r25, 0x7F	; 127
     9f4:	50 40       	sbci	r21, 0x00	; 0
     9f6:	9a f0       	brmi	.+38     	; 0xa1e <__mulsf3_pse+0x88>
     9f8:	f1 f0       	breq	.+60     	; 0xa36 <__mulsf3_pse+0xa0>
     9fa:	88 23       	and	r24, r24
     9fc:	4a f0       	brmi	.+18     	; 0xa10 <__mulsf3_pse+0x7a>
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	bb 1f       	adc	r27, r27
     a04:	66 1f       	adc	r22, r22
     a06:	77 1f       	adc	r23, r23
     a08:	88 1f       	adc	r24, r24
     a0a:	91 50       	subi	r25, 0x01	; 1
     a0c:	50 40       	sbci	r21, 0x00	; 0
     a0e:	a9 f7       	brne	.-22     	; 0x9fa <__mulsf3_pse+0x64>
     a10:	9e 3f       	cpi	r25, 0xFE	; 254
     a12:	51 05       	cpc	r21, r1
     a14:	80 f0       	brcs	.+32     	; 0xa36 <__mulsf3_pse+0xa0>
     a16:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_inf>
     a1a:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_szero>
     a1e:	5f 3f       	cpi	r21, 0xFF	; 255
     a20:	e4 f3       	brlt	.-8      	; 0xa1a <__mulsf3_pse+0x84>
     a22:	98 3e       	cpi	r25, 0xE8	; 232
     a24:	d4 f3       	brlt	.-12     	; 0xa1a <__mulsf3_pse+0x84>
     a26:	86 95       	lsr	r24
     a28:	77 95       	ror	r23
     a2a:	67 95       	ror	r22
     a2c:	b7 95       	ror	r27
     a2e:	f7 95       	ror	r31
     a30:	e7 95       	ror	r30
     a32:	9f 5f       	subi	r25, 0xFF	; 255
     a34:	c1 f7       	brne	.-16     	; 0xa26 <__mulsf3_pse+0x90>
     a36:	fe 2b       	or	r31, r30
     a38:	88 0f       	add	r24, r24
     a3a:	91 1d       	adc	r25, r1
     a3c:	96 95       	lsr	r25
     a3e:	87 95       	ror	r24
     a40:	97 f9       	bld	r25, 7
     a42:	08 95       	ret

00000a44 <sprintf>:
     a44:	ae e0       	ldi	r26, 0x0E	; 14
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	e8 e2       	ldi	r30, 0x28	; 40
     a4a:	f5 e0       	ldi	r31, 0x05	; 5
     a4c:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__prologue_saves__+0x1c>
     a50:	0d 89       	ldd	r16, Y+21	; 0x15
     a52:	1e 89       	ldd	r17, Y+22	; 0x16
     a54:	86 e0       	ldi	r24, 0x06	; 6
     a56:	8c 83       	std	Y+4, r24	; 0x04
     a58:	1a 83       	std	Y+2, r17	; 0x02
     a5a:	09 83       	std	Y+1, r16	; 0x01
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	9f e7       	ldi	r25, 0x7F	; 127
     a60:	9e 83       	std	Y+6, r25	; 0x06
     a62:	8d 83       	std	Y+5, r24	; 0x05
     a64:	ae 01       	movw	r20, r28
     a66:	47 5e       	subi	r20, 0xE7	; 231
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	6f 89       	ldd	r22, Y+23	; 0x17
     a6c:	78 8d       	ldd	r23, Y+24	; 0x18
     a6e:	ce 01       	movw	r24, r28
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	0e 94 44 05 	call	0xa88	; 0xa88 <vfprintf>
     a76:	ef 81       	ldd	r30, Y+7	; 0x07
     a78:	f8 85       	ldd	r31, Y+8	; 0x08
     a7a:	e0 0f       	add	r30, r16
     a7c:	f1 1f       	adc	r31, r17
     a7e:	10 82       	st	Z, r1
     a80:	2e 96       	adiw	r28, 0x0e	; 14
     a82:	e4 e0       	ldi	r30, 0x04	; 4
     a84:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__epilogue_restores__+0x1c>

00000a88 <vfprintf>:
     a88:	ab e0       	ldi	r26, 0x0B	; 11
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	ea e4       	ldi	r30, 0x4A	; 74
     a8e:	f5 e0       	ldi	r31, 0x05	; 5
     a90:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__prologue_saves__>
     a94:	6c 01       	movw	r12, r24
     a96:	7b 01       	movw	r14, r22
     a98:	8a 01       	movw	r16, r20
     a9a:	fc 01       	movw	r30, r24
     a9c:	17 82       	std	Z+7, r1	; 0x07
     a9e:	16 82       	std	Z+6, r1	; 0x06
     aa0:	83 81       	ldd	r24, Z+3	; 0x03
     aa2:	81 ff       	sbrs	r24, 1
     aa4:	cc c1       	rjmp	.+920    	; 0xe3e <vfprintf+0x3b6>
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	3c 01       	movw	r6, r24
     aac:	f6 01       	movw	r30, r12
     aae:	93 81       	ldd	r25, Z+3	; 0x03
     ab0:	f7 01       	movw	r30, r14
     ab2:	93 fd       	sbrc	r25, 3
     ab4:	85 91       	lpm	r24, Z+
     ab6:	93 ff       	sbrs	r25, 3
     ab8:	81 91       	ld	r24, Z+
     aba:	7f 01       	movw	r14, r30
     abc:	88 23       	and	r24, r24
     abe:	09 f4       	brne	.+2      	; 0xac2 <vfprintf+0x3a>
     ac0:	ba c1       	rjmp	.+884    	; 0xe36 <vfprintf+0x3ae>
     ac2:	85 32       	cpi	r24, 0x25	; 37
     ac4:	39 f4       	brne	.+14     	; 0xad4 <vfprintf+0x4c>
     ac6:	93 fd       	sbrc	r25, 3
     ac8:	85 91       	lpm	r24, Z+
     aca:	93 ff       	sbrs	r25, 3
     acc:	81 91       	ld	r24, Z+
     ace:	7f 01       	movw	r14, r30
     ad0:	85 32       	cpi	r24, 0x25	; 37
     ad2:	29 f4       	brne	.+10     	; 0xade <vfprintf+0x56>
     ad4:	b6 01       	movw	r22, r12
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 3b 07 	call	0xe76	; 0xe76 <fputc>
     adc:	e7 cf       	rjmp	.-50     	; 0xaac <vfprintf+0x24>
     ade:	91 2c       	mov	r9, r1
     ae0:	21 2c       	mov	r2, r1
     ae2:	31 2c       	mov	r3, r1
     ae4:	ff e1       	ldi	r31, 0x1F	; 31
     ae6:	f3 15       	cp	r31, r3
     ae8:	d8 f0       	brcs	.+54     	; 0xb20 <vfprintf+0x98>
     aea:	8b 32       	cpi	r24, 0x2B	; 43
     aec:	79 f0       	breq	.+30     	; 0xb0c <vfprintf+0x84>
     aee:	38 f4       	brcc	.+14     	; 0xafe <vfprintf+0x76>
     af0:	80 32       	cpi	r24, 0x20	; 32
     af2:	79 f0       	breq	.+30     	; 0xb12 <vfprintf+0x8a>
     af4:	83 32       	cpi	r24, 0x23	; 35
     af6:	a1 f4       	brne	.+40     	; 0xb20 <vfprintf+0x98>
     af8:	23 2d       	mov	r18, r3
     afa:	20 61       	ori	r18, 0x10	; 16
     afc:	1d c0       	rjmp	.+58     	; 0xb38 <vfprintf+0xb0>
     afe:	8d 32       	cpi	r24, 0x2D	; 45
     b00:	61 f0       	breq	.+24     	; 0xb1a <vfprintf+0x92>
     b02:	80 33       	cpi	r24, 0x30	; 48
     b04:	69 f4       	brne	.+26     	; 0xb20 <vfprintf+0x98>
     b06:	23 2d       	mov	r18, r3
     b08:	21 60       	ori	r18, 0x01	; 1
     b0a:	16 c0       	rjmp	.+44     	; 0xb38 <vfprintf+0xb0>
     b0c:	83 2d       	mov	r24, r3
     b0e:	82 60       	ori	r24, 0x02	; 2
     b10:	38 2e       	mov	r3, r24
     b12:	e3 2d       	mov	r30, r3
     b14:	e4 60       	ori	r30, 0x04	; 4
     b16:	3e 2e       	mov	r3, r30
     b18:	2a c0       	rjmp	.+84     	; 0xb6e <vfprintf+0xe6>
     b1a:	f3 2d       	mov	r31, r3
     b1c:	f8 60       	ori	r31, 0x08	; 8
     b1e:	1d c0       	rjmp	.+58     	; 0xb5a <vfprintf+0xd2>
     b20:	37 fc       	sbrc	r3, 7
     b22:	2d c0       	rjmp	.+90     	; 0xb7e <vfprintf+0xf6>
     b24:	20 ed       	ldi	r18, 0xD0	; 208
     b26:	28 0f       	add	r18, r24
     b28:	2a 30       	cpi	r18, 0x0A	; 10
     b2a:	40 f0       	brcs	.+16     	; 0xb3c <vfprintf+0xb4>
     b2c:	8e 32       	cpi	r24, 0x2E	; 46
     b2e:	b9 f4       	brne	.+46     	; 0xb5e <vfprintf+0xd6>
     b30:	36 fc       	sbrc	r3, 6
     b32:	81 c1       	rjmp	.+770    	; 0xe36 <vfprintf+0x3ae>
     b34:	23 2d       	mov	r18, r3
     b36:	20 64       	ori	r18, 0x40	; 64
     b38:	32 2e       	mov	r3, r18
     b3a:	19 c0       	rjmp	.+50     	; 0xb6e <vfprintf+0xe6>
     b3c:	36 fe       	sbrs	r3, 6
     b3e:	06 c0       	rjmp	.+12     	; 0xb4c <vfprintf+0xc4>
     b40:	8a e0       	ldi	r24, 0x0A	; 10
     b42:	98 9e       	mul	r9, r24
     b44:	20 0d       	add	r18, r0
     b46:	11 24       	eor	r1, r1
     b48:	92 2e       	mov	r9, r18
     b4a:	11 c0       	rjmp	.+34     	; 0xb6e <vfprintf+0xe6>
     b4c:	ea e0       	ldi	r30, 0x0A	; 10
     b4e:	2e 9e       	mul	r2, r30
     b50:	20 0d       	add	r18, r0
     b52:	11 24       	eor	r1, r1
     b54:	22 2e       	mov	r2, r18
     b56:	f3 2d       	mov	r31, r3
     b58:	f0 62       	ori	r31, 0x20	; 32
     b5a:	3f 2e       	mov	r3, r31
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <vfprintf+0xe6>
     b5e:	8c 36       	cpi	r24, 0x6C	; 108
     b60:	21 f4       	brne	.+8      	; 0xb6a <vfprintf+0xe2>
     b62:	83 2d       	mov	r24, r3
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	38 2e       	mov	r3, r24
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <vfprintf+0xe6>
     b6a:	88 36       	cpi	r24, 0x68	; 104
     b6c:	41 f4       	brne	.+16     	; 0xb7e <vfprintf+0xf6>
     b6e:	f7 01       	movw	r30, r14
     b70:	93 fd       	sbrc	r25, 3
     b72:	85 91       	lpm	r24, Z+
     b74:	93 ff       	sbrs	r25, 3
     b76:	81 91       	ld	r24, Z+
     b78:	7f 01       	movw	r14, r30
     b7a:	81 11       	cpse	r24, r1
     b7c:	b3 cf       	rjmp	.-154    	; 0xae4 <vfprintf+0x5c>
     b7e:	98 2f       	mov	r25, r24
     b80:	9f 7d       	andi	r25, 0xDF	; 223
     b82:	95 54       	subi	r25, 0x45	; 69
     b84:	93 30       	cpi	r25, 0x03	; 3
     b86:	28 f4       	brcc	.+10     	; 0xb92 <vfprintf+0x10a>
     b88:	0c 5f       	subi	r16, 0xFC	; 252
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	9f e3       	ldi	r25, 0x3F	; 63
     b8e:	99 83       	std	Y+1, r25	; 0x01
     b90:	0d c0       	rjmp	.+26     	; 0xbac <vfprintf+0x124>
     b92:	83 36       	cpi	r24, 0x63	; 99
     b94:	31 f0       	breq	.+12     	; 0xba2 <vfprintf+0x11a>
     b96:	83 37       	cpi	r24, 0x73	; 115
     b98:	71 f0       	breq	.+28     	; 0xbb6 <vfprintf+0x12e>
     b9a:	83 35       	cpi	r24, 0x53	; 83
     b9c:	09 f0       	breq	.+2      	; 0xba0 <vfprintf+0x118>
     b9e:	59 c0       	rjmp	.+178    	; 0xc52 <vfprintf+0x1ca>
     ba0:	21 c0       	rjmp	.+66     	; 0xbe4 <vfprintf+0x15c>
     ba2:	f8 01       	movw	r30, r16
     ba4:	80 81       	ld	r24, Z
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	0e 5f       	subi	r16, 0xFE	; 254
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	88 24       	eor	r8, r8
     bae:	83 94       	inc	r8
     bb0:	91 2c       	mov	r9, r1
     bb2:	53 01       	movw	r10, r6
     bb4:	13 c0       	rjmp	.+38     	; 0xbdc <vfprintf+0x154>
     bb6:	28 01       	movw	r4, r16
     bb8:	f2 e0       	ldi	r31, 0x02	; 2
     bba:	4f 0e       	add	r4, r31
     bbc:	51 1c       	adc	r5, r1
     bbe:	f8 01       	movw	r30, r16
     bc0:	a0 80       	ld	r10, Z
     bc2:	b1 80       	ldd	r11, Z+1	; 0x01
     bc4:	36 fe       	sbrs	r3, 6
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <vfprintf+0x146>
     bc8:	69 2d       	mov	r22, r9
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <vfprintf+0x14a>
     bce:	6f ef       	ldi	r22, 0xFF	; 255
     bd0:	7f ef       	ldi	r23, 0xFF	; 255
     bd2:	c5 01       	movw	r24, r10
     bd4:	0e 94 30 07 	call	0xe60	; 0xe60 <strnlen>
     bd8:	4c 01       	movw	r8, r24
     bda:	82 01       	movw	r16, r4
     bdc:	f3 2d       	mov	r31, r3
     bde:	ff 77       	andi	r31, 0x7F	; 127
     be0:	3f 2e       	mov	r3, r31
     be2:	16 c0       	rjmp	.+44     	; 0xc10 <vfprintf+0x188>
     be4:	28 01       	movw	r4, r16
     be6:	22 e0       	ldi	r18, 0x02	; 2
     be8:	42 0e       	add	r4, r18
     bea:	51 1c       	adc	r5, r1
     bec:	f8 01       	movw	r30, r16
     bee:	a0 80       	ld	r10, Z
     bf0:	b1 80       	ldd	r11, Z+1	; 0x01
     bf2:	36 fe       	sbrs	r3, 6
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <vfprintf+0x174>
     bf6:	69 2d       	mov	r22, r9
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x178>
     bfc:	6f ef       	ldi	r22, 0xFF	; 255
     bfe:	7f ef       	ldi	r23, 0xFF	; 255
     c00:	c5 01       	movw	r24, r10
     c02:	0e 94 25 07 	call	0xe4a	; 0xe4a <strnlen_P>
     c06:	4c 01       	movw	r8, r24
     c08:	f3 2d       	mov	r31, r3
     c0a:	f0 68       	ori	r31, 0x80	; 128
     c0c:	3f 2e       	mov	r3, r31
     c0e:	82 01       	movw	r16, r4
     c10:	33 fc       	sbrc	r3, 3
     c12:	1b c0       	rjmp	.+54     	; 0xc4a <vfprintf+0x1c2>
     c14:	82 2d       	mov	r24, r2
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	88 16       	cp	r8, r24
     c1a:	99 06       	cpc	r9, r25
     c1c:	b0 f4       	brcc	.+44     	; 0xc4a <vfprintf+0x1c2>
     c1e:	b6 01       	movw	r22, r12
     c20:	80 e2       	ldi	r24, 0x20	; 32
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 3b 07 	call	0xe76	; 0xe76 <fputc>
     c28:	2a 94       	dec	r2
     c2a:	f4 cf       	rjmp	.-24     	; 0xc14 <vfprintf+0x18c>
     c2c:	f5 01       	movw	r30, r10
     c2e:	37 fc       	sbrc	r3, 7
     c30:	85 91       	lpm	r24, Z+
     c32:	37 fe       	sbrs	r3, 7
     c34:	81 91       	ld	r24, Z+
     c36:	5f 01       	movw	r10, r30
     c38:	b6 01       	movw	r22, r12
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 3b 07 	call	0xe76	; 0xe76 <fputc>
     c40:	21 10       	cpse	r2, r1
     c42:	2a 94       	dec	r2
     c44:	21 e0       	ldi	r18, 0x01	; 1
     c46:	82 1a       	sub	r8, r18
     c48:	91 08       	sbc	r9, r1
     c4a:	81 14       	cp	r8, r1
     c4c:	91 04       	cpc	r9, r1
     c4e:	71 f7       	brne	.-36     	; 0xc2c <vfprintf+0x1a4>
     c50:	e8 c0       	rjmp	.+464    	; 0xe22 <vfprintf+0x39a>
     c52:	84 36       	cpi	r24, 0x64	; 100
     c54:	11 f0       	breq	.+4      	; 0xc5a <vfprintf+0x1d2>
     c56:	89 36       	cpi	r24, 0x69	; 105
     c58:	41 f5       	brne	.+80     	; 0xcaa <vfprintf+0x222>
     c5a:	f8 01       	movw	r30, r16
     c5c:	37 fe       	sbrs	r3, 7
     c5e:	07 c0       	rjmp	.+14     	; 0xc6e <vfprintf+0x1e6>
     c60:	60 81       	ld	r22, Z
     c62:	71 81       	ldd	r23, Z+1	; 0x01
     c64:	82 81       	ldd	r24, Z+2	; 0x02
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	0c 5f       	subi	r16, 0xFC	; 252
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	08 c0       	rjmp	.+16     	; 0xc7e <vfprintf+0x1f6>
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	07 2e       	mov	r0, r23
     c74:	00 0c       	add	r0, r0
     c76:	88 0b       	sbc	r24, r24
     c78:	99 0b       	sbc	r25, r25
     c7a:	0e 5f       	subi	r16, 0xFE	; 254
     c7c:	1f 4f       	sbci	r17, 0xFF	; 255
     c7e:	f3 2d       	mov	r31, r3
     c80:	ff 76       	andi	r31, 0x6F	; 111
     c82:	3f 2e       	mov	r3, r31
     c84:	97 ff       	sbrs	r25, 7
     c86:	09 c0       	rjmp	.+18     	; 0xc9a <vfprintf+0x212>
     c88:	90 95       	com	r25
     c8a:	80 95       	com	r24
     c8c:	70 95       	com	r23
     c8e:	61 95       	neg	r22
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	8f 4f       	sbci	r24, 0xFF	; 255
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	f0 68       	ori	r31, 0x80	; 128
     c98:	3f 2e       	mov	r3, r31
     c9a:	2a e0       	ldi	r18, 0x0A	; 10
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	a3 01       	movw	r20, r6
     ca0:	0e 94 77 07 	call	0xeee	; 0xeee <__ultoa_invert>
     ca4:	88 2e       	mov	r8, r24
     ca6:	86 18       	sub	r8, r6
     ca8:	45 c0       	rjmp	.+138    	; 0xd34 <vfprintf+0x2ac>
     caa:	85 37       	cpi	r24, 0x75	; 117
     cac:	31 f4       	brne	.+12     	; 0xcba <vfprintf+0x232>
     cae:	23 2d       	mov	r18, r3
     cb0:	2f 7e       	andi	r18, 0xEF	; 239
     cb2:	b2 2e       	mov	r11, r18
     cb4:	2a e0       	ldi	r18, 0x0A	; 10
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	25 c0       	rjmp	.+74     	; 0xd04 <vfprintf+0x27c>
     cba:	93 2d       	mov	r25, r3
     cbc:	99 7f       	andi	r25, 0xF9	; 249
     cbe:	b9 2e       	mov	r11, r25
     cc0:	8f 36       	cpi	r24, 0x6F	; 111
     cc2:	c1 f0       	breq	.+48     	; 0xcf4 <vfprintf+0x26c>
     cc4:	18 f4       	brcc	.+6      	; 0xccc <vfprintf+0x244>
     cc6:	88 35       	cpi	r24, 0x58	; 88
     cc8:	79 f0       	breq	.+30     	; 0xce8 <vfprintf+0x260>
     cca:	b5 c0       	rjmp	.+362    	; 0xe36 <vfprintf+0x3ae>
     ccc:	80 37       	cpi	r24, 0x70	; 112
     cce:	19 f0       	breq	.+6      	; 0xcd6 <vfprintf+0x24e>
     cd0:	88 37       	cpi	r24, 0x78	; 120
     cd2:	21 f0       	breq	.+8      	; 0xcdc <vfprintf+0x254>
     cd4:	b0 c0       	rjmp	.+352    	; 0xe36 <vfprintf+0x3ae>
     cd6:	e9 2f       	mov	r30, r25
     cd8:	e0 61       	ori	r30, 0x10	; 16
     cda:	be 2e       	mov	r11, r30
     cdc:	b4 fe       	sbrs	r11, 4
     cde:	0d c0       	rjmp	.+26     	; 0xcfa <vfprintf+0x272>
     ce0:	fb 2d       	mov	r31, r11
     ce2:	f4 60       	ori	r31, 0x04	; 4
     ce4:	bf 2e       	mov	r11, r31
     ce6:	09 c0       	rjmp	.+18     	; 0xcfa <vfprintf+0x272>
     ce8:	34 fe       	sbrs	r3, 4
     cea:	0a c0       	rjmp	.+20     	; 0xd00 <vfprintf+0x278>
     cec:	29 2f       	mov	r18, r25
     cee:	26 60       	ori	r18, 0x06	; 6
     cf0:	b2 2e       	mov	r11, r18
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <vfprintf+0x278>
     cf4:	28 e0       	ldi	r18, 0x08	; 8
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <vfprintf+0x27c>
     cfa:	20 e1       	ldi	r18, 0x10	; 16
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <vfprintf+0x27c>
     d00:	20 e1       	ldi	r18, 0x10	; 16
     d02:	32 e0       	ldi	r19, 0x02	; 2
     d04:	f8 01       	movw	r30, r16
     d06:	b7 fe       	sbrs	r11, 7
     d08:	07 c0       	rjmp	.+14     	; 0xd18 <vfprintf+0x290>
     d0a:	60 81       	ld	r22, Z
     d0c:	71 81       	ldd	r23, Z+1	; 0x01
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	0c 5f       	subi	r16, 0xFC	; 252
     d14:	1f 4f       	sbci	r17, 0xFF	; 255
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <vfprintf+0x29c>
     d18:	60 81       	ld	r22, Z
     d1a:	71 81       	ldd	r23, Z+1	; 0x01
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 5f       	subi	r16, 0xFE	; 254
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	a3 01       	movw	r20, r6
     d26:	0e 94 77 07 	call	0xeee	; 0xeee <__ultoa_invert>
     d2a:	88 2e       	mov	r8, r24
     d2c:	86 18       	sub	r8, r6
     d2e:	fb 2d       	mov	r31, r11
     d30:	ff 77       	andi	r31, 0x7F	; 127
     d32:	3f 2e       	mov	r3, r31
     d34:	36 fe       	sbrs	r3, 6
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <vfprintf+0x2ca>
     d38:	23 2d       	mov	r18, r3
     d3a:	2e 7f       	andi	r18, 0xFE	; 254
     d3c:	a2 2e       	mov	r10, r18
     d3e:	89 14       	cp	r8, r9
     d40:	58 f4       	brcc	.+22     	; 0xd58 <vfprintf+0x2d0>
     d42:	34 fe       	sbrs	r3, 4
     d44:	0b c0       	rjmp	.+22     	; 0xd5c <vfprintf+0x2d4>
     d46:	32 fc       	sbrc	r3, 2
     d48:	09 c0       	rjmp	.+18     	; 0xd5c <vfprintf+0x2d4>
     d4a:	83 2d       	mov	r24, r3
     d4c:	8e 7e       	andi	r24, 0xEE	; 238
     d4e:	a8 2e       	mov	r10, r24
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <vfprintf+0x2d4>
     d52:	b8 2c       	mov	r11, r8
     d54:	a3 2c       	mov	r10, r3
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <vfprintf+0x2d6>
     d58:	b8 2c       	mov	r11, r8
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <vfprintf+0x2d6>
     d5c:	b9 2c       	mov	r11, r9
     d5e:	a4 fe       	sbrs	r10, 4
     d60:	0f c0       	rjmp	.+30     	; 0xd80 <vfprintf+0x2f8>
     d62:	fe 01       	movw	r30, r28
     d64:	e8 0d       	add	r30, r8
     d66:	f1 1d       	adc	r31, r1
     d68:	80 81       	ld	r24, Z
     d6a:	80 33       	cpi	r24, 0x30	; 48
     d6c:	21 f4       	brne	.+8      	; 0xd76 <vfprintf+0x2ee>
     d6e:	9a 2d       	mov	r25, r10
     d70:	99 7e       	andi	r25, 0xE9	; 233
     d72:	a9 2e       	mov	r10, r25
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <vfprintf+0x300>
     d76:	a2 fe       	sbrs	r10, 2
     d78:	06 c0       	rjmp	.+12     	; 0xd86 <vfprintf+0x2fe>
     d7a:	b3 94       	inc	r11
     d7c:	b3 94       	inc	r11
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <vfprintf+0x300>
     d80:	8a 2d       	mov	r24, r10
     d82:	86 78       	andi	r24, 0x86	; 134
     d84:	09 f0       	breq	.+2      	; 0xd88 <vfprintf+0x300>
     d86:	b3 94       	inc	r11
     d88:	a3 fc       	sbrc	r10, 3
     d8a:	11 c0       	rjmp	.+34     	; 0xdae <vfprintf+0x326>
     d8c:	a0 fe       	sbrs	r10, 0
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <vfprintf+0x314>
     d90:	b2 14       	cp	r11, r2
     d92:	88 f4       	brcc	.+34     	; 0xdb6 <vfprintf+0x32e>
     d94:	28 0c       	add	r2, r8
     d96:	92 2c       	mov	r9, r2
     d98:	9b 18       	sub	r9, r11
     d9a:	0e c0       	rjmp	.+28     	; 0xdb8 <vfprintf+0x330>
     d9c:	b2 14       	cp	r11, r2
     d9e:	60 f4       	brcc	.+24     	; 0xdb8 <vfprintf+0x330>
     da0:	b6 01       	movw	r22, r12
     da2:	80 e2       	ldi	r24, 0x20	; 32
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 3b 07 	call	0xe76	; 0xe76 <fputc>
     daa:	b3 94       	inc	r11
     dac:	f7 cf       	rjmp	.-18     	; 0xd9c <vfprintf+0x314>
     dae:	b2 14       	cp	r11, r2
     db0:	18 f4       	brcc	.+6      	; 0xdb8 <vfprintf+0x330>
     db2:	2b 18       	sub	r2, r11
     db4:	02 c0       	rjmp	.+4      	; 0xdba <vfprintf+0x332>
     db6:	98 2c       	mov	r9, r8
     db8:	21 2c       	mov	r2, r1
     dba:	a4 fe       	sbrs	r10, 4
     dbc:	10 c0       	rjmp	.+32     	; 0xdde <vfprintf+0x356>
     dbe:	b6 01       	movw	r22, r12
     dc0:	80 e3       	ldi	r24, 0x30	; 48
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 3b 07 	call	0xe76	; 0xe76 <fputc>
     dc8:	a2 fe       	sbrs	r10, 2
     dca:	17 c0       	rjmp	.+46     	; 0xdfa <vfprintf+0x372>
     dcc:	a1 fc       	sbrc	r10, 1
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <vfprintf+0x34e>
     dd0:	88 e7       	ldi	r24, 0x78	; 120
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <vfprintf+0x352>
     dd6:	88 e5       	ldi	r24, 0x58	; 88
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	b6 01       	movw	r22, r12
     ddc:	0c c0       	rjmp	.+24     	; 0xdf6 <vfprintf+0x36e>
     dde:	8a 2d       	mov	r24, r10
     de0:	86 78       	andi	r24, 0x86	; 134
     de2:	59 f0       	breq	.+22     	; 0xdfa <vfprintf+0x372>
     de4:	a1 fe       	sbrs	r10, 1
     de6:	02 c0       	rjmp	.+4      	; 0xdec <vfprintf+0x364>
     de8:	8b e2       	ldi	r24, 0x2B	; 43
     dea:	01 c0       	rjmp	.+2      	; 0xdee <vfprintf+0x366>
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	a7 fc       	sbrc	r10, 7
     df0:	8d e2       	ldi	r24, 0x2D	; 45
     df2:	b6 01       	movw	r22, r12
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 3b 07 	call	0xe76	; 0xe76 <fputc>
     dfa:	89 14       	cp	r8, r9
     dfc:	38 f4       	brcc	.+14     	; 0xe0c <vfprintf+0x384>
     dfe:	b6 01       	movw	r22, r12
     e00:	80 e3       	ldi	r24, 0x30	; 48
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 3b 07 	call	0xe76	; 0xe76 <fputc>
     e08:	9a 94       	dec	r9
     e0a:	f7 cf       	rjmp	.-18     	; 0xdfa <vfprintf+0x372>
     e0c:	8a 94       	dec	r8
     e0e:	f3 01       	movw	r30, r6
     e10:	e8 0d       	add	r30, r8
     e12:	f1 1d       	adc	r31, r1
     e14:	80 81       	ld	r24, Z
     e16:	b6 01       	movw	r22, r12
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 3b 07 	call	0xe76	; 0xe76 <fputc>
     e1e:	81 10       	cpse	r8, r1
     e20:	f5 cf       	rjmp	.-22     	; 0xe0c <vfprintf+0x384>
     e22:	22 20       	and	r2, r2
     e24:	09 f4       	brne	.+2      	; 0xe28 <vfprintf+0x3a0>
     e26:	42 ce       	rjmp	.-892    	; 0xaac <vfprintf+0x24>
     e28:	b6 01       	movw	r22, r12
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 3b 07 	call	0xe76	; 0xe76 <fputc>
     e32:	2a 94       	dec	r2
     e34:	f6 cf       	rjmp	.-20     	; 0xe22 <vfprintf+0x39a>
     e36:	f6 01       	movw	r30, r12
     e38:	86 81       	ldd	r24, Z+6	; 0x06
     e3a:	97 81       	ldd	r25, Z+7	; 0x07
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <vfprintf+0x3ba>
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	2b 96       	adiw	r28, 0x0b	; 11
     e44:	e2 e1       	ldi	r30, 0x12	; 18
     e46:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__epilogue_restores__>

00000e4a <strnlen_P>:
     e4a:	fc 01       	movw	r30, r24
     e4c:	05 90       	lpm	r0, Z+
     e4e:	61 50       	subi	r22, 0x01	; 1
     e50:	70 40       	sbci	r23, 0x00	; 0
     e52:	01 10       	cpse	r0, r1
     e54:	d8 f7       	brcc	.-10     	; 0xe4c <strnlen_P+0x2>
     e56:	80 95       	com	r24
     e58:	90 95       	com	r25
     e5a:	8e 0f       	add	r24, r30
     e5c:	9f 1f       	adc	r25, r31
     e5e:	08 95       	ret

00000e60 <strnlen>:
     e60:	fc 01       	movw	r30, r24
     e62:	61 50       	subi	r22, 0x01	; 1
     e64:	70 40       	sbci	r23, 0x00	; 0
     e66:	01 90       	ld	r0, Z+
     e68:	01 10       	cpse	r0, r1
     e6a:	d8 f7       	brcc	.-10     	; 0xe62 <strnlen+0x2>
     e6c:	80 95       	com	r24
     e6e:	90 95       	com	r25
     e70:	8e 0f       	add	r24, r30
     e72:	9f 1f       	adc	r25, r31
     e74:	08 95       	ret

00000e76 <fputc>:
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	fb 01       	movw	r30, r22
     e80:	23 81       	ldd	r18, Z+3	; 0x03
     e82:	21 fd       	sbrc	r18, 1
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <fputc+0x16>
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	9f ef       	ldi	r25, 0xFF	; 255
     e8a:	2c c0       	rjmp	.+88     	; 0xee4 <fputc+0x6e>
     e8c:	22 ff       	sbrs	r18, 2
     e8e:	16 c0       	rjmp	.+44     	; 0xebc <fputc+0x46>
     e90:	46 81       	ldd	r20, Z+6	; 0x06
     e92:	57 81       	ldd	r21, Z+7	; 0x07
     e94:	24 81       	ldd	r18, Z+4	; 0x04
     e96:	35 81       	ldd	r19, Z+5	; 0x05
     e98:	42 17       	cp	r20, r18
     e9a:	53 07       	cpc	r21, r19
     e9c:	44 f4       	brge	.+16     	; 0xeae <fputc+0x38>
     e9e:	a0 81       	ld	r26, Z
     ea0:	b1 81       	ldd	r27, Z+1	; 0x01
     ea2:	9d 01       	movw	r18, r26
     ea4:	2f 5f       	subi	r18, 0xFF	; 255
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
     ea8:	31 83       	std	Z+1, r19	; 0x01
     eaa:	20 83       	st	Z, r18
     eac:	8c 93       	st	X, r24
     eae:	26 81       	ldd	r18, Z+6	; 0x06
     eb0:	37 81       	ldd	r19, Z+7	; 0x07
     eb2:	2f 5f       	subi	r18, 0xFF	; 255
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	37 83       	std	Z+7, r19	; 0x07
     eb8:	26 83       	std	Z+6, r18	; 0x06
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <fputc+0x6e>
     ebc:	8b 01       	movw	r16, r22
     ebe:	ec 01       	movw	r28, r24
     ec0:	fb 01       	movw	r30, r22
     ec2:	00 84       	ldd	r0, Z+8	; 0x08
     ec4:	f1 85       	ldd	r31, Z+9	; 0x09
     ec6:	e0 2d       	mov	r30, r0
     ec8:	09 95       	icall
     eca:	89 2b       	or	r24, r25
     ecc:	e1 f6       	brne	.-72     	; 0xe86 <fputc+0x10>
     ece:	d8 01       	movw	r26, r16
     ed0:	16 96       	adiw	r26, 0x06	; 6
     ed2:	8d 91       	ld	r24, X+
     ed4:	9c 91       	ld	r25, X
     ed6:	17 97       	sbiw	r26, 0x07	; 7
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	17 96       	adiw	r26, 0x07	; 7
     edc:	9c 93       	st	X, r25
     ede:	8e 93       	st	-X, r24
     ee0:	16 97       	sbiw	r26, 0x06	; 6
     ee2:	ce 01       	movw	r24, r28
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <__ultoa_invert>:
     eee:	fa 01       	movw	r30, r20
     ef0:	aa 27       	eor	r26, r26
     ef2:	28 30       	cpi	r18, 0x08	; 8
     ef4:	51 f1       	breq	.+84     	; 0xf4a <__ultoa_invert+0x5c>
     ef6:	20 31       	cpi	r18, 0x10	; 16
     ef8:	81 f1       	breq	.+96     	; 0xf5a <__ultoa_invert+0x6c>
     efa:	e8 94       	clt
     efc:	6f 93       	push	r22
     efe:	6e 7f       	andi	r22, 0xFE	; 254
     f00:	6e 5f       	subi	r22, 0xFE	; 254
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	8f 4f       	sbci	r24, 0xFF	; 255
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	af 4f       	sbci	r26, 0xFF	; 255
     f0a:	b1 e0       	ldi	r27, 0x01	; 1
     f0c:	3e d0       	rcall	.+124    	; 0xf8a <__ultoa_invert+0x9c>
     f0e:	b4 e0       	ldi	r27, 0x04	; 4
     f10:	3c d0       	rcall	.+120    	; 0xf8a <__ultoa_invert+0x9c>
     f12:	67 0f       	add	r22, r23
     f14:	78 1f       	adc	r23, r24
     f16:	89 1f       	adc	r24, r25
     f18:	9a 1f       	adc	r25, r26
     f1a:	a1 1d       	adc	r26, r1
     f1c:	68 0f       	add	r22, r24
     f1e:	79 1f       	adc	r23, r25
     f20:	8a 1f       	adc	r24, r26
     f22:	91 1d       	adc	r25, r1
     f24:	a1 1d       	adc	r26, r1
     f26:	6a 0f       	add	r22, r26
     f28:	71 1d       	adc	r23, r1
     f2a:	81 1d       	adc	r24, r1
     f2c:	91 1d       	adc	r25, r1
     f2e:	a1 1d       	adc	r26, r1
     f30:	20 d0       	rcall	.+64     	; 0xf72 <__ultoa_invert+0x84>
     f32:	09 f4       	brne	.+2      	; 0xf36 <__ultoa_invert+0x48>
     f34:	68 94       	set
     f36:	3f 91       	pop	r19
     f38:	2a e0       	ldi	r18, 0x0A	; 10
     f3a:	26 9f       	mul	r18, r22
     f3c:	11 24       	eor	r1, r1
     f3e:	30 19       	sub	r19, r0
     f40:	30 5d       	subi	r19, 0xD0	; 208
     f42:	31 93       	st	Z+, r19
     f44:	de f6       	brtc	.-74     	; 0xefc <__ultoa_invert+0xe>
     f46:	cf 01       	movw	r24, r30
     f48:	08 95       	ret
     f4a:	46 2f       	mov	r20, r22
     f4c:	47 70       	andi	r20, 0x07	; 7
     f4e:	40 5d       	subi	r20, 0xD0	; 208
     f50:	41 93       	st	Z+, r20
     f52:	b3 e0       	ldi	r27, 0x03	; 3
     f54:	0f d0       	rcall	.+30     	; 0xf74 <__ultoa_invert+0x86>
     f56:	c9 f7       	brne	.-14     	; 0xf4a <__ultoa_invert+0x5c>
     f58:	f6 cf       	rjmp	.-20     	; 0xf46 <__ultoa_invert+0x58>
     f5a:	46 2f       	mov	r20, r22
     f5c:	4f 70       	andi	r20, 0x0F	; 15
     f5e:	40 5d       	subi	r20, 0xD0	; 208
     f60:	4a 33       	cpi	r20, 0x3A	; 58
     f62:	18 f0       	brcs	.+6      	; 0xf6a <__ultoa_invert+0x7c>
     f64:	49 5d       	subi	r20, 0xD9	; 217
     f66:	31 fd       	sbrc	r19, 1
     f68:	40 52       	subi	r20, 0x20	; 32
     f6a:	41 93       	st	Z+, r20
     f6c:	02 d0       	rcall	.+4      	; 0xf72 <__ultoa_invert+0x84>
     f6e:	a9 f7       	brne	.-22     	; 0xf5a <__ultoa_invert+0x6c>
     f70:	ea cf       	rjmp	.-44     	; 0xf46 <__ultoa_invert+0x58>
     f72:	b4 e0       	ldi	r27, 0x04	; 4
     f74:	a6 95       	lsr	r26
     f76:	97 95       	ror	r25
     f78:	87 95       	ror	r24
     f7a:	77 95       	ror	r23
     f7c:	67 95       	ror	r22
     f7e:	ba 95       	dec	r27
     f80:	c9 f7       	brne	.-14     	; 0xf74 <__ultoa_invert+0x86>
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	61 05       	cpc	r22, r1
     f86:	71 05       	cpc	r23, r1
     f88:	08 95       	ret
     f8a:	9b 01       	movw	r18, r22
     f8c:	ac 01       	movw	r20, r24
     f8e:	0a 2e       	mov	r0, r26
     f90:	06 94       	lsr	r0
     f92:	57 95       	ror	r21
     f94:	47 95       	ror	r20
     f96:	37 95       	ror	r19
     f98:	27 95       	ror	r18
     f9a:	ba 95       	dec	r27
     f9c:	c9 f7       	brne	.-14     	; 0xf90 <__ultoa_invert+0xa2>
     f9e:	62 0f       	add	r22, r18
     fa0:	73 1f       	adc	r23, r19
     fa2:	84 1f       	adc	r24, r20
     fa4:	95 1f       	adc	r25, r21
     fa6:	a0 1d       	adc	r26, r0
     fa8:	08 95       	ret

00000faa <__prologue_saves__>:
     faa:	2f 92       	push	r2
     fac:	3f 92       	push	r3
     fae:	4f 92       	push	r4
     fb0:	5f 92       	push	r5
     fb2:	6f 92       	push	r6
     fb4:	7f 92       	push	r7
     fb6:	8f 92       	push	r8
     fb8:	9f 92       	push	r9
     fba:	af 92       	push	r10
     fbc:	bf 92       	push	r11
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	ca 1b       	sub	r28, r26
     fd4:	db 0b       	sbc	r29, r27
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	09 94       	ijmp

00000fe2 <__epilogue_restores__>:
     fe2:	2a 88       	ldd	r2, Y+18	; 0x12
     fe4:	39 88       	ldd	r3, Y+17	; 0x11
     fe6:	48 88       	ldd	r4, Y+16	; 0x10
     fe8:	5f 84       	ldd	r5, Y+15	; 0x0f
     fea:	6e 84       	ldd	r6, Y+14	; 0x0e
     fec:	7d 84       	ldd	r7, Y+13	; 0x0d
     fee:	8c 84       	ldd	r8, Y+12	; 0x0c
     ff0:	9b 84       	ldd	r9, Y+11	; 0x0b
     ff2:	aa 84       	ldd	r10, Y+10	; 0x0a
     ff4:	b9 84       	ldd	r11, Y+9	; 0x09
     ff6:	c8 84       	ldd	r12, Y+8	; 0x08
     ff8:	df 80       	ldd	r13, Y+7	; 0x07
     ffa:	ee 80       	ldd	r14, Y+6	; 0x06
     ffc:	fd 80       	ldd	r15, Y+5	; 0x05
     ffe:	0c 81       	ldd	r16, Y+4	; 0x04
    1000:	1b 81       	ldd	r17, Y+3	; 0x03
    1002:	aa 81       	ldd	r26, Y+2	; 0x02
    1004:	b9 81       	ldd	r27, Y+1	; 0x01
    1006:	ce 0f       	add	r28, r30
    1008:	d1 1d       	adc	r29, r1
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	ed 01       	movw	r28, r26
    1016:	08 95       	ret

00001018 <_exit>:
    1018:	f8 94       	cli

0000101a <__stop_program>:
    101a:	ff cf       	rjmp	.-2      	; 0x101a <__stop_program>
