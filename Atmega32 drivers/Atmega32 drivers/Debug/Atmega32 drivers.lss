
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b06  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063e  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000492  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000082  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
{
	 //CLockAPP();
	 //KeyPadAPP();
	 //ADCAPP();
	//counterAPP();
	UART_INIT(9600);
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	95 e2       	ldi	r25, 0x25	; 37
  96:	0e 94 54 00 	call	0xa8	; 0xa8 <UART_INIT>
	
	u8 x='a';
  9a:	81 e6       	ldi	r24, 0x61	; 97
	
	while(1)
	{
		UART_TX(x+1);
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TX>
		x= UART_RX();
  a2:	0e 94 7f 00 	call	0xfe	; 0xfe <UART_RX>
  a6:	fa cf       	rjmp	.-12     	; 0x9c <main+0xa>

000000a8 <UART_INIT>:
#include "includes.h"
#define  F_CPU 16000000UL
void UART_INIT(u16 BaudRate)
{
	u16 BAUD_TEMP=0;
	BAUD_TEMP=((F_CPU/(16UL*BaudRate))-1);	
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	aa 1f       	adc	r26, r26
  b2:	bb 1f       	adc	r27, r27
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	aa 1f       	adc	r26, r26
  ba:	bb 1f       	adc	r27, r27
  bc:	9c 01       	movw	r18, r24
  be:	ad 01       	movw	r20, r26
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	44 1f       	adc	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	44 1f       	adc	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	74 e2       	ldi	r23, 0x24	; 36
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 83 00 	call	0x106	; 0x106 <__udivmodsi4>
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	31 09       	sbc	r19, r1
	UBRRH=(BAUD_TEMP>>8);
  e0:	30 bd       	out	0x20, r19	; 32
	UBRRL=BAUD_TEMP;
  e2:	29 b9       	out	0x09, r18	; 9
	SETBit(UCSRB,TXEN);
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	8a b9       	out	0x0a, r24	; 10
	SETBit(UCSRB,RXEN);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	80 61       	ori	r24, 0x10	; 16
  ee:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  f0:	86 e8       	ldi	r24, 0x86	; 134
  f2:	80 bd       	out	0x20, r24	; 32
  f4:	08 95       	ret

000000f6 <UART_TX>:
}

void UART_TX(u8 data)
{
	UDR=data;
  f6:	8c b9       	out	0x0c, r24	; 12
	while(GETBit(UCSRA,UDRE)!=1);	
  f8:	5d 9b       	sbis	0x0b, 5	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <UART_TX+0x2>
		
}
  fc:	08 95       	ret

000000fe <UART_RX>:

u8 UART_RX(void)
{
	while(!GETBit(UCSRA,RXC));
  fe:	5f 9b       	sbis	0x0b, 7	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <UART_RX>
	return UDR;	
 102:	8c b1       	in	r24, 0x0c	; 12
 104:	08 95       	ret

00000106 <__udivmodsi4>:
 106:	a1 e2       	ldi	r26, 0x21	; 33
 108:	1a 2e       	mov	r1, r26
 10a:	aa 1b       	sub	r26, r26
 10c:	bb 1b       	sub	r27, r27
 10e:	fd 01       	movw	r30, r26
 110:	0d c0       	rjmp	.+26     	; 0x12c <__udivmodsi4_ep>

00000112 <__udivmodsi4_loop>:
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	ee 1f       	adc	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	a2 17       	cp	r26, r18
 11c:	b3 07       	cpc	r27, r19
 11e:	e4 07       	cpc	r30, r20
 120:	f5 07       	cpc	r31, r21
 122:	20 f0       	brcs	.+8      	; 0x12c <__udivmodsi4_ep>
 124:	a2 1b       	sub	r26, r18
 126:	b3 0b       	sbc	r27, r19
 128:	e4 0b       	sbc	r30, r20
 12a:	f5 0b       	sbc	r31, r21

0000012c <__udivmodsi4_ep>:
 12c:	66 1f       	adc	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	88 1f       	adc	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	1a 94       	dec	r1
 136:	69 f7       	brne	.-38     	; 0x112 <__udivmodsi4_loop>
 138:	60 95       	com	r22
 13a:	70 95       	com	r23
 13c:	80 95       	com	r24
 13e:	90 95       	com	r25
 140:	9b 01       	movw	r18, r22
 142:	ac 01       	movw	r20, r24
 144:	bd 01       	movw	r22, r26
 146:	cf 01       	movw	r24, r30
 148:	08 95       	ret

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
