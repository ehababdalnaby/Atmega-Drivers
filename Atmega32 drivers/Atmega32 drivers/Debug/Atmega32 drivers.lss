
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002006  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00002006  0000207a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  0000207e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d50  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090f  00000000  00000000  00003f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e9a  00000000  00000000  00004897  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00005734  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a5  00000000  00000000  00005a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b9  00000000  00000000  00006129  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000067e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 01 10 	jmp	0x2002	; 0x2002 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#error define includes.h file
#endif


int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
      9a:	1f 92       	push	r1
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	u8 humidity_I = 0 , humidity_D = 0, temp_I = 0, temp_D = 0 , sumCheck = 0;
      a0:	19 82       	std	Y+1, r1	; 0x01
      a2:	1a 82       	std	Y+2, r1	; 0x02
      a4:	1b 82       	std	Y+3, r1	; 0x03
      a6:	1c 82       	std	Y+4, r1	; 0x04
      a8:	1d 82       	std	Y+5, r1	; 0x05
	LCD_init();
      aa:	0e 94 11 03 	call	0x622	; 0x622 <LCD_init>
		while(1)
		{
			DHT_start();
      ae:	0e 94 6d 00 	call	0xda	; 0xda <DHT_start>
			disp_charXY(2,10,'S');
      b2:	43 e5       	ldi	r20, 0x53	; 83
      b4:	6a e0       	ldi	r22, 0x0A	; 10
      b6:	82 e0       	ldi	r24, 0x02	; 2
      b8:	0e 94 27 08 	call	0x104e	; 0x104e <disp_charXY>
			humidity_I=DHT_read();
      bc:	0e 94 ed 01 	call	0x3da	; 0x3da <DHT_read>
      c0:	89 83       	std	Y+1, r24	; 0x01
// 			temp_I=DHT_read();
// 			disp_charXY(2,13,'T');
// 			temp_D=DHT_read();
// 			disp_charXY(2,14,'T');
// 			sumCheck=DHT_read();
			disp_intXY(1,1,humidity_I);
      c2:	89 81       	ldd	r24, Y+1	; 0x01
      c4:	88 2f       	mov	r24, r24
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	9c 01       	movw	r18, r24
      ce:	ad 01       	movw	r20, r26
      d0:	61 e0       	ldi	r22, 0x01	; 1
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 c1 08 	call	0x1182	; 0x1182 <disp_intXY>
// 			disp_intXY(1,6,humidity_D);
// 			disp_intXY(1,10,temp_I);
// 			disp_intXY(2,1,temp_D);
// 			disp_intXY(2,6,sumCheck);
		}
      d8:	ea cf       	rjmp	.-44     	; 0xae <main+0x1c>

000000da <DHT_start>:
 *  Author: Mahmoud-PC
 */ 
#include "DHT.h"

void DHT_start(void)
{
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	ae 97       	sbiw	r28, 0x2e	; 46
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	f8 94       	cli
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	0f be       	out	0x3f, r0	; 63
      ec:	cd bf       	out	0x3d, r28	; 61
	pinDirection(DHT_PIN,OUTPUT);		
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	8f e1       	ldi	r24, 0x1F	; 31
      f2:	0e 94 da 09 	call	0x13b4	; 0x13b4 <pinDirection>
	writePin(DHT_PIN,LOW);				//apply 0 to start the sensor
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	8f e1       	ldi	r24, 0x1F	; 31
      fa:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <writePin>
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	a0 e8       	ldi	r26, 0x80	; 128
     104:	bf e3       	ldi	r27, 0x3F	; 63
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	9a 83       	std	Y+2, r25	; 0x02
     10a:	ab 83       	std	Y+3, r26	; 0x03
     10c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     10e:	20 e0       	ldi	r18, 0x00	; 0
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	4a e7       	ldi	r20, 0x7A	; 122
     114:	55 e4       	ldi	r21, 0x45	; 69
     116:	69 81       	ldd	r22, Y+1	; 0x01
     118:	7a 81       	ldd	r23, Y+2	; 0x02
     11a:	8b 81       	ldd	r24, Y+3	; 0x03
     11c:	9c 81       	ldd	r25, Y+4	; 0x04
     11e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     122:	dc 01       	movw	r26, r24
     124:	cb 01       	movw	r24, r22
     126:	8d 83       	std	Y+5, r24	; 0x05
     128:	9e 83       	std	Y+6, r25	; 0x06
     12a:	af 83       	std	Y+7, r26	; 0x07
     12c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e8       	ldi	r20, 0x80	; 128
     134:	5f e3       	ldi	r21, 0x3F	; 63
     136:	6d 81       	ldd	r22, Y+5	; 0x05
     138:	7e 81       	ldd	r23, Y+6	; 0x06
     13a:	8f 81       	ldd	r24, Y+7	; 0x07
     13c:	98 85       	ldd	r25, Y+8	; 0x08
     13e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     142:	88 23       	and	r24, r24
     144:	2c f4       	brge	.+10     	; 0x150 <DHT_start+0x76>
		__ticks = 1;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	9a 87       	std	Y+10, r25	; 0x0a
     14c:	89 87       	std	Y+9, r24	; 0x09
     14e:	3f c0       	rjmp	.+126    	; 0x1ce <DHT_start+0xf4>
	else if (__tmp > 65535)
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	3f ef       	ldi	r19, 0xFF	; 255
     154:	4f e7       	ldi	r20, 0x7F	; 127
     156:	57 e4       	ldi	r21, 0x47	; 71
     158:	6d 81       	ldd	r22, Y+5	; 0x05
     15a:	7e 81       	ldd	r23, Y+6	; 0x06
     15c:	8f 81       	ldd	r24, Y+7	; 0x07
     15e:	98 85       	ldd	r25, Y+8	; 0x08
     160:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     164:	18 16       	cp	r1, r24
     166:	4c f5       	brge	.+82     	; 0x1ba <DHT_start+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	40 e2       	ldi	r20, 0x20	; 32
     16e:	51 e4       	ldi	r21, 0x41	; 65
     170:	69 81       	ldd	r22, Y+1	; 0x01
     172:	7a 81       	ldd	r23, Y+2	; 0x02
     174:	8b 81       	ldd	r24, Y+3	; 0x03
     176:	9c 81       	ldd	r25, Y+4	; 0x04
     178:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     17c:	dc 01       	movw	r26, r24
     17e:	cb 01       	movw	r24, r22
     180:	bc 01       	movw	r22, r24
     182:	cd 01       	movw	r24, r26
     184:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     188:	dc 01       	movw	r26, r24
     18a:	cb 01       	movw	r24, r22
     18c:	9a 87       	std	Y+10, r25	; 0x0a
     18e:	89 87       	std	Y+9, r24	; 0x09
     190:	0f c0       	rjmp	.+30     	; 0x1b0 <DHT_start+0xd6>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	9c 87       	std	Y+12, r25	; 0x0c
     198:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     19a:	8b 85       	ldd	r24, Y+11	; 0x0b
     19c:	9c 85       	ldd	r25, Y+12	; 0x0c
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <DHT_start+0xc4>
     1a2:	9c 87       	std	Y+12, r25	; 0x0c
     1a4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1a6:	89 85       	ldd	r24, Y+9	; 0x09
     1a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	9a 87       	std	Y+10, r25	; 0x0a
     1ae:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1b0:	89 85       	ldd	r24, Y+9	; 0x09
     1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b4:	89 2b       	or	r24, r25
     1b6:	69 f7       	brne	.-38     	; 0x192 <DHT_start+0xb8>
     1b8:	14 c0       	rjmp	.+40     	; 0x1e2 <DHT_start+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ba:	6d 81       	ldd	r22, Y+5	; 0x05
     1bc:	7e 81       	ldd	r23, Y+6	; 0x06
     1be:	8f 81       	ldd	r24, Y+7	; 0x07
     1c0:	98 85       	ldd	r25, Y+8	; 0x08
     1c2:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     1c6:	dc 01       	movw	r26, r24
     1c8:	cb 01       	movw	r24, r22
     1ca:	9a 87       	std	Y+10, r25	; 0x0a
     1cc:	89 87       	std	Y+9, r24	; 0x09
     1ce:	89 85       	ldd	r24, Y+9	; 0x09
     1d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d2:	9e 87       	std	Y+14, r25	; 0x0e
     1d4:	8d 87       	std	Y+13, r24	; 0x0d
     1d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     1d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <DHT_start+0x100>
     1de:	9e 87       	std	Y+14, r25	; 0x0e
     1e0:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);						
	writePin(DHT_PIN,HIGH);				//apply 0 to start the sensor
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	8f e1       	ldi	r24, 0x1F	; 31
     1e6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <writePin>
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	a0 e2       	ldi	r26, 0x20	; 32
     1f0:	b2 e4       	ldi	r27, 0x42	; 66
     1f2:	8f 87       	std	Y+15, r24	; 0x0f
     1f4:	98 8b       	std	Y+16, r25	; 0x10
     1f6:	a9 8b       	std	Y+17, r26	; 0x11
     1f8:	ba 8b       	std	Y+18, r27	; 0x12
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     1fa:	2b ea       	ldi	r18, 0xAB	; 171
     1fc:	3a ea       	ldi	r19, 0xAA	; 170
     1fe:	4a ea       	ldi	r20, 0xAA	; 170
     200:	50 e4       	ldi	r21, 0x40	; 64
     202:	6f 85       	ldd	r22, Y+15	; 0x0f
     204:	78 89       	ldd	r23, Y+16	; 0x10
     206:	89 89       	ldd	r24, Y+17	; 0x11
     208:	9a 89       	ldd	r25, Y+18	; 0x12
     20a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	8b 8b       	std	Y+19, r24	; 0x13
     214:	9c 8b       	std	Y+20, r25	; 0x14
     216:	ad 8b       	std	Y+21, r26	; 0x15
     218:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e8       	ldi	r20, 0x80	; 128
     220:	50 e4       	ldi	r21, 0x40	; 64
     222:	6f 85       	ldd	r22, Y+15	; 0x0f
     224:	78 89       	ldd	r23, Y+16	; 0x10
     226:	89 89       	ldd	r24, Y+17	; 0x11
     228:	9a 89       	ldd	r25, Y+18	; 0x12
     22a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	8f 8b       	std	Y+23, r24	; 0x17
     234:	98 8f       	std	Y+24, r25	; 0x18
     236:	a9 8f       	std	Y+25, r26	; 0x19
     238:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 e8       	ldi	r20, 0x80	; 128
     240:	5f e3       	ldi	r21, 0x3F	; 63
     242:	6b 89       	ldd	r22, Y+19	; 0x13
     244:	7c 89       	ldd	r23, Y+20	; 0x14
     246:	8d 89       	ldd	r24, Y+21	; 0x15
     248:	9e 89       	ldd	r25, Y+22	; 0x16
     24a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     24e:	88 23       	and	r24, r24
     250:	1c f4       	brge	.+6      	; 0x258 <DHT_start+0x17e>
		__ticks = 1;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	8b 8f       	std	Y+27, r24	; 0x1b
     256:	b2 c0       	rjmp	.+356    	; 0x3bc <DHT_start+0x2e2>
	else if (__tmp2 > 65535)
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	3f ef       	ldi	r19, 0xFF	; 255
     25c:	4f e7       	ldi	r20, 0x7F	; 127
     25e:	57 e4       	ldi	r21, 0x47	; 71
     260:	6f 89       	ldd	r22, Y+23	; 0x17
     262:	78 8d       	ldd	r23, Y+24	; 0x18
     264:	89 8d       	ldd	r24, Y+25	; 0x19
     266:	9a 8d       	ldd	r25, Y+26	; 0x1a
     268:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     26c:	18 16       	cp	r1, r24
     26e:	0c f0       	brlt	.+2      	; 0x272 <DHT_start+0x198>
     270:	7b c0       	rjmp	.+246    	; 0x368 <DHT_start+0x28e>
	{
		_delay_ms(__us / 1000.0);
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	4a e7       	ldi	r20, 0x7A	; 122
     278:	54 e4       	ldi	r21, 0x44	; 68
     27a:	6f 85       	ldd	r22, Y+15	; 0x0f
     27c:	78 89       	ldd	r23, Y+16	; 0x10
     27e:	89 89       	ldd	r24, Y+17	; 0x11
     280:	9a 89       	ldd	r25, Y+18	; 0x12
     282:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
     286:	dc 01       	movw	r26, r24
     288:	cb 01       	movw	r24, r22
     28a:	8c 8f       	std	Y+28, r24	; 0x1c
     28c:	9d 8f       	std	Y+29, r25	; 0x1d
     28e:	ae 8f       	std	Y+30, r26	; 0x1e
     290:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	4a e7       	ldi	r20, 0x7A	; 122
     298:	55 e4       	ldi	r21, 0x45	; 69
     29a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     29c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     29e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     2a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     2a2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	88 a3       	std	Y+32, r24	; 0x20
     2ac:	99 a3       	std	Y+33, r25	; 0x21
     2ae:	aa a3       	std	Y+34, r26	; 0x22
     2b0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e8       	ldi	r20, 0x80	; 128
     2b8:	5f e3       	ldi	r21, 0x3F	; 63
     2ba:	68 a1       	ldd	r22, Y+32	; 0x20
     2bc:	79 a1       	ldd	r23, Y+33	; 0x21
     2be:	8a a1       	ldd	r24, Y+34	; 0x22
     2c0:	9b a1       	ldd	r25, Y+35	; 0x23
     2c2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     2c6:	88 23       	and	r24, r24
     2c8:	2c f4       	brge	.+10     	; 0x2d4 <DHT_start+0x1fa>
		__ticks = 1;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	9d a3       	std	Y+37, r25	; 0x25
     2d0:	8c a3       	std	Y+36, r24	; 0x24
     2d2:	3f c0       	rjmp	.+126    	; 0x352 <DHT_start+0x278>
	else if (__tmp > 65535)
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	3f ef       	ldi	r19, 0xFF	; 255
     2d8:	4f e7       	ldi	r20, 0x7F	; 127
     2da:	57 e4       	ldi	r21, 0x47	; 71
     2dc:	68 a1       	ldd	r22, Y+32	; 0x20
     2de:	79 a1       	ldd	r23, Y+33	; 0x21
     2e0:	8a a1       	ldd	r24, Y+34	; 0x22
     2e2:	9b a1       	ldd	r25, Y+35	; 0x23
     2e4:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     2e8:	18 16       	cp	r1, r24
     2ea:	4c f5       	brge	.+82     	; 0x33e <DHT_start+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e2       	ldi	r20, 0x20	; 32
     2f2:	51 e4       	ldi	r21, 0x41	; 65
     2f4:	6c 8d       	ldd	r22, Y+28	; 0x1c
     2f6:	7d 8d       	ldd	r23, Y+29	; 0x1d
     2f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     2fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     2fc:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	9d a3       	std	Y+37, r25	; 0x25
     312:	8c a3       	std	Y+36, r24	; 0x24
     314:	0f c0       	rjmp	.+30     	; 0x334 <DHT_start+0x25a>
     316:	80 e9       	ldi	r24, 0x90	; 144
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	9f a3       	std	Y+39, r25	; 0x27
     31c:	8e a3       	std	Y+38, r24	; 0x26
     31e:	8e a1       	ldd	r24, Y+38	; 0x26
     320:	9f a1       	ldd	r25, Y+39	; 0x27
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <DHT_start+0x248>
     326:	9f a3       	std	Y+39, r25	; 0x27
     328:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     32a:	8c a1       	ldd	r24, Y+36	; 0x24
     32c:	9d a1       	ldd	r25, Y+37	; 0x25
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	9d a3       	std	Y+37, r25	; 0x25
     332:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     334:	8c a1       	ldd	r24, Y+36	; 0x24
     336:	9d a1       	ldd	r25, Y+37	; 0x25
     338:	89 2b       	or	r24, r25
     33a:	69 f7       	brne	.-38     	; 0x316 <DHT_start+0x23c>
     33c:	3f c0       	rjmp	.+126    	; 0x3bc <DHT_start+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     33e:	68 a1       	ldd	r22, Y+32	; 0x20
     340:	79 a1       	ldd	r23, Y+33	; 0x21
     342:	8a a1       	ldd	r24, Y+34	; 0x22
     344:	9b a1       	ldd	r25, Y+35	; 0x23
     346:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	9d a3       	std	Y+37, r25	; 0x25
     350:	8c a3       	std	Y+36, r24	; 0x24
     352:	8c a1       	ldd	r24, Y+36	; 0x24
     354:	9d a1       	ldd	r25, Y+37	; 0x25
     356:	99 a7       	std	Y+41, r25	; 0x29
     358:	88 a7       	std	Y+40, r24	; 0x28
     35a:	88 a5       	ldd	r24, Y+40	; 0x28
     35c:	99 a5       	ldd	r25, Y+41	; 0x29
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <DHT_start+0x284>
     362:	99 a7       	std	Y+41, r25	; 0x29
     364:	88 a7       	std	Y+40, r24	; 0x28
     366:	2a c0       	rjmp	.+84     	; 0x3bc <DHT_start+0x2e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	4f e7       	ldi	r20, 0x7F	; 127
     36e:	53 e4       	ldi	r21, 0x43	; 67
     370:	6b 89       	ldd	r22, Y+19	; 0x13
     372:	7c 89       	ldd	r23, Y+20	; 0x14
     374:	8d 89       	ldd	r24, Y+21	; 0x15
     376:	9e 89       	ldd	r25, Y+22	; 0x16
     378:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     37c:	18 16       	cp	r1, r24
     37e:	ac f4       	brge	.+42     	; 0x3aa <DHT_start+0x2d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     380:	6f 89       	ldd	r22, Y+23	; 0x17
     382:	78 8d       	ldd	r23, Y+24	; 0x18
     384:	89 8d       	ldd	r24, Y+25	; 0x19
     386:	9a 8d       	ldd	r25, Y+26	; 0x1a
     388:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	9b a7       	std	Y+43, r25	; 0x2b
     392:	8a a7       	std	Y+42, r24	; 0x2a
     394:	8a a5       	ldd	r24, Y+42	; 0x2a
     396:	9b a5       	ldd	r25, Y+43	; 0x2b
     398:	9d a7       	std	Y+45, r25	; 0x2d
     39a:	8c a7       	std	Y+44, r24	; 0x2c
     39c:	8c a5       	ldd	r24, Y+44	; 0x2c
     39e:	9d a5       	ldd	r25, Y+45	; 0x2d
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <DHT_start+0x2c6>
     3a4:	9d a7       	std	Y+45, r25	; 0x2d
     3a6:	8c a7       	std	Y+44, r24	; 0x2c
     3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <DHT_start+0x2ee>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3aa:	6b 89       	ldd	r22, Y+19	; 0x13
     3ac:	7c 89       	ldd	r23, Y+20	; 0x14
     3ae:	8d 89       	ldd	r24, Y+21	; 0x15
     3b0:	9e 89       	ldd	r25, Y+22	; 0x16
     3b2:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	8b 8f       	std	Y+27, r24	; 0x1b
     3bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3be:	8e a7       	std	Y+46, r24	; 0x2e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3c0:	8e a5       	ldd	r24, Y+46	; 0x2e
     3c2:	8a 95       	dec	r24
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <DHT_start+0x2e8>
     3c6:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_us(40);						//wait to ensure sensors response signals
}
     3c8:	ae 96       	adiw	r28, 0x2e	; 46
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <DHT_read>:

u8 DHT_read(void)
{
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	a3 97       	sbiw	r28, 0x23	; 35
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
	u8 bitLogic=0 ,i;
     3ee:	19 82       	std	Y+1, r1	; 0x01
	pinDirection(DHT_PIN,INPUT);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	8f e1       	ldi	r24, 0x1F	; 31
     3f4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <pinDirection>
	for (i=7;i>=0;i--)
     3f8:	87 e0       	ldi	r24, 0x07	; 7
     3fa:	8a 83       	std	Y+2, r24	; 0x02
	{
		
		while (!readPin(DHT_PIN));
     3fc:	00 00       	nop
     3fe:	8f e1       	ldi	r24, 0x1F	; 31
     400:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <readPin>
     404:	88 23       	and	r24, r24
     406:	d9 f3       	breq	.-10     	; 0x3fe <DHT_read+0x24>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	a0 ef       	ldi	r26, 0xF0	; 240
     40e:	b1 e4       	ldi	r27, 0x41	; 65
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	9c 83       	std	Y+4, r25	; 0x04
     414:	ad 83       	std	Y+5, r26	; 0x05
     416:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     418:	2b ea       	ldi	r18, 0xAB	; 171
     41a:	3a ea       	ldi	r19, 0xAA	; 170
     41c:	4a ea       	ldi	r20, 0xAA	; 170
     41e:	50 e4       	ldi	r21, 0x40	; 64
     420:	6b 81       	ldd	r22, Y+3	; 0x03
     422:	7c 81       	ldd	r23, Y+4	; 0x04
     424:	8d 81       	ldd	r24, Y+5	; 0x05
     426:	9e 81       	ldd	r25, Y+6	; 0x06
     428:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     42c:	dc 01       	movw	r26, r24
     42e:	cb 01       	movw	r24, r22
     430:	8f 83       	std	Y+7, r24	; 0x07
     432:	98 87       	std	Y+8, r25	; 0x08
     434:	a9 87       	std	Y+9, r26	; 0x09
     436:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	40 e8       	ldi	r20, 0x80	; 128
     43e:	50 e4       	ldi	r21, 0x40	; 64
     440:	6b 81       	ldd	r22, Y+3	; 0x03
     442:	7c 81       	ldd	r23, Y+4	; 0x04
     444:	8d 81       	ldd	r24, Y+5	; 0x05
     446:	9e 81       	ldd	r25, Y+6	; 0x06
     448:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	8b 87       	std	Y+11, r24	; 0x0b
     452:	9c 87       	std	Y+12, r25	; 0x0c
     454:	ad 87       	std	Y+13, r26	; 0x0d
     456:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e8       	ldi	r20, 0x80	; 128
     45e:	5f e3       	ldi	r21, 0x3F	; 63
     460:	6f 81       	ldd	r22, Y+7	; 0x07
     462:	78 85       	ldd	r23, Y+8	; 0x08
     464:	89 85       	ldd	r24, Y+9	; 0x09
     466:	9a 85       	ldd	r25, Y+10	; 0x0a
     468:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     46c:	88 23       	and	r24, r24
     46e:	1c f4       	brge	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		__ticks = 1;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	8f 87       	std	Y+15, r24	; 0x0f
     474:	b6 c0       	rjmp	.+364    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
	else if (__tmp2 > 65535)
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	3f ef       	ldi	r19, 0xFF	; 255
     47a:	4f e7       	ldi	r20, 0x7F	; 127
     47c:	57 e4       	ldi	r21, 0x47	; 71
     47e:	6b 85       	ldd	r22, Y+11	; 0x0b
     480:	7c 85       	ldd	r23, Y+12	; 0x0c
     482:	8d 85       	ldd	r24, Y+13	; 0x0d
     484:	9e 85       	ldd	r25, Y+14	; 0x0e
     486:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     48a:	18 16       	cp	r1, r24
     48c:	0c f0       	brlt	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	7f c0       	rjmp	.+254    	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
	{
		_delay_ms(__us / 1000.0);
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	4a e7       	ldi	r20, 0x7A	; 122
     496:	54 e4       	ldi	r21, 0x44	; 68
     498:	6b 81       	ldd	r22, Y+3	; 0x03
     49a:	7c 81       	ldd	r23, Y+4	; 0x04
     49c:	8d 81       	ldd	r24, Y+5	; 0x05
     49e:	9e 81       	ldd	r25, Y+6	; 0x06
     4a0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
     4a4:	dc 01       	movw	r26, r24
     4a6:	cb 01       	movw	r24, r22
     4a8:	88 8b       	std	Y+16, r24	; 0x10
     4aa:	99 8b       	std	Y+17, r25	; 0x11
     4ac:	aa 8b       	std	Y+18, r26	; 0x12
     4ae:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	4a e7       	ldi	r20, 0x7A	; 122
     4b6:	55 e4       	ldi	r21, 0x45	; 69
     4b8:	68 89       	ldd	r22, Y+16	; 0x10
     4ba:	79 89       	ldd	r23, Y+17	; 0x11
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	9b 89       	ldd	r25, Y+19	; 0x13
     4c0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	8c 8b       	std	Y+20, r24	; 0x14
     4ca:	9d 8b       	std	Y+21, r25	; 0x15
     4cc:	ae 8b       	std	Y+22, r26	; 0x16
     4ce:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e8       	ldi	r20, 0x80	; 128
     4d6:	5f e3       	ldi	r21, 0x3F	; 63
     4d8:	6c 89       	ldd	r22, Y+20	; 0x14
     4da:	7d 89       	ldd	r23, Y+21	; 0x15
     4dc:	8e 89       	ldd	r24, Y+22	; 0x16
     4de:	9f 89       	ldd	r25, Y+23	; 0x17
     4e0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     4e4:	88 23       	and	r24, r24
     4e6:	2c f4       	brge	.+10     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
		__ticks = 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	99 8f       	std	Y+25, r25	; 0x19
     4ee:	88 8f       	std	Y+24, r24	; 0x18
     4f0:	41 c0       	rjmp	.+130    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
	else if (__tmp > 65535)
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	3f ef       	ldi	r19, 0xFF	; 255
     4f6:	4f e7       	ldi	r20, 0x7F	; 127
     4f8:	57 e4       	ldi	r21, 0x47	; 71
     4fa:	6c 89       	ldd	r22, Y+20	; 0x14
     4fc:	7d 89       	ldd	r23, Y+21	; 0x15
     4fe:	8e 89       	ldd	r24, Y+22	; 0x16
     500:	9f 89       	ldd	r25, Y+23	; 0x17
     502:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     506:	18 16       	cp	r1, r24
     508:	5c f5       	brge	.+86     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e2       	ldi	r20, 0x20	; 32
     510:	51 e4       	ldi	r21, 0x41	; 65
     512:	68 89       	ldd	r22, Y+16	; 0x10
     514:	79 89       	ldd	r23, Y+17	; 0x11
     516:	8a 89       	ldd	r24, Y+18	; 0x12
     518:	9b 89       	ldd	r25, Y+19	; 0x13
     51a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	bc 01       	movw	r22, r24
     524:	cd 01       	movw	r24, r26
     526:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	99 8f       	std	Y+25, r25	; 0x19
     530:	88 8f       	std	Y+24, r24	; 0x18
     532:	0f c0       	rjmp	.+30     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     534:	80 e9       	ldi	r24, 0x90	; 144
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	9b 8f       	std	Y+27, r25	; 0x1b
     53a:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     53c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     53e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     544:	9b 8f       	std	Y+27, r25	; 0x1b
     546:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     548:	88 8d       	ldd	r24, Y+24	; 0x18
     54a:	99 8d       	ldd	r25, Y+25	; 0x19
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	99 8f       	std	Y+25, r25	; 0x19
     550:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     552:	88 8d       	ldd	r24, Y+24	; 0x18
     554:	99 8d       	ldd	r25, Y+25	; 0x19
     556:	89 2b       	or	r24, r25
     558:	69 f7       	brne	.-38     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     55a:	8b a1       	ldd	r24, Y+35	; 0x23
     55c:	8f 87       	std	Y+15, r24	; 0x0f
     55e:	41 c0       	rjmp	.+130    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     560:	6c 89       	ldd	r22, Y+20	; 0x14
     562:	7d 89       	ldd	r23, Y+21	; 0x15
     564:	8e 89       	ldd	r24, Y+22	; 0x16
     566:	9f 89       	ldd	r25, Y+23	; 0x17
     568:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	99 8f       	std	Y+25, r25	; 0x19
     572:	88 8f       	std	Y+24, r24	; 0x18
     574:	88 8d       	ldd	r24, Y+24	; 0x18
     576:	99 8d       	ldd	r25, Y+25	; 0x19
     578:	9d 8f       	std	Y+29, r25	; 0x1d
     57a:	8c 8f       	std	Y+28, r24	; 0x1c
     57c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     57e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     584:	9d 8f       	std	Y+29, r25	; 0x1d
     586:	8c 8f       	std	Y+28, r24	; 0x1c
     588:	8b a1       	ldd	r24, Y+35	; 0x23
     58a:	8f 87       	std	Y+15, r24	; 0x0f
     58c:	2a c0       	rjmp	.+84     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	4f e7       	ldi	r20, 0x7F	; 127
     594:	53 e4       	ldi	r21, 0x43	; 67
     596:	6f 81       	ldd	r22, Y+7	; 0x07
     598:	78 85       	ldd	r23, Y+8	; 0x08
     59a:	89 85       	ldd	r24, Y+9	; 0x09
     59c:	9a 85       	ldd	r25, Y+10	; 0x0a
     59e:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     5a2:	18 16       	cp	r1, r24
     5a4:	ac f4       	brge	.+42     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     5a6:	6b 85       	ldd	r22, Y+11	; 0x0b
     5a8:	7c 85       	ldd	r23, Y+12	; 0x0c
     5aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ae:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     5b2:	dc 01       	movw	r26, r24
     5b4:	cb 01       	movw	r24, r22
     5b6:	9f 8f       	std	Y+31, r25	; 0x1f
     5b8:	8e 8f       	std	Y+30, r24	; 0x1e
     5ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5be:	99 a3       	std	Y+33, r25	; 0x21
     5c0:	88 a3       	std	Y+32, r24	; 0x20
     5c2:	88 a1       	ldd	r24, Y+32	; 0x20
     5c4:	99 a1       	ldd	r25, Y+33	; 0x21
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     5ca:	99 a3       	std	Y+33, r25	; 0x21
     5cc:	88 a3       	std	Y+32, r24	; 0x20
     5ce:	0f c0       	rjmp	.+30     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5d0:	6f 81       	ldd	r22, Y+7	; 0x07
     5d2:	78 85       	ldd	r23, Y+8	; 0x08
     5d4:	89 85       	ldd	r24, Y+9	; 0x09
     5d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d8:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	8f 87       	std	Y+15, r24	; 0x0f
     5e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     5e4:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5e6:	8a a1       	ldd	r24, Y+34	; 0x22
     5e8:	8a 95       	dec	r24
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5ec:	8a a3       	std	Y+34, r24	; 0x22
		_delay_us(30);
		if (readPin(DHT_PIN)==0)
     5ee:	8f e1       	ldi	r24, 0x1F	; 31
     5f0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <readPin>
     5f4:	88 23       	and	r24, r24
     5f6:	21 f4       	brne	.+8      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
		{
			bitLogic=bitLogic<<1;
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	88 0f       	add	r24, r24
     5fc:	89 83       	std	Y+1, r24	; 0x01
     5fe:	07 c0       	rjmp	.+14     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
		}
		else
		{
			bitLogic=((bitLogic<<1)|0x01);
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	81 60       	ori	r24, 0x01	; 1
     60c:	89 83       	std	Y+1, r24	; 0x01
		}
		
		while(readPin(DHT_PIN));
     60e:	00 00       	nop
     610:	8f e1       	ldi	r24, 0x1F	; 31
     612:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <readPin>
     616:	88 23       	and	r24, r24
     618:	d9 f7       	brne	.-10     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i;
	pinDirection(DHT_PIN,INPUT);
	for (i=7;i>=0;i--)
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	8a 83       	std	Y+2, r24	; 0x02
			bitLogic=((bitLogic<<1)|0x01);
		}
		
		while(readPin(DHT_PIN));
		
	}
     620:	ed ce       	rjmp	.-550    	; 0x3fc <DHT_read+0x22>

00000622 <LCD_init>:

void disp_strXY(u8 row,u8 col,u8* str)
{
	LCD_GOTXY(row,col);
	disp_str(str);
}
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	2e 97       	sbiw	r28, 0x0e	; 14
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	60 ef       	ldi	r22, 0xF0	; 240
     63a:	8a e3       	ldi	r24, 0x3A	; 58
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <pinsDirection>
     642:	41 e0       	ldi	r20, 0x01	; 1
     644:	6e e0       	ldi	r22, 0x0E	; 14
     646:	87 e3       	ldi	r24, 0x37	; 55
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <pinsDirection>
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	8a e0       	ldi	r24, 0x0A	; 10
     652:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <writePin>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	a0 e2       	ldi	r26, 0x20	; 32
     65c:	b2 e4       	ldi	r27, 0x42	; 66
     65e:	89 83       	std	Y+1, r24	; 0x01
     660:	9a 83       	std	Y+2, r25	; 0x02
     662:	ab 83       	std	Y+3, r26	; 0x03
     664:	bc 83       	std	Y+4, r27	; 0x04
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	4a e7       	ldi	r20, 0x7A	; 122
     66c:	55 e4       	ldi	r21, 0x45	; 69
     66e:	69 81       	ldd	r22, Y+1	; 0x01
     670:	7a 81       	ldd	r23, Y+2	; 0x02
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	9c 81       	ldd	r25, Y+4	; 0x04
     676:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	8d 83       	std	Y+5, r24	; 0x05
     680:	9e 83       	std	Y+6, r25	; 0x06
     682:	af 83       	std	Y+7, r26	; 0x07
     684:	b8 87       	std	Y+8, r27	; 0x08
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e8       	ldi	r20, 0x80	; 128
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	6d 81       	ldd	r22, Y+5	; 0x05
     690:	7e 81       	ldd	r23, Y+6	; 0x06
     692:	8f 81       	ldd	r24, Y+7	; 0x07
     694:	98 85       	ldd	r25, Y+8	; 0x08
     696:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     69a:	88 23       	and	r24, r24
     69c:	2c f4       	brge	.+10     	; 0x6a8 <LCD_init+0x86>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	9a 87       	std	Y+10, r25	; 0x0a
     6a4:	89 87       	std	Y+9, r24	; 0x09
     6a6:	3f c0       	rjmp	.+126    	; 0x726 <LCD_init+0x104>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	3f ef       	ldi	r19, 0xFF	; 255
     6ac:	4f e7       	ldi	r20, 0x7F	; 127
     6ae:	57 e4       	ldi	r21, 0x47	; 71
     6b0:	6d 81       	ldd	r22, Y+5	; 0x05
     6b2:	7e 81       	ldd	r23, Y+6	; 0x06
     6b4:	8f 81       	ldd	r24, Y+7	; 0x07
     6b6:	98 85       	ldd	r25, Y+8	; 0x08
     6b8:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     6bc:	18 16       	cp	r1, r24
     6be:	4c f5       	brge	.+82     	; 0x712 <LCD_init+0xf0>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e2       	ldi	r20, 0x20	; 32
     6c6:	51 e4       	ldi	r21, 0x41	; 65
     6c8:	69 81       	ldd	r22, Y+1	; 0x01
     6ca:	7a 81       	ldd	r23, Y+2	; 0x02
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	bc 01       	movw	r22, r24
     6da:	cd 01       	movw	r24, r26
     6dc:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	9a 87       	std	Y+10, r25	; 0x0a
     6e6:	89 87       	std	Y+9, r24	; 0x09
     6e8:	0f c0       	rjmp	.+30     	; 0x708 <LCD_init+0xe6>
     6ea:	80 e9       	ldi	r24, 0x90	; 144
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9c 87       	std	Y+12, r25	; 0x0c
     6f0:	8b 87       	std	Y+11, r24	; 0x0b
     6f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <LCD_init+0xd4>
     6fa:	9c 87       	std	Y+12, r25	; 0x0c
     6fc:	8b 87       	std	Y+11, r24	; 0x0b
     6fe:	89 85       	ldd	r24, Y+9	; 0x09
     700:	9a 85       	ldd	r25, Y+10	; 0x0a
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	9a 87       	std	Y+10, r25	; 0x0a
     706:	89 87       	std	Y+9, r24	; 0x09
     708:	89 85       	ldd	r24, Y+9	; 0x09
     70a:	9a 85       	ldd	r25, Y+10	; 0x0a
     70c:	89 2b       	or	r24, r25
     70e:	69 f7       	brne	.-38     	; 0x6ea <LCD_init+0xc8>
     710:	14 c0       	rjmp	.+40     	; 0x73a <LCD_init+0x118>
     712:	6d 81       	ldd	r22, Y+5	; 0x05
     714:	7e 81       	ldd	r23, Y+6	; 0x06
     716:	8f 81       	ldd	r24, Y+7	; 0x07
     718:	98 85       	ldd	r25, Y+8	; 0x08
     71a:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     71e:	dc 01       	movw	r26, r24
     720:	cb 01       	movw	r24, r22
     722:	9a 87       	std	Y+10, r25	; 0x0a
     724:	89 87       	std	Y+9, r24	; 0x09
     726:	89 85       	ldd	r24, Y+9	; 0x09
     728:	9a 85       	ldd	r25, Y+10	; 0x0a
     72a:	9e 87       	std	Y+14, r25	; 0x0e
     72c:	8d 87       	std	Y+13, r24	; 0x0d
     72e:	8d 85       	ldd	r24, Y+13	; 0x0d
     730:	9e 85       	ldd	r25, Y+14	; 0x0e
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <LCD_init+0x110>
     736:	9e 87       	std	Y+14, r25	; 0x0e
     738:	8d 87       	std	Y+13, r24	; 0x0d
     73a:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_ret_Home>
     73e:	86 e0       	ldi	r24, 0x06	; 6
     740:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_send_cmd>
     744:	8f e0       	ldi	r24, 0x0F	; 15
     746:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_send_cmd>
     74a:	80 e1       	ldi	r24, 0x10	; 16
     74c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_send_cmd>
     750:	88 e2       	ldi	r24, 0x28	; 40
     752:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_send_cmd>
     756:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_CLEAR>
     75a:	2e 96       	adiw	r28, 0x0e	; 14
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <LCD_CLEAR>:
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	2e 97       	sbiw	r28, 0x0e	; 14
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_send_cmd>
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	a0 e0       	ldi	r26, 0x00	; 0
     78c:	b0 e4       	ldi	r27, 0x40	; 64
     78e:	89 83       	std	Y+1, r24	; 0x01
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	ab 83       	std	Y+3, r26	; 0x03
     794:	bc 83       	std	Y+4, r27	; 0x04
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	4a e7       	ldi	r20, 0x7A	; 122
     79c:	55 e4       	ldi	r21, 0x45	; 69
     79e:	69 81       	ldd	r22, Y+1	; 0x01
     7a0:	7a 81       	ldd	r23, Y+2	; 0x02
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	8d 83       	std	Y+5, r24	; 0x05
     7b0:	9e 83       	std	Y+6, r25	; 0x06
     7b2:	af 83       	std	Y+7, r26	; 0x07
     7b4:	b8 87       	std	Y+8, r27	; 0x08
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e8       	ldi	r20, 0x80	; 128
     7bc:	5f e3       	ldi	r21, 0x3F	; 63
     7be:	6d 81       	ldd	r22, Y+5	; 0x05
     7c0:	7e 81       	ldd	r23, Y+6	; 0x06
     7c2:	8f 81       	ldd	r24, Y+7	; 0x07
     7c4:	98 85       	ldd	r25, Y+8	; 0x08
     7c6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     7ca:	88 23       	and	r24, r24
     7cc:	2c f4       	brge	.+10     	; 0x7d8 <LCD_CLEAR+0x6c>
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9a 87       	std	Y+10, r25	; 0x0a
     7d4:	89 87       	std	Y+9, r24	; 0x09
     7d6:	3f c0       	rjmp	.+126    	; 0x856 <LCD_CLEAR+0xea>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f e7       	ldi	r20, 0x7F	; 127
     7de:	57 e4       	ldi	r21, 0x47	; 71
     7e0:	6d 81       	ldd	r22, Y+5	; 0x05
     7e2:	7e 81       	ldd	r23, Y+6	; 0x06
     7e4:	8f 81       	ldd	r24, Y+7	; 0x07
     7e6:	98 85       	ldd	r25, Y+8	; 0x08
     7e8:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     7ec:	18 16       	cp	r1, r24
     7ee:	4c f5       	brge	.+82     	; 0x842 <LCD_CLEAR+0xd6>
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 e2       	ldi	r20, 0x20	; 32
     7f6:	51 e4       	ldi	r21, 0x41	; 65
     7f8:	69 81       	ldd	r22, Y+1	; 0x01
     7fa:	7a 81       	ldd	r23, Y+2	; 0x02
     7fc:	8b 81       	ldd	r24, Y+3	; 0x03
     7fe:	9c 81       	ldd	r25, Y+4	; 0x04
     800:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     804:	dc 01       	movw	r26, r24
     806:	cb 01       	movw	r24, r22
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     810:	dc 01       	movw	r26, r24
     812:	cb 01       	movw	r24, r22
     814:	9a 87       	std	Y+10, r25	; 0x0a
     816:	89 87       	std	Y+9, r24	; 0x09
     818:	0f c0       	rjmp	.+30     	; 0x838 <LCD_CLEAR+0xcc>
     81a:	80 e9       	ldi	r24, 0x90	; 144
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	9c 87       	std	Y+12, r25	; 0x0c
     820:	8b 87       	std	Y+11, r24	; 0x0b
     822:	8b 85       	ldd	r24, Y+11	; 0x0b
     824:	9c 85       	ldd	r25, Y+12	; 0x0c
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <LCD_CLEAR+0xba>
     82a:	9c 87       	std	Y+12, r25	; 0x0c
     82c:	8b 87       	std	Y+11, r24	; 0x0b
     82e:	89 85       	ldd	r24, Y+9	; 0x09
     830:	9a 85       	ldd	r25, Y+10	; 0x0a
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	9a 87       	std	Y+10, r25	; 0x0a
     836:	89 87       	std	Y+9, r24	; 0x09
     838:	89 85       	ldd	r24, Y+9	; 0x09
     83a:	9a 85       	ldd	r25, Y+10	; 0x0a
     83c:	89 2b       	or	r24, r25
     83e:	69 f7       	brne	.-38     	; 0x81a <LCD_CLEAR+0xae>
     840:	14 c0       	rjmp	.+40     	; 0x86a <__stack+0xb>
     842:	6d 81       	ldd	r22, Y+5	; 0x05
     844:	7e 81       	ldd	r23, Y+6	; 0x06
     846:	8f 81       	ldd	r24, Y+7	; 0x07
     848:	98 85       	ldd	r25, Y+8	; 0x08
     84a:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	9a 87       	std	Y+10, r25	; 0x0a
     854:	89 87       	std	Y+9, r24	; 0x09
     856:	89 85       	ldd	r24, Y+9	; 0x09
     858:	9a 85       	ldd	r25, Y+10	; 0x0a
     85a:	9e 87       	std	Y+14, r25	; 0x0e
     85c:	8d 87       	std	Y+13, r24	; 0x0d
     85e:	8d 85       	ldd	r24, Y+13	; 0x0d
     860:	9e 85       	ldd	r25, Y+14	; 0x0e
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <__stack+0x3>
     866:	9e 87       	std	Y+14, r25	; 0x0e
     868:	8d 87       	std	Y+13, r24	; 0x0d
     86a:	2e 96       	adiw	r28, 0x0e	; 14
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <LCD_ret_Home>:
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	2e 97       	sbiw	r28, 0x0e	; 14
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_send_cmd>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	a0 e0       	ldi	r26, 0x00	; 0
     89c:	b0 e4       	ldi	r27, 0x40	; 64
     89e:	89 83       	std	Y+1, r24	; 0x01
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	ab 83       	std	Y+3, r26	; 0x03
     8a4:	bc 83       	std	Y+4, r27	; 0x04
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	4a e7       	ldi	r20, 0x7A	; 122
     8ac:	55 e4       	ldi	r21, 0x45	; 69
     8ae:	69 81       	ldd	r22, Y+1	; 0x01
     8b0:	7a 81       	ldd	r23, Y+2	; 0x02
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	9c 81       	ldd	r25, Y+4	; 0x04
     8b6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	8d 83       	std	Y+5, r24	; 0x05
     8c0:	9e 83       	std	Y+6, r25	; 0x06
     8c2:	af 83       	std	Y+7, r26	; 0x07
     8c4:	b8 87       	std	Y+8, r27	; 0x08
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e8       	ldi	r20, 0x80	; 128
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	6d 81       	ldd	r22, Y+5	; 0x05
     8d0:	7e 81       	ldd	r23, Y+6	; 0x06
     8d2:	8f 81       	ldd	r24, Y+7	; 0x07
     8d4:	98 85       	ldd	r25, Y+8	; 0x08
     8d6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     8da:	88 23       	and	r24, r24
     8dc:	2c f4       	brge	.+10     	; 0x8e8 <LCD_ret_Home+0x6c>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	9a 87       	std	Y+10, r25	; 0x0a
     8e4:	89 87       	std	Y+9, r24	; 0x09
     8e6:	3f c0       	rjmp	.+126    	; 0x966 <LCD_ret_Home+0xea>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	3f ef       	ldi	r19, 0xFF	; 255
     8ec:	4f e7       	ldi	r20, 0x7F	; 127
     8ee:	57 e4       	ldi	r21, 0x47	; 71
     8f0:	6d 81       	ldd	r22, Y+5	; 0x05
     8f2:	7e 81       	ldd	r23, Y+6	; 0x06
     8f4:	8f 81       	ldd	r24, Y+7	; 0x07
     8f6:	98 85       	ldd	r25, Y+8	; 0x08
     8f8:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     8fc:	18 16       	cp	r1, r24
     8fe:	4c f5       	brge	.+82     	; 0x952 <LCD_ret_Home+0xd6>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e2       	ldi	r20, 0x20	; 32
     906:	51 e4       	ldi	r21, 0x41	; 65
     908:	69 81       	ldd	r22, Y+1	; 0x01
     90a:	7a 81       	ldd	r23, Y+2	; 0x02
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	9c 81       	ldd	r25, Y+4	; 0x04
     910:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	bc 01       	movw	r22, r24
     91a:	cd 01       	movw	r24, r26
     91c:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	9a 87       	std	Y+10, r25	; 0x0a
     926:	89 87       	std	Y+9, r24	; 0x09
     928:	0f c0       	rjmp	.+30     	; 0x948 <LCD_ret_Home+0xcc>
     92a:	80 e9       	ldi	r24, 0x90	; 144
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	9c 87       	std	Y+12, r25	; 0x0c
     930:	8b 87       	std	Y+11, r24	; 0x0b
     932:	8b 85       	ldd	r24, Y+11	; 0x0b
     934:	9c 85       	ldd	r25, Y+12	; 0x0c
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <LCD_ret_Home+0xba>
     93a:	9c 87       	std	Y+12, r25	; 0x0c
     93c:	8b 87       	std	Y+11, r24	; 0x0b
     93e:	89 85       	ldd	r24, Y+9	; 0x09
     940:	9a 85       	ldd	r25, Y+10	; 0x0a
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	9a 87       	std	Y+10, r25	; 0x0a
     946:	89 87       	std	Y+9, r24	; 0x09
     948:	89 85       	ldd	r24, Y+9	; 0x09
     94a:	9a 85       	ldd	r25, Y+10	; 0x0a
     94c:	89 2b       	or	r24, r25
     94e:	69 f7       	brne	.-38     	; 0x92a <LCD_ret_Home+0xae>
     950:	14 c0       	rjmp	.+40     	; 0x97a <LCD_ret_Home+0xfe>
     952:	6d 81       	ldd	r22, Y+5	; 0x05
     954:	7e 81       	ldd	r23, Y+6	; 0x06
     956:	8f 81       	ldd	r24, Y+7	; 0x07
     958:	98 85       	ldd	r25, Y+8	; 0x08
     95a:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	9a 87       	std	Y+10, r25	; 0x0a
     964:	89 87       	std	Y+9, r24	; 0x09
     966:	89 85       	ldd	r24, Y+9	; 0x09
     968:	9a 85       	ldd	r25, Y+10	; 0x0a
     96a:	9e 87       	std	Y+14, r25	; 0x0e
     96c:	8d 87       	std	Y+13, r24	; 0x0d
     96e:	8d 85       	ldd	r24, Y+13	; 0x0d
     970:	9e 85       	ldd	r25, Y+14	; 0x0e
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <LCD_ret_Home+0xf6>
     976:	9e 87       	std	Y+14, r25	; 0x0e
     978:	8d 87       	std	Y+13, r24	; 0x0d
     97a:	2e 96       	adiw	r28, 0x0e	; 14
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <SendToLCD>:
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	a1 97       	sbiw	r28, 0x21	; 33
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	89 a3       	std	Y+33, r24	; 0x21
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	60 ef       	ldi	r22, 0xF0	; 240
     9a6:	8b e3       	ldi	r24, 0x3B	; 59
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 3c 0b 	call	0x1678	; 0x1678 <writePins>
     9ae:	89 a1       	ldd	r24, Y+33	; 0x21
     9b0:	80 7f       	andi	r24, 0xF0	; 240
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	68 2f       	mov	r22, r24
     9b6:	8b e3       	ldi	r24, 0x3B	; 59
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 3c 0b 	call	0x1678	; 0x1678 <writePins>
     9be:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_latch>
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	60 ef       	ldi	r22, 0xF0	; 240
     9c6:	8b e3       	ldi	r24, 0x3B	; 59
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 3c 0b 	call	0x1678	; 0x1678 <writePins>
     9ce:	89 a1       	ldd	r24, Y+33	; 0x21
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	82 95       	swap	r24
     9d6:	92 95       	swap	r25
     9d8:	90 7f       	andi	r25, 0xF0	; 240
     9da:	98 27       	eor	r25, r24
     9dc:	80 7f       	andi	r24, 0xF0	; 240
     9de:	98 27       	eor	r25, r24
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	68 2f       	mov	r22, r24
     9e4:	8b e3       	ldi	r24, 0x3B	; 59
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <writePins>
     9ec:	0e 94 12 06 	call	0xc24	; 0xc24 <LCD_latch>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	a8 e4       	ldi	r26, 0x48	; 72
     9f6:	b2 e4       	ldi	r27, 0x42	; 66
     9f8:	89 83       	std	Y+1, r24	; 0x01
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	ab 83       	std	Y+3, r26	; 0x03
     9fe:	bc 83       	std	Y+4, r27	; 0x04
     a00:	2b ea       	ldi	r18, 0xAB	; 171
     a02:	3a ea       	ldi	r19, 0xAA	; 170
     a04:	4a ea       	ldi	r20, 0xAA	; 170
     a06:	50 e4       	ldi	r21, 0x40	; 64
     a08:	69 81       	ldd	r22, Y+1	; 0x01
     a0a:	7a 81       	ldd	r23, Y+2	; 0x02
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	8d 83       	std	Y+5, r24	; 0x05
     a1a:	9e 83       	std	Y+6, r25	; 0x06
     a1c:	af 83       	std	Y+7, r26	; 0x07
     a1e:	b8 87       	std	Y+8, r27	; 0x08
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e8       	ldi	r20, 0x80	; 128
     a26:	50 e4       	ldi	r21, 0x40	; 64
     a28:	69 81       	ldd	r22, Y+1	; 0x01
     a2a:	7a 81       	ldd	r23, Y+2	; 0x02
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	89 87       	std	Y+9, r24	; 0x09
     a3a:	9a 87       	std	Y+10, r25	; 0x0a
     a3c:	ab 87       	std	Y+11, r26	; 0x0b
     a3e:	bc 87       	std	Y+12, r27	; 0x0c
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e8       	ldi	r20, 0x80	; 128
     a46:	5f e3       	ldi	r21, 0x3F	; 63
     a48:	6d 81       	ldd	r22, Y+5	; 0x05
     a4a:	7e 81       	ldd	r23, Y+6	; 0x06
     a4c:	8f 81       	ldd	r24, Y+7	; 0x07
     a4e:	98 85       	ldd	r25, Y+8	; 0x08
     a50:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     a54:	88 23       	and	r24, r24
     a56:	1c f4       	brge	.+6      	; 0xa5e <SendToLCD+0xd2>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	8d 87       	std	Y+13, r24	; 0x0d
     a5c:	b2 c0       	rjmp	.+356    	; 0xbc2 <SendToLCD+0x236>
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	3f ef       	ldi	r19, 0xFF	; 255
     a62:	4f e7       	ldi	r20, 0x7F	; 127
     a64:	57 e4       	ldi	r21, 0x47	; 71
     a66:	69 85       	ldd	r22, Y+9	; 0x09
     a68:	7a 85       	ldd	r23, Y+10	; 0x0a
     a6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a6e:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     a72:	18 16       	cp	r1, r24
     a74:	0c f0       	brlt	.+2      	; 0xa78 <SendToLCD+0xec>
     a76:	7b c0       	rjmp	.+246    	; 0xb6e <SendToLCD+0x1e2>
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	4a e7       	ldi	r20, 0x7A	; 122
     a7e:	54 e4       	ldi	r21, 0x44	; 68
     a80:	69 81       	ldd	r22, Y+1	; 0x01
     a82:	7a 81       	ldd	r23, Y+2	; 0x02
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	8e 87       	std	Y+14, r24	; 0x0e
     a92:	9f 87       	std	Y+15, r25	; 0x0f
     a94:	a8 8b       	std	Y+16, r26	; 0x10
     a96:	b9 8b       	std	Y+17, r27	; 0x11
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	4a e7       	ldi	r20, 0x7A	; 122
     a9e:	55 e4       	ldi	r21, 0x45	; 69
     aa0:	6e 85       	ldd	r22, Y+14	; 0x0e
     aa2:	7f 85       	ldd	r23, Y+15	; 0x0f
     aa4:	88 89       	ldd	r24, Y+16	; 0x10
     aa6:	99 89       	ldd	r25, Y+17	; 0x11
     aa8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	8a 8b       	std	Y+18, r24	; 0x12
     ab2:	9b 8b       	std	Y+19, r25	; 0x13
     ab4:	ac 8b       	std	Y+20, r26	; 0x14
     ab6:	bd 8b       	std	Y+21, r27	; 0x15
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e8       	ldi	r20, 0x80	; 128
     abe:	5f e3       	ldi	r21, 0x3F	; 63
     ac0:	6a 89       	ldd	r22, Y+18	; 0x12
     ac2:	7b 89       	ldd	r23, Y+19	; 0x13
     ac4:	8c 89       	ldd	r24, Y+20	; 0x14
     ac6:	9d 89       	ldd	r25, Y+21	; 0x15
     ac8:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     acc:	88 23       	and	r24, r24
     ace:	2c f4       	brge	.+10     	; 0xada <SendToLCD+0x14e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	9f 8b       	std	Y+23, r25	; 0x17
     ad6:	8e 8b       	std	Y+22, r24	; 0x16
     ad8:	3f c0       	rjmp	.+126    	; 0xb58 <SendToLCD+0x1cc>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	3f ef       	ldi	r19, 0xFF	; 255
     ade:	4f e7       	ldi	r20, 0x7F	; 127
     ae0:	57 e4       	ldi	r21, 0x47	; 71
     ae2:	6a 89       	ldd	r22, Y+18	; 0x12
     ae4:	7b 89       	ldd	r23, Y+19	; 0x13
     ae6:	8c 89       	ldd	r24, Y+20	; 0x14
     ae8:	9d 89       	ldd	r25, Y+21	; 0x15
     aea:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     aee:	18 16       	cp	r1, r24
     af0:	4c f5       	brge	.+82     	; 0xb44 <SendToLCD+0x1b8>
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	40 e2       	ldi	r20, 0x20	; 32
     af8:	51 e4       	ldi	r21, 0x41	; 65
     afa:	6e 85       	ldd	r22, Y+14	; 0x0e
     afc:	7f 85       	ldd	r23, Y+15	; 0x0f
     afe:	88 89       	ldd	r24, Y+16	; 0x10
     b00:	99 89       	ldd	r25, Y+17	; 0x11
     b02:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	bc 01       	movw	r22, r24
     b0c:	cd 01       	movw	r24, r26
     b0e:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	9f 8b       	std	Y+23, r25	; 0x17
     b18:	8e 8b       	std	Y+22, r24	; 0x16
     b1a:	0f c0       	rjmp	.+30     	; 0xb3a <SendToLCD+0x1ae>
     b1c:	80 e9       	ldi	r24, 0x90	; 144
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	99 8f       	std	Y+25, r25	; 0x19
     b22:	88 8f       	std	Y+24, r24	; 0x18
     b24:	88 8d       	ldd	r24, Y+24	; 0x18
     b26:	99 8d       	ldd	r25, Y+25	; 0x19
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <SendToLCD+0x19c>
     b2c:	99 8f       	std	Y+25, r25	; 0x19
     b2e:	88 8f       	std	Y+24, r24	; 0x18
     b30:	8e 89       	ldd	r24, Y+22	; 0x16
     b32:	9f 89       	ldd	r25, Y+23	; 0x17
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	9f 8b       	std	Y+23, r25	; 0x17
     b38:	8e 8b       	std	Y+22, r24	; 0x16
     b3a:	8e 89       	ldd	r24, Y+22	; 0x16
     b3c:	9f 89       	ldd	r25, Y+23	; 0x17
     b3e:	89 2b       	or	r24, r25
     b40:	69 f7       	brne	.-38     	; 0xb1c <SendToLCD+0x190>
     b42:	3f c0       	rjmp	.+126    	; 0xbc2 <SendToLCD+0x236>
     b44:	6a 89       	ldd	r22, Y+18	; 0x12
     b46:	7b 89       	ldd	r23, Y+19	; 0x13
     b48:	8c 89       	ldd	r24, Y+20	; 0x14
     b4a:	9d 89       	ldd	r25, Y+21	; 0x15
     b4c:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	9f 8b       	std	Y+23, r25	; 0x17
     b56:	8e 8b       	std	Y+22, r24	; 0x16
     b58:	8e 89       	ldd	r24, Y+22	; 0x16
     b5a:	9f 89       	ldd	r25, Y+23	; 0x17
     b5c:	9b 8f       	std	Y+27, r25	; 0x1b
     b5e:	8a 8f       	std	Y+26, r24	; 0x1a
     b60:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b62:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <SendToLCD+0x1d8>
     b68:	9b 8f       	std	Y+27, r25	; 0x1b
     b6a:	8a 8f       	std	Y+26, r24	; 0x1a
     b6c:	2a c0       	rjmp	.+84     	; 0xbc2 <SendToLCD+0x236>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	4f e7       	ldi	r20, 0x7F	; 127
     b74:	53 e4       	ldi	r21, 0x43	; 67
     b76:	6d 81       	ldd	r22, Y+5	; 0x05
     b78:	7e 81       	ldd	r23, Y+6	; 0x06
     b7a:	8f 81       	ldd	r24, Y+7	; 0x07
     b7c:	98 85       	ldd	r25, Y+8	; 0x08
     b7e:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     b82:	18 16       	cp	r1, r24
     b84:	ac f4       	brge	.+42     	; 0xbb0 <SendToLCD+0x224>
     b86:	69 85       	ldd	r22, Y+9	; 0x09
     b88:	7a 85       	ldd	r23, Y+10	; 0x0a
     b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b8e:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	9d 8f       	std	Y+29, r25	; 0x1d
     b98:	8c 8f       	std	Y+28, r24	; 0x1c
     b9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b9c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b9e:	9f 8f       	std	Y+31, r25	; 0x1f
     ba0:	8e 8f       	std	Y+30, r24	; 0x1e
     ba2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ba4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <SendToLCD+0x21a>
     baa:	9f 8f       	std	Y+31, r25	; 0x1f
     bac:	8e 8f       	std	Y+30, r24	; 0x1e
     bae:	0f c0       	rjmp	.+30     	; 0xbce <SendToLCD+0x242>
     bb0:	6d 81       	ldd	r22, Y+5	; 0x05
     bb2:	7e 81       	ldd	r23, Y+6	; 0x06
     bb4:	8f 81       	ldd	r24, Y+7	; 0x07
     bb6:	98 85       	ldd	r25, Y+8	; 0x08
     bb8:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	8d 87       	std	Y+13, r24	; 0x0d
     bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc4:	88 a3       	std	Y+32, r24	; 0x20
     bc6:	88 a1       	ldd	r24, Y+32	; 0x20
     bc8:	8a 95       	dec	r24
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <SendToLCD+0x23c>
     bcc:	88 a3       	std	Y+32, r24	; 0x20
     bce:	a1 96       	adiw	r28, 0x21	; 33
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <LCD_send_cmd>:
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	1f 92       	push	r1
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	89 e0       	ldi	r24, 0x09	; 9
     bf0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <writePin>
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	0e 94 c6 04 	call	0x98c	; 0x98c <SendToLCD>
     bfa:	0f 90       	pop	r0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <LCD_send_data>:
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	1f 92       	push	r1
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	89 e0       	ldi	r24, 0x09	; 9
     c12:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <writePin>
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	0e 94 c6 04 	call	0x98c	; 0x98c <SendToLCD>
     c1c:	0f 90       	pop	r0
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <LCD_latch>:
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	c0 54       	subi	r28, 0x40	; 64
     c2e:	d1 09       	sbc	r29, r1
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	8b e0       	ldi	r24, 0x0B	; 11
     c3e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <writePin>
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	a8 e4       	ldi	r26, 0x48	; 72
     c48:	b2 e4       	ldi	r27, 0x42	; 66
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	ab 83       	std	Y+3, r26	; 0x03
     c50:	bc 83       	std	Y+4, r27	; 0x04
     c52:	2b ea       	ldi	r18, 0xAB	; 171
     c54:	3a ea       	ldi	r19, 0xAA	; 170
     c56:	4a ea       	ldi	r20, 0xAA	; 170
     c58:	50 e4       	ldi	r21, 0x40	; 64
     c5a:	69 81       	ldd	r22, Y+1	; 0x01
     c5c:	7a 81       	ldd	r23, Y+2	; 0x02
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	af 83       	std	Y+7, r26	; 0x07
     c70:	b8 87       	std	Y+8, r27	; 0x08
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	50 e4       	ldi	r21, 0x40	; 64
     c7a:	69 81       	ldd	r22, Y+1	; 0x01
     c7c:	7a 81       	ldd	r23, Y+2	; 0x02
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	9c 81       	ldd	r25, Y+4	; 0x04
     c82:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	89 87       	std	Y+9, r24	; 0x09
     c8c:	9a 87       	std	Y+10, r25	; 0x0a
     c8e:	ab 87       	std	Y+11, r26	; 0x0b
     c90:	bc 87       	std	Y+12, r27	; 0x0c
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e8       	ldi	r20, 0x80	; 128
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	6d 81       	ldd	r22, Y+5	; 0x05
     c9c:	7e 81       	ldd	r23, Y+6	; 0x06
     c9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ca0:	98 85       	ldd	r25, Y+8	; 0x08
     ca2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     ca6:	88 23       	and	r24, r24
     ca8:	1c f4       	brge	.+6      	; 0xcb0 <LCD_latch+0x8c>
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	8d 87       	std	Y+13, r24	; 0x0d
     cae:	b2 c0       	rjmp	.+356    	; 0xe14 <LCD_latch+0x1f0>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	3f ef       	ldi	r19, 0xFF	; 255
     cb4:	4f e7       	ldi	r20, 0x7F	; 127
     cb6:	57 e4       	ldi	r21, 0x47	; 71
     cb8:	69 85       	ldd	r22, Y+9	; 0x09
     cba:	7a 85       	ldd	r23, Y+10	; 0x0a
     cbc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cbe:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc0:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     cc4:	18 16       	cp	r1, r24
     cc6:	0c f0       	brlt	.+2      	; 0xcca <LCD_latch+0xa6>
     cc8:	7b c0       	rjmp	.+246    	; 0xdc0 <LCD_latch+0x19c>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	4a e7       	ldi	r20, 0x7A	; 122
     cd0:	54 e4       	ldi	r21, 0x44	; 68
     cd2:	69 81       	ldd	r22, Y+1	; 0x01
     cd4:	7a 81       	ldd	r23, Y+2	; 0x02
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	8e 87       	std	Y+14, r24	; 0x0e
     ce4:	9f 87       	std	Y+15, r25	; 0x0f
     ce6:	a8 8b       	std	Y+16, r26	; 0x10
     ce8:	b9 8b       	std	Y+17, r27	; 0x11
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	4a e7       	ldi	r20, 0x7A	; 122
     cf0:	55 e4       	ldi	r21, 0x45	; 69
     cf2:	6e 85       	ldd	r22, Y+14	; 0x0e
     cf4:	7f 85       	ldd	r23, Y+15	; 0x0f
     cf6:	88 89       	ldd	r24, Y+16	; 0x10
     cf8:	99 89       	ldd	r25, Y+17	; 0x11
     cfa:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	8a 8b       	std	Y+18, r24	; 0x12
     d04:	9b 8b       	std	Y+19, r25	; 0x13
     d06:	ac 8b       	std	Y+20, r26	; 0x14
     d08:	bd 8b       	std	Y+21, r27	; 0x15
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e8       	ldi	r20, 0x80	; 128
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	6a 89       	ldd	r22, Y+18	; 0x12
     d14:	7b 89       	ldd	r23, Y+19	; 0x13
     d16:	8c 89       	ldd	r24, Y+20	; 0x14
     d18:	9d 89       	ldd	r25, Y+21	; 0x15
     d1a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     d1e:	88 23       	and	r24, r24
     d20:	2c f4       	brge	.+10     	; 0xd2c <LCD_latch+0x108>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9f 8b       	std	Y+23, r25	; 0x17
     d28:	8e 8b       	std	Y+22, r24	; 0x16
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <LCD_latch+0x186>
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	4f e7       	ldi	r20, 0x7F	; 127
     d32:	57 e4       	ldi	r21, 0x47	; 71
     d34:	6a 89       	ldd	r22, Y+18	; 0x12
     d36:	7b 89       	ldd	r23, Y+19	; 0x13
     d38:	8c 89       	ldd	r24, Y+20	; 0x14
     d3a:	9d 89       	ldd	r25, Y+21	; 0x15
     d3c:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     d40:	18 16       	cp	r1, r24
     d42:	4c f5       	brge	.+82     	; 0xd96 <LCD_latch+0x172>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e2       	ldi	r20, 0x20	; 32
     d4a:	51 e4       	ldi	r21, 0x41	; 65
     d4c:	6e 85       	ldd	r22, Y+14	; 0x0e
     d4e:	7f 85       	ldd	r23, Y+15	; 0x0f
     d50:	88 89       	ldd	r24, Y+16	; 0x10
     d52:	99 89       	ldd	r25, Y+17	; 0x11
     d54:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	9f 8b       	std	Y+23, r25	; 0x17
     d6a:	8e 8b       	std	Y+22, r24	; 0x16
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <LCD_latch+0x168>
     d6e:	80 e9       	ldi	r24, 0x90	; 144
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	99 8f       	std	Y+25, r25	; 0x19
     d74:	88 8f       	std	Y+24, r24	; 0x18
     d76:	88 8d       	ldd	r24, Y+24	; 0x18
     d78:	99 8d       	ldd	r25, Y+25	; 0x19
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <LCD_latch+0x156>
     d7e:	99 8f       	std	Y+25, r25	; 0x19
     d80:	88 8f       	std	Y+24, r24	; 0x18
     d82:	8e 89       	ldd	r24, Y+22	; 0x16
     d84:	9f 89       	ldd	r25, Y+23	; 0x17
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	9f 8b       	std	Y+23, r25	; 0x17
     d8a:	8e 8b       	std	Y+22, r24	; 0x16
     d8c:	8e 89       	ldd	r24, Y+22	; 0x16
     d8e:	9f 89       	ldd	r25, Y+23	; 0x17
     d90:	89 2b       	or	r24, r25
     d92:	69 f7       	brne	.-38     	; 0xd6e <LCD_latch+0x14a>
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <LCD_latch+0x1f0>
     d96:	6a 89       	ldd	r22, Y+18	; 0x12
     d98:	7b 89       	ldd	r23, Y+19	; 0x13
     d9a:	8c 89       	ldd	r24, Y+20	; 0x14
     d9c:	9d 89       	ldd	r25, Y+21	; 0x15
     d9e:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	9f 8b       	std	Y+23, r25	; 0x17
     da8:	8e 8b       	std	Y+22, r24	; 0x16
     daa:	8e 89       	ldd	r24, Y+22	; 0x16
     dac:	9f 89       	ldd	r25, Y+23	; 0x17
     dae:	9b 8f       	std	Y+27, r25	; 0x1b
     db0:	8a 8f       	std	Y+26, r24	; 0x1a
     db2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     db4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <LCD_latch+0x192>
     dba:	9b 8f       	std	Y+27, r25	; 0x1b
     dbc:	8a 8f       	std	Y+26, r24	; 0x1a
     dbe:	2a c0       	rjmp	.+84     	; 0xe14 <LCD_latch+0x1f0>
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	4f e7       	ldi	r20, 0x7F	; 127
     dc6:	53 e4       	ldi	r21, 0x43	; 67
     dc8:	6d 81       	ldd	r22, Y+5	; 0x05
     dca:	7e 81       	ldd	r23, Y+6	; 0x06
     dcc:	8f 81       	ldd	r24, Y+7	; 0x07
     dce:	98 85       	ldd	r25, Y+8	; 0x08
     dd0:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     dd4:	18 16       	cp	r1, r24
     dd6:	ac f4       	brge	.+42     	; 0xe02 <LCD_latch+0x1de>
     dd8:	69 85       	ldd	r22, Y+9	; 0x09
     dda:	7a 85       	ldd	r23, Y+10	; 0x0a
     ddc:	8b 85       	ldd	r24, Y+11	; 0x0b
     dde:	9c 85       	ldd	r25, Y+12	; 0x0c
     de0:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	9d 8f       	std	Y+29, r25	; 0x1d
     dea:	8c 8f       	std	Y+28, r24	; 0x1c
     dec:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dee:	9d 8d       	ldd	r25, Y+29	; 0x1d
     df0:	9f 8f       	std	Y+31, r25	; 0x1f
     df2:	8e 8f       	std	Y+30, r24	; 0x1e
     df4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     df6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <LCD_latch+0x1d4>
     dfc:	9f 8f       	std	Y+31, r25	; 0x1f
     dfe:	8e 8f       	std	Y+30, r24	; 0x1e
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <LCD_latch+0x1fc>
     e02:	6d 81       	ldd	r22, Y+5	; 0x05
     e04:	7e 81       	ldd	r23, Y+6	; 0x06
     e06:	8f 81       	ldd	r24, Y+7	; 0x07
     e08:	98 85       	ldd	r25, Y+8	; 0x08
     e0a:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	8d 87       	std	Y+13, r24	; 0x0d
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	88 a3       	std	Y+32, r24	; 0x20
     e18:	88 a1       	ldd	r24, Y+32	; 0x20
     e1a:	8a 95       	dec	r24
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <LCD_latch+0x1f6>
     e1e:	88 a3       	std	Y+32, r24	; 0x20
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	8b e0       	ldi	r24, 0x0B	; 11
     e24:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <writePin>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a8 e4       	ldi	r26, 0x48	; 72
     e2e:	b2 e4       	ldi	r27, 0x42	; 66
     e30:	89 a3       	std	Y+33, r24	; 0x21
     e32:	9a a3       	std	Y+34, r25	; 0x22
     e34:	ab a3       	std	Y+35, r26	; 0x23
     e36:	bc a3       	std	Y+36, r27	; 0x24
     e38:	2b ea       	ldi	r18, 0xAB	; 171
     e3a:	3a ea       	ldi	r19, 0xAA	; 170
     e3c:	4a ea       	ldi	r20, 0xAA	; 170
     e3e:	50 e4       	ldi	r21, 0x40	; 64
     e40:	69 a1       	ldd	r22, Y+33	; 0x21
     e42:	7a a1       	ldd	r23, Y+34	; 0x22
     e44:	8b a1       	ldd	r24, Y+35	; 0x23
     e46:	9c a1       	ldd	r25, Y+36	; 0x24
     e48:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	8d a3       	std	Y+37, r24	; 0x25
     e52:	9e a3       	std	Y+38, r25	; 0x26
     e54:	af a3       	std	Y+39, r26	; 0x27
     e56:	b8 a7       	std	Y+40, r27	; 0x28
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e8       	ldi	r20, 0x80	; 128
     e5e:	50 e4       	ldi	r21, 0x40	; 64
     e60:	69 a1       	ldd	r22, Y+33	; 0x21
     e62:	7a a1       	ldd	r23, Y+34	; 0x22
     e64:	8b a1       	ldd	r24, Y+35	; 0x23
     e66:	9c a1       	ldd	r25, Y+36	; 0x24
     e68:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	89 a7       	std	Y+41, r24	; 0x29
     e72:	9a a7       	std	Y+42, r25	; 0x2a
     e74:	ab a7       	std	Y+43, r26	; 0x2b
     e76:	bc a7       	std	Y+44, r27	; 0x2c
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e8       	ldi	r20, 0x80	; 128
     e7e:	5f e3       	ldi	r21, 0x3F	; 63
     e80:	6d a1       	ldd	r22, Y+37	; 0x25
     e82:	7e a1       	ldd	r23, Y+38	; 0x26
     e84:	8f a1       	ldd	r24, Y+39	; 0x27
     e86:	98 a5       	ldd	r25, Y+40	; 0x28
     e88:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     e8c:	88 23       	and	r24, r24
     e8e:	1c f4       	brge	.+6      	; 0xe96 <LCD_latch+0x272>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	8d a7       	std	Y+45, r24	; 0x2d
     e94:	b2 c0       	rjmp	.+356    	; 0xffa <LCD_latch+0x3d6>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	4f e7       	ldi	r20, 0x7F	; 127
     e9c:	57 e4       	ldi	r21, 0x47	; 71
     e9e:	69 a5       	ldd	r22, Y+41	; 0x29
     ea0:	7a a5       	ldd	r23, Y+42	; 0x2a
     ea2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ea4:	9c a5       	ldd	r25, Y+44	; 0x2c
     ea6:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     eaa:	18 16       	cp	r1, r24
     eac:	0c f0       	brlt	.+2      	; 0xeb0 <LCD_latch+0x28c>
     eae:	7b c0       	rjmp	.+246    	; 0xfa6 <LCD_latch+0x382>
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	4a e7       	ldi	r20, 0x7A	; 122
     eb6:	54 e4       	ldi	r21, 0x44	; 68
     eb8:	69 a1       	ldd	r22, Y+33	; 0x21
     eba:	7a a1       	ldd	r23, Y+34	; 0x22
     ebc:	8b a1       	ldd	r24, Y+35	; 0x23
     ebe:	9c a1       	ldd	r25, Y+36	; 0x24
     ec0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	8e a7       	std	Y+46, r24	; 0x2e
     eca:	9f a7       	std	Y+47, r25	; 0x2f
     ecc:	a8 ab       	std	Y+48, r26	; 0x30
     ece:	b9 ab       	std	Y+49, r27	; 0x31
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4a e7       	ldi	r20, 0x7A	; 122
     ed6:	55 e4       	ldi	r21, 0x45	; 69
     ed8:	6e a5       	ldd	r22, Y+46	; 0x2e
     eda:	7f a5       	ldd	r23, Y+47	; 0x2f
     edc:	88 a9       	ldd	r24, Y+48	; 0x30
     ede:	99 a9       	ldd	r25, Y+49	; 0x31
     ee0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	8a ab       	std	Y+50, r24	; 0x32
     eea:	9b ab       	std	Y+51, r25	; 0x33
     eec:	ac ab       	std	Y+52, r26	; 0x34
     eee:	bd ab       	std	Y+53, r27	; 0x35
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	5f e3       	ldi	r21, 0x3F	; 63
     ef8:	6a a9       	ldd	r22, Y+50	; 0x32
     efa:	7b a9       	ldd	r23, Y+51	; 0x33
     efc:	8c a9       	ldd	r24, Y+52	; 0x34
     efe:	9d a9       	ldd	r25, Y+53	; 0x35
     f00:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     f04:	88 23       	and	r24, r24
     f06:	2c f4       	brge	.+10     	; 0xf12 <LCD_latch+0x2ee>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9f ab       	std	Y+55, r25	; 0x37
     f0e:	8e ab       	std	Y+54, r24	; 0x36
     f10:	3f c0       	rjmp	.+126    	; 0xf90 <LCD_latch+0x36c>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	6a a9       	ldd	r22, Y+50	; 0x32
     f1c:	7b a9       	ldd	r23, Y+51	; 0x33
     f1e:	8c a9       	ldd	r24, Y+52	; 0x34
     f20:	9d a9       	ldd	r25, Y+53	; 0x35
     f22:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     f26:	18 16       	cp	r1, r24
     f28:	4c f5       	brge	.+82     	; 0xf7c <LCD_latch+0x358>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	6e a5       	ldd	r22, Y+46	; 0x2e
     f34:	7f a5       	ldd	r23, Y+47	; 0x2f
     f36:	88 a9       	ldd	r24, Y+48	; 0x30
     f38:	99 a9       	ldd	r25, Y+49	; 0x31
     f3a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9f ab       	std	Y+55, r25	; 0x37
     f50:	8e ab       	std	Y+54, r24	; 0x36
     f52:	0f c0       	rjmp	.+30     	; 0xf72 <LCD_latch+0x34e>
     f54:	80 e9       	ldi	r24, 0x90	; 144
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	99 af       	std	Y+57, r25	; 0x39
     f5a:	88 af       	std	Y+56, r24	; 0x38
     f5c:	88 ad       	ldd	r24, Y+56	; 0x38
     f5e:	99 ad       	ldd	r25, Y+57	; 0x39
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <LCD_latch+0x33c>
     f64:	99 af       	std	Y+57, r25	; 0x39
     f66:	88 af       	std	Y+56, r24	; 0x38
     f68:	8e a9       	ldd	r24, Y+54	; 0x36
     f6a:	9f a9       	ldd	r25, Y+55	; 0x37
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	9f ab       	std	Y+55, r25	; 0x37
     f70:	8e ab       	std	Y+54, r24	; 0x36
     f72:	8e a9       	ldd	r24, Y+54	; 0x36
     f74:	9f a9       	ldd	r25, Y+55	; 0x37
     f76:	89 2b       	or	r24, r25
     f78:	69 f7       	brne	.-38     	; 0xf54 <LCD_latch+0x330>
     f7a:	3f c0       	rjmp	.+126    	; 0xffa <LCD_latch+0x3d6>
     f7c:	6a a9       	ldd	r22, Y+50	; 0x32
     f7e:	7b a9       	ldd	r23, Y+51	; 0x33
     f80:	8c a9       	ldd	r24, Y+52	; 0x34
     f82:	9d a9       	ldd	r25, Y+53	; 0x35
     f84:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9f ab       	std	Y+55, r25	; 0x37
     f8e:	8e ab       	std	Y+54, r24	; 0x36
     f90:	8e a9       	ldd	r24, Y+54	; 0x36
     f92:	9f a9       	ldd	r25, Y+55	; 0x37
     f94:	9b af       	std	Y+59, r25	; 0x3b
     f96:	8a af       	std	Y+58, r24	; 0x3a
     f98:	8a ad       	ldd	r24, Y+58	; 0x3a
     f9a:	9b ad       	ldd	r25, Y+59	; 0x3b
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <LCD_latch+0x378>
     fa0:	9b af       	std	Y+59, r25	; 0x3b
     fa2:	8a af       	std	Y+58, r24	; 0x3a
     fa4:	2a c0       	rjmp	.+84     	; 0xffa <LCD_latch+0x3d6>
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	4f e7       	ldi	r20, 0x7F	; 127
     fac:	53 e4       	ldi	r21, 0x43	; 67
     fae:	6d a1       	ldd	r22, Y+37	; 0x25
     fb0:	7e a1       	ldd	r23, Y+38	; 0x26
     fb2:	8f a1       	ldd	r24, Y+39	; 0x27
     fb4:	98 a5       	ldd	r25, Y+40	; 0x28
     fb6:	0e 94 b7 0c 	call	0x196e	; 0x196e <__gesf2>
     fba:	18 16       	cp	r1, r24
     fbc:	ac f4       	brge	.+42     	; 0xfe8 <LCD_latch+0x3c4>
     fbe:	69 a5       	ldd	r22, Y+41	; 0x29
     fc0:	7a a5       	ldd	r23, Y+42	; 0x2a
     fc2:	8b a5       	ldd	r24, Y+43	; 0x2b
     fc4:	9c a5       	ldd	r25, Y+44	; 0x2c
     fc6:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	9d af       	std	Y+61, r25	; 0x3d
     fd0:	8c af       	std	Y+60, r24	; 0x3c
     fd2:	8c ad       	ldd	r24, Y+60	; 0x3c
     fd4:	9d ad       	ldd	r25, Y+61	; 0x3d
     fd6:	9f af       	std	Y+63, r25	; 0x3f
     fd8:	8e af       	std	Y+62, r24	; 0x3e
     fda:	8e ad       	ldd	r24, Y+62	; 0x3e
     fdc:	9f ad       	ldd	r25, Y+63	; 0x3f
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <LCD_latch+0x3ba>
     fe2:	9f af       	std	Y+63, r25	; 0x3f
     fe4:	8e af       	std	Y+62, r24	; 0x3e
     fe6:	1c c0       	rjmp	.+56     	; 0x1020 <LCD_latch+0x3fc>
     fe8:	6d a1       	ldd	r22, Y+37	; 0x25
     fea:	7e a1       	ldd	r23, Y+38	; 0x26
     fec:	8f a1       	ldd	r24, Y+39	; 0x27
     fee:	98 a5       	ldd	r25, Y+40	; 0x28
     ff0:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8d a7       	std	Y+45, r24	; 0x2d
     ffa:	2d a5       	ldd	r18, Y+45	; 0x2d
     ffc:	ce 01       	movw	r24, r28
     ffe:	80 5c       	subi	r24, 0xC0	; 192
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
    1006:	ce 01       	movw	r24, r28
    1008:	80 5c       	subi	r24, 0xC0	; 192
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	fc 01       	movw	r30, r24
    100e:	80 81       	ld	r24, Z
    1010:	28 2f       	mov	r18, r24
    1012:	2a 95       	dec	r18
    1014:	f1 f7       	brne	.-4      	; 0x1012 <LCD_latch+0x3ee>
    1016:	ce 01       	movw	r24, r28
    1018:	80 5c       	subi	r24, 0xC0	; 192
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
    1020:	c0 5c       	subi	r28, 0xC0	; 192
    1022:	df 4f       	sbci	r29, 0xFF	; 255
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <disp_char>:
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	1f 92       	push	r1
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	0e 94 01 06 	call	0xc02	; 0xc02 <LCD_send_data>
    1046:	0f 90       	pop	r0
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <disp_charXY>:
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	00 d0       	rcall	.+0      	; 0x1054 <disp_charXY+0x6>
    1054:	1f 92       	push	r1
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	6a 83       	std	Y+2, r22	; 0x02
    105e:	4b 83       	std	Y+3, r20	; 0x03
    1060:	6a 81       	ldd	r22, Y+2	; 0x02
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	0e 94 66 08 	call	0x10cc	; 0x10cc <LCD_GOTXY>
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	0e 94 1a 08 	call	0x1034	; 0x1034 <disp_char>
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <disp_str>:
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	00 d0       	rcall	.+0      	; 0x1080 <disp_str+0x6>
    1080:	1f 92       	push	r1
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	9b 83       	std	Y+3, r25	; 0x03
    1088:	8a 83       	std	Y+2, r24	; 0x02
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <disp_str+0x30>
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	2a 81       	ldd	r18, Y+2	; 0x02
    1096:	3b 81       	ldd	r19, Y+3	; 0x03
    1098:	82 0f       	add	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	fc 01       	movw	r30, r24
    109e:	80 81       	ld	r24, Z
    10a0:	0e 94 1a 08 	call	0x1034	; 0x1034 <disp_char>
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	2a 81       	ldd	r18, Y+2	; 0x02
    10b2:	3b 81       	ldd	r19, Y+3	; 0x03
    10b4:	82 0f       	add	r24, r18
    10b6:	93 1f       	adc	r25, r19
    10b8:	fc 01       	movw	r30, r24
    10ba:	80 81       	ld	r24, Z
    10bc:	88 23       	and	r24, r24
    10be:	39 f7       	brne	.-50     	; 0x108e <disp_str+0x14>
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <LCD_GOTXY>:
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <LCD_GOTXY+0x6>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	6a 83       	std	Y+2, r22	; 0x02
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	29 f4       	brne	.+10     	; 0x10ea <LCD_GOTXY+0x1e>
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	81 58       	subi	r24, 0x81	; 129
    10e4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_send_cmd>
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <LCD_GOTXY+0x2c>
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <LCD_GOTXY+0x2c>
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	81 54       	subi	r24, 0x41	; 65
    10f4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCD_send_cmd>
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <disp_int>:


void disp_int(u32 intvalue)
{
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	2f 97       	sbiw	r28, 0x0f	; 15
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	6c 87       	std	Y+12, r22	; 0x0c
    1118:	7d 87       	std	Y+13, r23	; 0x0d
    111a:	8e 87       	std	Y+14, r24	; 0x0e
    111c:	9f 87       	std	Y+15, r25	; 0x0f
	u8 string[11]={0};
    111e:	2b e0       	ldi	r18, 0x0B	; 11
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	fc 01       	movw	r30, r24
    1126:	32 2f       	mov	r19, r18
    1128:	11 92       	st	Z+, r1
    112a:	3a 95       	dec	r19
    112c:	e9 f7       	brne	.-6      	; 0x1128 <disp_int+0x26>
		sprintf(string,"%u",intvalue);
    112e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1130:	8f 93       	push	r24
    1132:	8e 85       	ldd	r24, Y+14	; 0x0e
    1134:	8f 93       	push	r24
    1136:	8d 85       	ldd	r24, Y+13	; 0x0d
    1138:	8f 93       	push	r24
    113a:	8c 85       	ldd	r24, Y+12	; 0x0c
    113c:	8f 93       	push	r24
    113e:	80 e6       	ldi	r24, 0x60	; 96
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	89 2f       	mov	r24, r25
    1144:	8f 93       	push	r24
    1146:	80 e6       	ldi	r24, 0x60	; 96
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	8f 93       	push	r24
    114c:	ce 01       	movw	r24, r28
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	9f 93       	push	r25
    1152:	8f 93       	push	r24
    1154:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <sprintf>
    1158:	8d b7       	in	r24, 0x3d	; 61
    115a:	9e b7       	in	r25, 0x3e	; 62
    115c:	08 96       	adiw	r24, 0x08	; 8
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
		disp_str(string);
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	0e 94 3d 08 	call	0x107a	; 0x107a <disp_str>
}
    1170:	2f 96       	adiw	r28, 0x0f	; 15
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <disp_intXY>:
void disp_intXY(u8 row,u8 col,u32 intvalue)
{
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	00 d0       	rcall	.+0      	; 0x1188 <disp_intXY+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <disp_intXY+0x8>
    118a:	00 d0       	rcall	.+0      	; 0x118c <disp_intXY+0xa>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6a 83       	std	Y+2, r22	; 0x02
    1194:	2b 83       	std	Y+3, r18	; 0x03
    1196:	3c 83       	std	Y+4, r19	; 0x04
    1198:	4d 83       	std	Y+5, r20	; 0x05
    119a:	5e 83       	std	Y+6, r21	; 0x06
	LCD_GOTXY(row,col);
    119c:	6a 81       	ldd	r22, Y+2	; 0x02
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	0e 94 66 08 	call	0x10cc	; 0x10cc <LCD_GOTXY>
	disp_int(intvalue);
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	ad 81       	ldd	r26, Y+5	; 0x05
    11aa:	be 81       	ldd	r27, Y+6	; 0x06
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 81 08 	call	0x1102	; 0x1102 <disp_int>
}
    11b4:	26 96       	adiw	r28, 0x06	; 6
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <writePin>:
 *  Author: Mohamed
 */ 
#include "includes.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <writePin+0x6>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	6a 83       	std	Y+2, r22	; 0x02
	if((pinNo>=PA0)&&(pinNo<=PA7)){
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	88 30       	cpi	r24, 0x08	; 8
    11d8:	90 f5       	brcc	.+100    	; 0x123e <writePin+0x78>
		if(logic==HIGH)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	a9 f4       	brne	.+42     	; 0x120a <writePin+0x44>
			SETBit(PORTA,(pinNo-PORTA_OFFSET));
    11e0:	8b e3       	ldi	r24, 0x3B	; 59
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	2b e3       	ldi	r18, 0x3B	; 59
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	f9 01       	movw	r30, r18
    11ea:	20 81       	ld	r18, Z
    11ec:	62 2f       	mov	r22, r18
    11ee:	29 81       	ldd	r18, Y+1	; 0x01
    11f0:	42 2f       	mov	r20, r18
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <writePin+0x38>
    11fa:	22 0f       	add	r18, r18
    11fc:	33 1f       	adc	r19, r19
    11fe:	4a 95       	dec	r20
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <writePin+0x34>
    1202:	26 2b       	or	r18, r22
    1204:	fc 01       	movw	r30, r24
    1206:	20 83       	st	Z, r18
    1208:	d0 c0       	rjmp	.+416    	; 0x13aa <writePin+0x1e4>
		else if(logic==LOW)
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	88 23       	and	r24, r24
    120e:	09 f0       	breq	.+2      	; 0x1212 <writePin+0x4c>
    1210:	cc c0       	rjmp	.+408    	; 0x13aa <writePin+0x1e4>
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
    1212:	8b e3       	ldi	r24, 0x3B	; 59
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	2b e3       	ldi	r18, 0x3B	; 59
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	f9 01       	movw	r30, r18
    121c:	20 81       	ld	r18, Z
    121e:	62 2f       	mov	r22, r18
    1220:	29 81       	ldd	r18, Y+1	; 0x01
    1222:	42 2f       	mov	r20, r18
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	21 e0       	ldi	r18, 0x01	; 1
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <writePin+0x6a>
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	4a 95       	dec	r20
    1232:	e2 f7       	brpl	.-8      	; 0x122c <writePin+0x66>
    1234:	20 95       	com	r18
    1236:	26 23       	and	r18, r22
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
    123c:	b6 c0       	rjmp	.+364    	; 0x13aa <writePin+0x1e4>
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	88 30       	cpi	r24, 0x08	; 8
    1242:	d0 f1       	brcs	.+116    	; 0x12b8 <writePin+0xf2>
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	80 31       	cpi	r24, 0x10	; 16
    1248:	b8 f5       	brcc	.+110    	; 0x12b8 <writePin+0xf2>
		if(logic==HIGH)
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	c1 f4       	brne	.+48     	; 0x1280 <writePin+0xba>
			SETBit(PORTB,(pinNo-PORTB_OFFSET));
    1250:	88 e3       	ldi	r24, 0x38	; 56
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	28 e3       	ldi	r18, 0x38	; 56
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	f9 01       	movw	r30, r18
    125a:	20 81       	ld	r18, Z
    125c:	62 2f       	mov	r22, r18
    125e:	29 81       	ldd	r18, Y+1	; 0x01
    1260:	22 2f       	mov	r18, r18
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	a9 01       	movw	r20, r18
    1266:	48 50       	subi	r20, 0x08	; 8
    1268:	51 09       	sbc	r21, r1
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <writePin+0xae>
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	4a 95       	dec	r20
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <writePin+0xaa>
    1278:	26 2b       	or	r18, r22
    127a:	fc 01       	movw	r30, r24
    127c:	20 83       	st	Z, r18
    127e:	1b c0       	rjmp	.+54     	; 0x12b6 <writePin+0xf0>
		else if(logic==LOW)
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	88 23       	and	r24, r24
    1284:	c1 f4       	brne	.+48     	; 0x12b6 <writePin+0xf0>
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
    1286:	88 e3       	ldi	r24, 0x38	; 56
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	28 e3       	ldi	r18, 0x38	; 56
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	f9 01       	movw	r30, r18
    1290:	20 81       	ld	r18, Z
    1292:	62 2f       	mov	r22, r18
    1294:	29 81       	ldd	r18, Y+1	; 0x01
    1296:	22 2f       	mov	r18, r18
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	48 50       	subi	r20, 0x08	; 8
    129e:	51 09       	sbc	r21, r1
    12a0:	21 e0       	ldi	r18, 0x01	; 1
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <writePin+0xe4>
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	4a 95       	dec	r20
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <writePin+0xe0>
    12ae:	20 95       	com	r18
    12b0:	26 23       	and	r18, r22
    12b2:	fc 01       	movw	r30, r24
    12b4:	20 83       	st	Z, r18
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
		if(logic==HIGH)
    12b6:	79 c0       	rjmp	.+242    	; 0x13aa <writePin+0x1e4>
		else if(logic==LOW)
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	80 31       	cpi	r24, 0x10	; 16
    12bc:	d0 f1       	brcs	.+116    	; 0x1332 <writePin+0x16c>
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	88 31       	cpi	r24, 0x18	; 24
    12c2:	b8 f5       	brcc	.+110    	; 0x1332 <writePin+0x16c>
		if(logic==HIGH)
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	c1 f4       	brne	.+48     	; 0x12fa <writePin+0x134>
			SETBit(PORTC,(pinNo-PORTC_OFFSET));
    12ca:	85 e3       	ldi	r24, 0x35	; 53
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	25 e3       	ldi	r18, 0x35	; 53
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	20 81       	ld	r18, Z
    12d6:	62 2f       	mov	r22, r18
    12d8:	29 81       	ldd	r18, Y+1	; 0x01
    12da:	22 2f       	mov	r18, r18
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	a9 01       	movw	r20, r18
    12e0:	40 51       	subi	r20, 0x10	; 16
    12e2:	51 09       	sbc	r21, r1
    12e4:	21 e0       	ldi	r18, 0x01	; 1
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <writePin+0x128>
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	4a 95       	dec	r20
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <writePin+0x124>
    12f2:	26 2b       	or	r18, r22
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 83       	st	Z, r18
    12f8:	1b c0       	rjmp	.+54     	; 0x1330 <writePin+0x16a>
		else if(logic==LOW)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	88 23       	and	r24, r24
    12fe:	c1 f4       	brne	.+48     	; 0x1330 <writePin+0x16a>
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
    1300:	85 e3       	ldi	r24, 0x35	; 53
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	25 e3       	ldi	r18, 0x35	; 53
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	f9 01       	movw	r30, r18
    130a:	20 81       	ld	r18, Z
    130c:	62 2f       	mov	r22, r18
    130e:	29 81       	ldd	r18, Y+1	; 0x01
    1310:	22 2f       	mov	r18, r18
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	40 51       	subi	r20, 0x10	; 16
    1318:	51 09       	sbc	r21, r1
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <writePin+0x15e>
    1320:	22 0f       	add	r18, r18
    1322:	33 1f       	adc	r19, r19
    1324:	4a 95       	dec	r20
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <writePin+0x15a>
    1328:	20 95       	com	r18
    132a:	26 23       	and	r18, r22
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
		if(logic==HIGH)
    1330:	3c c0       	rjmp	.+120    	; 0x13aa <writePin+0x1e4>
		else if(logic==LOW)
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
		else{}
	}
	
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	88 31       	cpi	r24, 0x18	; 24
    1336:	c8 f1       	brcs	.+114    	; 0x13aa <writePin+0x1e4>
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	80 32       	cpi	r24, 0x20	; 32
    133c:	b0 f5       	brcc	.+108    	; 0x13aa <writePin+0x1e4>
		if(logic==HIGH)
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	c1 f4       	brne	.+48     	; 0x1374 <writePin+0x1ae>
			SETBit(PORTD,(pinNo-PORTD_OFFSET));
    1344:	82 e3       	ldi	r24, 0x32	; 50
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	22 e3       	ldi	r18, 0x32	; 50
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	f9 01       	movw	r30, r18
    134e:	20 81       	ld	r18, Z
    1350:	62 2f       	mov	r22, r18
    1352:	29 81       	ldd	r18, Y+1	; 0x01
    1354:	22 2f       	mov	r18, r18
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	48 51       	subi	r20, 0x18	; 24
    135c:	51 09       	sbc	r21, r1
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <writePin+0x1a2>
    1364:	22 0f       	add	r18, r18
    1366:	33 1f       	adc	r19, r19
    1368:	4a 95       	dec	r20
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <writePin+0x19e>
    136c:	26 2b       	or	r18, r22
    136e:	fc 01       	movw	r30, r24
    1370:	20 83       	st	Z, r18
    1372:	1b c0       	rjmp	.+54     	; 0x13aa <writePin+0x1e4>
		else if(logic==LOW)
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	88 23       	and	r24, r24
    1378:	c1 f4       	brne	.+48     	; 0x13aa <writePin+0x1e4>
			CLRBit(PORTD,(pinNo-PORTD_OFFSET));
    137a:	82 e3       	ldi	r24, 0x32	; 50
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	22 e3       	ldi	r18, 0x32	; 50
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	f9 01       	movw	r30, r18
    1384:	20 81       	ld	r18, Z
    1386:	62 2f       	mov	r22, r18
    1388:	29 81       	ldd	r18, Y+1	; 0x01
    138a:	22 2f       	mov	r18, r18
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	a9 01       	movw	r20, r18
    1390:	48 51       	subi	r20, 0x18	; 24
    1392:	51 09       	sbc	r21, r1
    1394:	21 e0       	ldi	r18, 0x01	; 1
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <writePin+0x1d8>
    139a:	22 0f       	add	r18, r18
    139c:	33 1f       	adc	r19, r19
    139e:	4a 95       	dec	r20
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <writePin+0x1d4>
    13a2:	20 95       	com	r18
    13a4:	26 23       	and	r18, r22
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
		else{}
	}
	else{}
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <pinDirection>:
void pinDirection(u8 pinNo, u8 direction){
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <pinDirection+0x6>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	6a 83       	std	Y+2, r22	; 0x02
	if((pinNo >= PA0) && (pinNo <= PA7)){
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	88 30       	cpi	r24, 0x08	; 8
    13c6:	90 f5       	brcc	.+100    	; 0x142c <pinDirection+0x78>
		if(direction == OUTPUT)
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	a9 f4       	brne	.+42     	; 0x13f8 <pinDirection+0x44>
			SETBit(DDRA,(pinNo-PORTA_OFFSET));
    13ce:	8a e3       	ldi	r24, 0x3A	; 58
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	2a e3       	ldi	r18, 0x3A	; 58
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	f9 01       	movw	r30, r18
    13d8:	20 81       	ld	r18, Z
    13da:	62 2f       	mov	r22, r18
    13dc:	29 81       	ldd	r18, Y+1	; 0x01
    13de:	42 2f       	mov	r20, r18
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	21 e0       	ldi	r18, 0x01	; 1
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <pinDirection+0x38>
    13e8:	22 0f       	add	r18, r18
    13ea:	33 1f       	adc	r19, r19
    13ec:	4a 95       	dec	r20
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <pinDirection+0x34>
    13f0:	26 2b       	or	r18, r22
    13f2:	fc 01       	movw	r30, r24
    13f4:	20 83       	st	Z, r18
    13f6:	d0 c0       	rjmp	.+416    	; 0x1598 <pinDirection+0x1e4>
		else if(direction == INPUT)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	88 23       	and	r24, r24
    13fc:	09 f0       	breq	.+2      	; 0x1400 <pinDirection+0x4c>
    13fe:	cc c0       	rjmp	.+408    	; 0x1598 <pinDirection+0x1e4>
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
    1400:	8a e3       	ldi	r24, 0x3A	; 58
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	2a e3       	ldi	r18, 0x3A	; 58
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	f9 01       	movw	r30, r18
    140a:	20 81       	ld	r18, Z
    140c:	62 2f       	mov	r22, r18
    140e:	29 81       	ldd	r18, Y+1	; 0x01
    1410:	42 2f       	mov	r20, r18
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	21 e0       	ldi	r18, 0x01	; 1
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <pinDirection+0x6a>
    141a:	22 0f       	add	r18, r18
    141c:	33 1f       	adc	r19, r19
    141e:	4a 95       	dec	r20
    1420:	e2 f7       	brpl	.-8      	; 0x141a <pinDirection+0x66>
    1422:	20 95       	com	r18
    1424:	26 23       	and	r18, r22
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
    142a:	b6 c0       	rjmp	.+364    	; 0x1598 <pinDirection+0x1e4>
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	88 30       	cpi	r24, 0x08	; 8
    1430:	d0 f1       	brcs	.+116    	; 0x14a6 <pinDirection+0xf2>
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	80 31       	cpi	r24, 0x10	; 16
    1436:	b8 f5       	brcc	.+110    	; 0x14a6 <pinDirection+0xf2>
		if(direction == OUTPUT)
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	c1 f4       	brne	.+48     	; 0x146e <pinDirection+0xba>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
    143e:	87 e3       	ldi	r24, 0x37	; 55
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	27 e3       	ldi	r18, 0x37	; 55
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	f9 01       	movw	r30, r18
    1448:	20 81       	ld	r18, Z
    144a:	62 2f       	mov	r22, r18
    144c:	29 81       	ldd	r18, Y+1	; 0x01
    144e:	22 2f       	mov	r18, r18
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	a9 01       	movw	r20, r18
    1454:	48 50       	subi	r20, 0x08	; 8
    1456:	51 09       	sbc	r21, r1
    1458:	21 e0       	ldi	r18, 0x01	; 1
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <pinDirection+0xae>
    145e:	22 0f       	add	r18, r18
    1460:	33 1f       	adc	r19, r19
    1462:	4a 95       	dec	r20
    1464:	e2 f7       	brpl	.-8      	; 0x145e <pinDirection+0xaa>
    1466:	26 2b       	or	r18, r22
    1468:	fc 01       	movw	r30, r24
    146a:	20 83       	st	Z, r18
    146c:	1b c0       	rjmp	.+54     	; 0x14a4 <pinDirection+0xf0>
		else if(direction == LOW)
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	88 23       	and	r24, r24
    1472:	c1 f4       	brne	.+48     	; 0x14a4 <pinDirection+0xf0>
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
    1474:	87 e3       	ldi	r24, 0x37	; 55
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	27 e3       	ldi	r18, 0x37	; 55
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	f9 01       	movw	r30, r18
    147e:	20 81       	ld	r18, Z
    1480:	62 2f       	mov	r22, r18
    1482:	29 81       	ldd	r18, Y+1	; 0x01
    1484:	22 2f       	mov	r18, r18
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	48 50       	subi	r20, 0x08	; 8
    148c:	51 09       	sbc	r21, r1
    148e:	21 e0       	ldi	r18, 0x01	; 1
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <pinDirection+0xe4>
    1494:	22 0f       	add	r18, r18
    1496:	33 1f       	adc	r19, r19
    1498:	4a 95       	dec	r20
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <pinDirection+0xe0>
    149c:	20 95       	com	r18
    149e:	26 23       	and	r18, r22
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 83       	st	Z, r18
		else if(direction == INPUT)
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
		if(direction == OUTPUT)
    14a4:	79 c0       	rjmp	.+242    	; 0x1598 <pinDirection+0x1e4>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
		else if(direction == LOW)
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	80 31       	cpi	r24, 0x10	; 16
    14aa:	d0 f1       	brcs	.+116    	; 0x1520 <pinDirection+0x16c>
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	88 31       	cpi	r24, 0x18	; 24
    14b0:	b8 f5       	brcc	.+110    	; 0x1520 <pinDirection+0x16c>
		if(direction == OUTPUT)
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	c1 f4       	brne	.+48     	; 0x14e8 <pinDirection+0x134>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
    14b8:	84 e3       	ldi	r24, 0x34	; 52
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	24 e3       	ldi	r18, 0x34	; 52
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	f9 01       	movw	r30, r18
    14c2:	20 81       	ld	r18, Z
    14c4:	62 2f       	mov	r22, r18
    14c6:	29 81       	ldd	r18, Y+1	; 0x01
    14c8:	22 2f       	mov	r18, r18
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	a9 01       	movw	r20, r18
    14ce:	40 51       	subi	r20, 0x10	; 16
    14d0:	51 09       	sbc	r21, r1
    14d2:	21 e0       	ldi	r18, 0x01	; 1
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <pinDirection+0x128>
    14d8:	22 0f       	add	r18, r18
    14da:	33 1f       	adc	r19, r19
    14dc:	4a 95       	dec	r20
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <pinDirection+0x124>
    14e0:	26 2b       	or	r18, r22
    14e2:	fc 01       	movw	r30, r24
    14e4:	20 83       	st	Z, r18
    14e6:	1b c0       	rjmp	.+54     	; 0x151e <pinDirection+0x16a>
		else if(direction==INPUT)
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	88 23       	and	r24, r24
    14ec:	c1 f4       	brne	.+48     	; 0x151e <pinDirection+0x16a>
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
    14ee:	84 e3       	ldi	r24, 0x34	; 52
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	24 e3       	ldi	r18, 0x34	; 52
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	f9 01       	movw	r30, r18
    14f8:	20 81       	ld	r18, Z
    14fa:	62 2f       	mov	r22, r18
    14fc:	29 81       	ldd	r18, Y+1	; 0x01
    14fe:	22 2f       	mov	r18, r18
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	a9 01       	movw	r20, r18
    1504:	40 51       	subi	r20, 0x10	; 16
    1506:	51 09       	sbc	r21, r1
    1508:	21 e0       	ldi	r18, 0x01	; 1
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <pinDirection+0x15e>
    150e:	22 0f       	add	r18, r18
    1510:	33 1f       	adc	r19, r19
    1512:	4a 95       	dec	r20
    1514:	e2 f7       	brpl	.-8      	; 0x150e <pinDirection+0x15a>
    1516:	20 95       	com	r18
    1518:	26 23       	and	r18, r22
    151a:	fc 01       	movw	r30, r24
    151c:	20 83       	st	Z, r18
		else if(direction == LOW)
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
		if(direction == OUTPUT)
    151e:	3c c0       	rjmp	.+120    	; 0x1598 <pinDirection+0x1e4>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
		else if(direction==INPUT)
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	88 31       	cpi	r24, 0x18	; 24
    1524:	c8 f1       	brcs	.+114    	; 0x1598 <pinDirection+0x1e4>
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	80 32       	cpi	r24, 0x20	; 32
    152a:	b0 f5       	brcc	.+108    	; 0x1598 <pinDirection+0x1e4>
		if(direction == OUTPUT)
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	c1 f4       	brne	.+48     	; 0x1562 <pinDirection+0x1ae>
			SETBit(DDRD,(pinNo-PORTD_OFFSET));
    1532:	81 e3       	ldi	r24, 0x31	; 49
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	21 e3       	ldi	r18, 0x31	; 49
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	f9 01       	movw	r30, r18
    153c:	20 81       	ld	r18, Z
    153e:	62 2f       	mov	r22, r18
    1540:	29 81       	ldd	r18, Y+1	; 0x01
    1542:	22 2f       	mov	r18, r18
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	a9 01       	movw	r20, r18
    1548:	48 51       	subi	r20, 0x18	; 24
    154a:	51 09       	sbc	r21, r1
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <pinDirection+0x1a2>
    1552:	22 0f       	add	r18, r18
    1554:	33 1f       	adc	r19, r19
    1556:	4a 95       	dec	r20
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <pinDirection+0x19e>
    155a:	26 2b       	or	r18, r22
    155c:	fc 01       	movw	r30, r24
    155e:	20 83       	st	Z, r18
    1560:	1b c0       	rjmp	.+54     	; 0x1598 <pinDirection+0x1e4>
		else if(direction == INPUT)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	88 23       	and	r24, r24
    1566:	c1 f4       	brne	.+48     	; 0x1598 <pinDirection+0x1e4>
			CLRBit(DDRD,(pinNo-PORTD_OFFSET));
    1568:	81 e3       	ldi	r24, 0x31	; 49
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	21 e3       	ldi	r18, 0x31	; 49
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	f9 01       	movw	r30, r18
    1572:	20 81       	ld	r18, Z
    1574:	62 2f       	mov	r22, r18
    1576:	29 81       	ldd	r18, Y+1	; 0x01
    1578:	22 2f       	mov	r18, r18
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	48 51       	subi	r20, 0x18	; 24
    1580:	51 09       	sbc	r21, r1
    1582:	21 e0       	ldi	r18, 0x01	; 1
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	02 c0       	rjmp	.+4      	; 0x158c <pinDirection+0x1d8>
    1588:	22 0f       	add	r18, r18
    158a:	33 1f       	adc	r19, r19
    158c:	4a 95       	dec	r20
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <pinDirection+0x1d4>
    1590:	20 95       	com	r18
    1592:	26 23       	and	r18, r22
    1594:	fc 01       	movw	r30, r24
    1596:	20 83       	st	Z, r18
		else{}
	}
	else{}
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <readPin>:

u8 readPin(u8 pinNo){
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <readPin+0x6>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 result=0;
    15ae:	19 82       	std	Y+1, r1	; 0x01
	if((pinNo>=PA0)&&(pinNo<=PA7))
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 30       	cpi	r24, 0x08	; 8
    15b4:	88 f4       	brcc	.+34     	; 0x15d8 <readPin+0x36>
		result=GETBit(PINA,(pinNo-PORTA_OFFSET));
    15b6:	89 e3       	ldi	r24, 0x39	; 57
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 81       	ld	r24, Z
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	2a 81       	ldd	r18, Y+2	; 0x02
    15c4:	22 2f       	mov	r18, r18
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <readPin+0x2c>
    15ca:	95 95       	asr	r25
    15cc:	87 95       	ror	r24
    15ce:	2a 95       	dec	r18
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <readPin+0x28>
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	4a c0       	rjmp	.+148    	; 0x166c <readPin+0xca>
	else if((pinNo>=PB0)&&(pinNo<=PB7))
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	88 30       	cpi	r24, 0x08	; 8
    15dc:	b0 f0       	brcs	.+44     	; 0x160a <readPin+0x68>
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	80 31       	cpi	r24, 0x10	; 16
    15e2:	98 f4       	brcc	.+38     	; 0x160a <readPin+0x68>
		result=GETBit(PINB,(pinNo-PORTB_OFFSET));
    15e4:	86 e3       	ldi	r24, 0x36	; 54
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	fc 01       	movw	r30, r24
    15ea:	80 81       	ld	r24, Z
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	2a 81       	ldd	r18, Y+2	; 0x02
    15f2:	22 2f       	mov	r18, r18
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	28 50       	subi	r18, 0x08	; 8
    15f8:	31 09       	sbc	r19, r1
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <readPin+0x5e>
    15fc:	95 95       	asr	r25
    15fe:	87 95       	ror	r24
    1600:	2a 95       	dec	r18
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <readPin+0x5a>
    1604:	81 70       	andi	r24, 0x01	; 1
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	31 c0       	rjmp	.+98     	; 0x166c <readPin+0xca>
	else if((pinNo>=PC0)&&(pinNo<=PC7))
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	80 31       	cpi	r24, 0x10	; 16
    160e:	b0 f0       	brcs	.+44     	; 0x163c <readPin+0x9a>
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	88 31       	cpi	r24, 0x18	; 24
    1614:	98 f4       	brcc	.+38     	; 0x163c <readPin+0x9a>
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
    1616:	83 e3       	ldi	r24, 0x33	; 51
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	fc 01       	movw	r30, r24
    161c:	80 81       	ld	r24, Z
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	2a 81       	ldd	r18, Y+2	; 0x02
    1624:	22 2f       	mov	r18, r18
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	20 51       	subi	r18, 0x10	; 16
    162a:	31 09       	sbc	r19, r1
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <readPin+0x90>
    162e:	95 95       	asr	r25
    1630:	87 95       	ror	r24
    1632:	2a 95       	dec	r18
    1634:	e2 f7       	brpl	.-8      	; 0x162e <readPin+0x8c>
    1636:	81 70       	andi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	18 c0       	rjmp	.+48     	; 0x166c <readPin+0xca>
	else if((pinNo>=PD0)&&(pinNo<=PD7))
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	88 31       	cpi	r24, 0x18	; 24
    1640:	a8 f0       	brcs	.+42     	; 0x166c <readPin+0xca>
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	80 32       	cpi	r24, 0x20	; 32
    1646:	90 f4       	brcc	.+36     	; 0x166c <readPin+0xca>
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
    1648:	80 e3       	ldi	r24, 0x30	; 48
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	fc 01       	movw	r30, r24
    164e:	80 81       	ld	r24, Z
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	2a 81       	ldd	r18, Y+2	; 0x02
    1656:	22 2f       	mov	r18, r18
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	28 51       	subi	r18, 0x18	; 24
    165c:	31 09       	sbc	r19, r1
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <readPin+0xc2>
    1660:	95 95       	asr	r25
    1662:	87 95       	ror	r24
    1664:	2a 95       	dec	r18
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <readPin+0xbe>
    1668:	81 70       	andi	r24, 0x01	; 1
    166a:	89 83       	std	Y+1, r24	; 0x01
	else{}
	return result;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	00 d0       	rcall	.+0      	; 0x167e <writePins+0x6>
    167e:	00 d0       	rcall	.+0      	; 0x1680 <writePins+0x8>
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	6b 83       	std	Y+3, r22	; 0x03
    168a:	4c 83       	std	Y+4, r20	; 0x04
	if(logic==HIGH)
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	61 f4       	brne	.+24     	; 0x16aa <writePins+0x32>
		SETBits(*port,mask);
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	fc 01       	movw	r30, r24
    1698:	90 81       	ld	r25, Z
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	29 2f       	mov	r18, r25
    169e:	28 2b       	or	r18, r24
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	fc 01       	movw	r30, r24
    16a6:	20 83       	st	Z, r18
    16a8:	10 c0       	rjmp	.+32     	; 0x16ca <writePins+0x52>
	else if(logic==LOW)
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	88 23       	and	r24, r24
    16ae:	69 f4       	brne	.+26     	; 0x16ca <writePins+0x52>
		CLRBits(*port,mask);
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	fc 01       	movw	r30, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	98 2f       	mov	r25, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	80 95       	com	r24
    16be:	89 23       	and	r24, r25
    16c0:	28 2f       	mov	r18, r24
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18
	else{}
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <pinsDirection>:
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	00 d0       	rcall	.+0      	; 0x16de <pinsDirection+0x6>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <pinsDirection+0x8>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	6b 83       	std	Y+3, r22	; 0x03
    16ea:	4c 83       	std	Y+4, r20	; 0x04
	if(direction == OUTPUT)
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	61 f4       	brne	.+24     	; 0x170a <pinsDirection+0x32>
		SETBits(*ddr,mask);
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	fc 01       	movw	r30, r24
    16f8:	90 81       	ld	r25, Z
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	29 2f       	mov	r18, r25
    16fe:	28 2b       	or	r18, r24
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	fc 01       	movw	r30, r24
    1706:	20 83       	st	Z, r18
    1708:	10 c0       	rjmp	.+32     	; 0x172a <pinsDirection+0x52>
	else if(direction == INPUT)
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	88 23       	and	r24, r24
    170e:	69 f4       	brne	.+26     	; 0x172a <pinsDirection+0x52>
		CLRBits(*ddr,mask);
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	9a 81       	ldd	r25, Y+2	; 0x02
    1714:	fc 01       	movw	r30, r24
    1716:	80 81       	ld	r24, Z
    1718:	98 2f       	mov	r25, r24
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	80 95       	com	r24
    171e:	89 23       	and	r24, r25
    1720:	28 2f       	mov	r18, r24
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	fc 01       	movw	r30, r24
    1728:	20 83       	st	Z, r18
	else{}
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <__cmpsf2>:
    1738:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_cmp>
    173c:	08 f4       	brcc	.+2      	; 0x1740 <__cmpsf2+0x8>
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	08 95       	ret

00001742 <__divsf3>:
    1742:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3x>
    1746:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__fp_round>
    174a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__fp_pscB>
    174e:	58 f0       	brcs	.+22     	; 0x1766 <__divsf3+0x24>
    1750:	0e 94 6f 0c 	call	0x18de	; 0x18de <__fp_pscA>
    1754:	40 f0       	brcs	.+16     	; 0x1766 <__divsf3+0x24>
    1756:	29 f4       	brne	.+10     	; 0x1762 <__divsf3+0x20>
    1758:	5f 3f       	cpi	r21, 0xFF	; 255
    175a:	29 f0       	breq	.+10     	; 0x1766 <__divsf3+0x24>
    175c:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__fp_inf>
    1760:	51 11       	cpse	r21, r1
    1762:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__fp_szero>
    1766:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__fp_nan>

0000176a <__divsf3x>:
    176a:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_split3>
    176e:	68 f3       	brcs	.-38     	; 0x174a <__divsf3+0x8>

00001770 <__divsf3_pse>:
    1770:	99 23       	and	r25, r25
    1772:	b1 f3       	breq	.-20     	; 0x1760 <__divsf3+0x1e>
    1774:	55 23       	and	r21, r21
    1776:	91 f3       	breq	.-28     	; 0x175c <__divsf3+0x1a>
    1778:	95 1b       	sub	r25, r21
    177a:	55 0b       	sbc	r21, r21
    177c:	bb 27       	eor	r27, r27
    177e:	aa 27       	eor	r26, r26
    1780:	62 17       	cp	r22, r18
    1782:	73 07       	cpc	r23, r19
    1784:	84 07       	cpc	r24, r20
    1786:	38 f0       	brcs	.+14     	; 0x1796 <__divsf3_pse+0x26>
    1788:	9f 5f       	subi	r25, 0xFF	; 255
    178a:	5f 4f       	sbci	r21, 0xFF	; 255
    178c:	22 0f       	add	r18, r18
    178e:	33 1f       	adc	r19, r19
    1790:	44 1f       	adc	r20, r20
    1792:	aa 1f       	adc	r26, r26
    1794:	a9 f3       	breq	.-22     	; 0x1780 <__divsf3_pse+0x10>
    1796:	35 d0       	rcall	.+106    	; 0x1802 <__divsf3_pse+0x92>
    1798:	0e 2e       	mov	r0, r30
    179a:	3a f0       	brmi	.+14     	; 0x17aa <__divsf3_pse+0x3a>
    179c:	e0 e8       	ldi	r30, 0x80	; 128
    179e:	32 d0       	rcall	.+100    	; 0x1804 <__divsf3_pse+0x94>
    17a0:	91 50       	subi	r25, 0x01	; 1
    17a2:	50 40       	sbci	r21, 0x00	; 0
    17a4:	e6 95       	lsr	r30
    17a6:	00 1c       	adc	r0, r0
    17a8:	ca f7       	brpl	.-14     	; 0x179c <__divsf3_pse+0x2c>
    17aa:	2b d0       	rcall	.+86     	; 0x1802 <__divsf3_pse+0x92>
    17ac:	fe 2f       	mov	r31, r30
    17ae:	29 d0       	rcall	.+82     	; 0x1802 <__divsf3_pse+0x92>
    17b0:	66 0f       	add	r22, r22
    17b2:	77 1f       	adc	r23, r23
    17b4:	88 1f       	adc	r24, r24
    17b6:	bb 1f       	adc	r27, r27
    17b8:	26 17       	cp	r18, r22
    17ba:	37 07       	cpc	r19, r23
    17bc:	48 07       	cpc	r20, r24
    17be:	ab 07       	cpc	r26, r27
    17c0:	b0 e8       	ldi	r27, 0x80	; 128
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <__divsf3_pse+0x56>
    17c4:	bb 0b       	sbc	r27, r27
    17c6:	80 2d       	mov	r24, r0
    17c8:	bf 01       	movw	r22, r30
    17ca:	ff 27       	eor	r31, r31
    17cc:	93 58       	subi	r25, 0x83	; 131
    17ce:	5f 4f       	sbci	r21, 0xFF	; 255
    17d0:	3a f0       	brmi	.+14     	; 0x17e0 <__divsf3_pse+0x70>
    17d2:	9e 3f       	cpi	r25, 0xFE	; 254
    17d4:	51 05       	cpc	r21, r1
    17d6:	78 f0       	brcs	.+30     	; 0x17f6 <__divsf3_pse+0x86>
    17d8:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__fp_inf>
    17dc:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__fp_szero>
    17e0:	5f 3f       	cpi	r21, 0xFF	; 255
    17e2:	e4 f3       	brlt	.-8      	; 0x17dc <__divsf3_pse+0x6c>
    17e4:	98 3e       	cpi	r25, 0xE8	; 232
    17e6:	d4 f3       	brlt	.-12     	; 0x17dc <__divsf3_pse+0x6c>
    17e8:	86 95       	lsr	r24
    17ea:	77 95       	ror	r23
    17ec:	67 95       	ror	r22
    17ee:	b7 95       	ror	r27
    17f0:	f7 95       	ror	r31
    17f2:	9f 5f       	subi	r25, 0xFF	; 255
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__divsf3_pse+0x78>
    17f6:	88 0f       	add	r24, r24
    17f8:	91 1d       	adc	r25, r1
    17fa:	96 95       	lsr	r25
    17fc:	87 95       	ror	r24
    17fe:	97 f9       	bld	r25, 7
    1800:	08 95       	ret
    1802:	e1 e0       	ldi	r30, 0x01	; 1
    1804:	66 0f       	add	r22, r22
    1806:	77 1f       	adc	r23, r23
    1808:	88 1f       	adc	r24, r24
    180a:	bb 1f       	adc	r27, r27
    180c:	62 17       	cp	r22, r18
    180e:	73 07       	cpc	r23, r19
    1810:	84 07       	cpc	r24, r20
    1812:	ba 07       	cpc	r27, r26
    1814:	20 f0       	brcs	.+8      	; 0x181e <__divsf3_pse+0xae>
    1816:	62 1b       	sub	r22, r18
    1818:	73 0b       	sbc	r23, r19
    181a:	84 0b       	sbc	r24, r20
    181c:	ba 0b       	sbc	r27, r26
    181e:	ee 1f       	adc	r30, r30
    1820:	88 f7       	brcc	.-30     	; 0x1804 <__divsf3_pse+0x94>
    1822:	e0 95       	com	r30
    1824:	08 95       	ret

00001826 <__fixunssfsi>:
    1826:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_splitA>
    182a:	88 f0       	brcs	.+34     	; 0x184e <__fixunssfsi+0x28>
    182c:	9f 57       	subi	r25, 0x7F	; 127
    182e:	98 f0       	brcs	.+38     	; 0x1856 <__fixunssfsi+0x30>
    1830:	b9 2f       	mov	r27, r25
    1832:	99 27       	eor	r25, r25
    1834:	b7 51       	subi	r27, 0x17	; 23
    1836:	b0 f0       	brcs	.+44     	; 0x1864 <__fixunssfsi+0x3e>
    1838:	e1 f0       	breq	.+56     	; 0x1872 <__fixunssfsi+0x4c>
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	88 1f       	adc	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	1a f0       	brmi	.+6      	; 0x184a <__fixunssfsi+0x24>
    1844:	ba 95       	dec	r27
    1846:	c9 f7       	brne	.-14     	; 0x183a <__fixunssfsi+0x14>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <__fixunssfsi+0x4c>
    184a:	b1 30       	cpi	r27, 0x01	; 1
    184c:	91 f0       	breq	.+36     	; 0x1872 <__fixunssfsi+0x4c>
    184e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__fp_zero>
    1852:	b1 e0       	ldi	r27, 0x01	; 1
    1854:	08 95       	ret
    1856:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_zero>
    185a:	67 2f       	mov	r22, r23
    185c:	78 2f       	mov	r23, r24
    185e:	88 27       	eor	r24, r24
    1860:	b8 5f       	subi	r27, 0xF8	; 248
    1862:	39 f0       	breq	.+14     	; 0x1872 <__fixunssfsi+0x4c>
    1864:	b9 3f       	cpi	r27, 0xF9	; 249
    1866:	cc f3       	brlt	.-14     	; 0x185a <__fixunssfsi+0x34>
    1868:	86 95       	lsr	r24
    186a:	77 95       	ror	r23
    186c:	67 95       	ror	r22
    186e:	b3 95       	inc	r27
    1870:	d9 f7       	brne	.-10     	; 0x1868 <__fixunssfsi+0x42>
    1872:	3e f4       	brtc	.+14     	; 0x1882 <__fixunssfsi+0x5c>
    1874:	90 95       	com	r25
    1876:	80 95       	com	r24
    1878:	70 95       	com	r23
    187a:	61 95       	neg	r22
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	8f 4f       	sbci	r24, 0xFF	; 255
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	08 95       	ret

00001884 <__fp_cmp>:
    1884:	99 0f       	add	r25, r25
    1886:	00 08       	sbc	r0, r0
    1888:	55 0f       	add	r21, r21
    188a:	aa 0b       	sbc	r26, r26
    188c:	e0 e8       	ldi	r30, 0x80	; 128
    188e:	fe ef       	ldi	r31, 0xFE	; 254
    1890:	16 16       	cp	r1, r22
    1892:	17 06       	cpc	r1, r23
    1894:	e8 07       	cpc	r30, r24
    1896:	f9 07       	cpc	r31, r25
    1898:	c0 f0       	brcs	.+48     	; 0x18ca <__fp_cmp+0x46>
    189a:	12 16       	cp	r1, r18
    189c:	13 06       	cpc	r1, r19
    189e:	e4 07       	cpc	r30, r20
    18a0:	f5 07       	cpc	r31, r21
    18a2:	98 f0       	brcs	.+38     	; 0x18ca <__fp_cmp+0x46>
    18a4:	62 1b       	sub	r22, r18
    18a6:	73 0b       	sbc	r23, r19
    18a8:	84 0b       	sbc	r24, r20
    18aa:	95 0b       	sbc	r25, r21
    18ac:	39 f4       	brne	.+14     	; 0x18bc <__fp_cmp+0x38>
    18ae:	0a 26       	eor	r0, r26
    18b0:	61 f0       	breq	.+24     	; 0x18ca <__fp_cmp+0x46>
    18b2:	23 2b       	or	r18, r19
    18b4:	24 2b       	or	r18, r20
    18b6:	25 2b       	or	r18, r21
    18b8:	21 f4       	brne	.+8      	; 0x18c2 <__fp_cmp+0x3e>
    18ba:	08 95       	ret
    18bc:	0a 26       	eor	r0, r26
    18be:	09 f4       	brne	.+2      	; 0x18c2 <__fp_cmp+0x3e>
    18c0:	a1 40       	sbci	r26, 0x01	; 1
    18c2:	a6 95       	lsr	r26
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
    18c6:	81 1d       	adc	r24, r1
    18c8:	81 1d       	adc	r24, r1
    18ca:	08 95       	ret

000018cc <__fp_inf>:
    18cc:	97 f9       	bld	r25, 7
    18ce:	9f 67       	ori	r25, 0x7F	; 127
    18d0:	80 e8       	ldi	r24, 0x80	; 128
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	08 95       	ret

000018d8 <__fp_nan>:
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	80 ec       	ldi	r24, 0xC0	; 192
    18dc:	08 95       	ret

000018de <__fp_pscA>:
    18de:	00 24       	eor	r0, r0
    18e0:	0a 94       	dec	r0
    18e2:	16 16       	cp	r1, r22
    18e4:	17 06       	cpc	r1, r23
    18e6:	18 06       	cpc	r1, r24
    18e8:	09 06       	cpc	r0, r25
    18ea:	08 95       	ret

000018ec <__fp_pscB>:
    18ec:	00 24       	eor	r0, r0
    18ee:	0a 94       	dec	r0
    18f0:	12 16       	cp	r1, r18
    18f2:	13 06       	cpc	r1, r19
    18f4:	14 06       	cpc	r1, r20
    18f6:	05 06       	cpc	r0, r21
    18f8:	08 95       	ret

000018fa <__fp_round>:
    18fa:	09 2e       	mov	r0, r25
    18fc:	03 94       	inc	r0
    18fe:	00 0c       	add	r0, r0
    1900:	11 f4       	brne	.+4      	; 0x1906 <__fp_round+0xc>
    1902:	88 23       	and	r24, r24
    1904:	52 f0       	brmi	.+20     	; 0x191a <__fp_round+0x20>
    1906:	bb 0f       	add	r27, r27
    1908:	40 f4       	brcc	.+16     	; 0x191a <__fp_round+0x20>
    190a:	bf 2b       	or	r27, r31
    190c:	11 f4       	brne	.+4      	; 0x1912 <__fp_round+0x18>
    190e:	60 ff       	sbrs	r22, 0
    1910:	04 c0       	rjmp	.+8      	; 0x191a <__fp_round+0x20>
    1912:	6f 5f       	subi	r22, 0xFF	; 255
    1914:	7f 4f       	sbci	r23, 0xFF	; 255
    1916:	8f 4f       	sbci	r24, 0xFF	; 255
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	08 95       	ret

0000191c <__fp_split3>:
    191c:	57 fd       	sbrc	r21, 7
    191e:	90 58       	subi	r25, 0x80	; 128
    1920:	44 0f       	add	r20, r20
    1922:	55 1f       	adc	r21, r21
    1924:	59 f0       	breq	.+22     	; 0x193c <__fp_splitA+0x10>
    1926:	5f 3f       	cpi	r21, 0xFF	; 255
    1928:	71 f0       	breq	.+28     	; 0x1946 <__fp_splitA+0x1a>
    192a:	47 95       	ror	r20

0000192c <__fp_splitA>:
    192c:	88 0f       	add	r24, r24
    192e:	97 fb       	bst	r25, 7
    1930:	99 1f       	adc	r25, r25
    1932:	61 f0       	breq	.+24     	; 0x194c <__fp_splitA+0x20>
    1934:	9f 3f       	cpi	r25, 0xFF	; 255
    1936:	79 f0       	breq	.+30     	; 0x1956 <__fp_splitA+0x2a>
    1938:	87 95       	ror	r24
    193a:	08 95       	ret
    193c:	12 16       	cp	r1, r18
    193e:	13 06       	cpc	r1, r19
    1940:	14 06       	cpc	r1, r20
    1942:	55 1f       	adc	r21, r21
    1944:	f2 cf       	rjmp	.-28     	; 0x192a <__fp_split3+0xe>
    1946:	46 95       	lsr	r20
    1948:	f1 df       	rcall	.-30     	; 0x192c <__fp_splitA>
    194a:	08 c0       	rjmp	.+16     	; 0x195c <__fp_splitA+0x30>
    194c:	16 16       	cp	r1, r22
    194e:	17 06       	cpc	r1, r23
    1950:	18 06       	cpc	r1, r24
    1952:	99 1f       	adc	r25, r25
    1954:	f1 cf       	rjmp	.-30     	; 0x1938 <__fp_splitA+0xc>
    1956:	86 95       	lsr	r24
    1958:	71 05       	cpc	r23, r1
    195a:	61 05       	cpc	r22, r1
    195c:	08 94       	sec
    195e:	08 95       	ret

00001960 <__fp_zero>:
    1960:	e8 94       	clt

00001962 <__fp_szero>:
    1962:	bb 27       	eor	r27, r27
    1964:	66 27       	eor	r22, r22
    1966:	77 27       	eor	r23, r23
    1968:	cb 01       	movw	r24, r22
    196a:	97 f9       	bld	r25, 7
    196c:	08 95       	ret

0000196e <__gesf2>:
    196e:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_cmp>
    1972:	08 f4       	brcc	.+2      	; 0x1976 <__gesf2+0x8>
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	08 95       	ret

00001978 <__mulsf3>:
    1978:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3x>
    197c:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__fp_round>
    1980:	0e 94 6f 0c 	call	0x18de	; 0x18de <__fp_pscA>
    1984:	38 f0       	brcs	.+14     	; 0x1994 <__mulsf3+0x1c>
    1986:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__fp_pscB>
    198a:	20 f0       	brcs	.+8      	; 0x1994 <__mulsf3+0x1c>
    198c:	95 23       	and	r25, r21
    198e:	11 f0       	breq	.+4      	; 0x1994 <__mulsf3+0x1c>
    1990:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__fp_inf>
    1994:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__fp_nan>
    1998:	11 24       	eor	r1, r1
    199a:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__fp_szero>

0000199e <__mulsf3x>:
    199e:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_split3>
    19a2:	70 f3       	brcs	.-36     	; 0x1980 <__mulsf3+0x8>

000019a4 <__mulsf3_pse>:
    19a4:	95 9f       	mul	r25, r21
    19a6:	c1 f3       	breq	.-16     	; 0x1998 <__mulsf3+0x20>
    19a8:	95 0f       	add	r25, r21
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	55 1f       	adc	r21, r21
    19ae:	62 9f       	mul	r22, r18
    19b0:	f0 01       	movw	r30, r0
    19b2:	72 9f       	mul	r23, r18
    19b4:	bb 27       	eor	r27, r27
    19b6:	f0 0d       	add	r31, r0
    19b8:	b1 1d       	adc	r27, r1
    19ba:	63 9f       	mul	r22, r19
    19bc:	aa 27       	eor	r26, r26
    19be:	f0 0d       	add	r31, r0
    19c0:	b1 1d       	adc	r27, r1
    19c2:	aa 1f       	adc	r26, r26
    19c4:	64 9f       	mul	r22, r20
    19c6:	66 27       	eor	r22, r22
    19c8:	b0 0d       	add	r27, r0
    19ca:	a1 1d       	adc	r26, r1
    19cc:	66 1f       	adc	r22, r22
    19ce:	82 9f       	mul	r24, r18
    19d0:	22 27       	eor	r18, r18
    19d2:	b0 0d       	add	r27, r0
    19d4:	a1 1d       	adc	r26, r1
    19d6:	62 1f       	adc	r22, r18
    19d8:	73 9f       	mul	r23, r19
    19da:	b0 0d       	add	r27, r0
    19dc:	a1 1d       	adc	r26, r1
    19de:	62 1f       	adc	r22, r18
    19e0:	83 9f       	mul	r24, r19
    19e2:	a0 0d       	add	r26, r0
    19e4:	61 1d       	adc	r22, r1
    19e6:	22 1f       	adc	r18, r18
    19e8:	74 9f       	mul	r23, r20
    19ea:	33 27       	eor	r19, r19
    19ec:	a0 0d       	add	r26, r0
    19ee:	61 1d       	adc	r22, r1
    19f0:	23 1f       	adc	r18, r19
    19f2:	84 9f       	mul	r24, r20
    19f4:	60 0d       	add	r22, r0
    19f6:	21 1d       	adc	r18, r1
    19f8:	82 2f       	mov	r24, r18
    19fa:	76 2f       	mov	r23, r22
    19fc:	6a 2f       	mov	r22, r26
    19fe:	11 24       	eor	r1, r1
    1a00:	9f 57       	subi	r25, 0x7F	; 127
    1a02:	50 40       	sbci	r21, 0x00	; 0
    1a04:	9a f0       	brmi	.+38     	; 0x1a2c <__mulsf3_pse+0x88>
    1a06:	f1 f0       	breq	.+60     	; 0x1a44 <__mulsf3_pse+0xa0>
    1a08:	88 23       	and	r24, r24
    1a0a:	4a f0       	brmi	.+18     	; 0x1a1e <__mulsf3_pse+0x7a>
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	bb 1f       	adc	r27, r27
    1a12:	66 1f       	adc	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	91 50       	subi	r25, 0x01	; 1
    1a1a:	50 40       	sbci	r21, 0x00	; 0
    1a1c:	a9 f7       	brne	.-22     	; 0x1a08 <__mulsf3_pse+0x64>
    1a1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a20:	51 05       	cpc	r21, r1
    1a22:	80 f0       	brcs	.+32     	; 0x1a44 <__mulsf3_pse+0xa0>
    1a24:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__fp_inf>
    1a28:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__fp_szero>
    1a2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a2e:	e4 f3       	brlt	.-8      	; 0x1a28 <__mulsf3_pse+0x84>
    1a30:	98 3e       	cpi	r25, 0xE8	; 232
    1a32:	d4 f3       	brlt	.-12     	; 0x1a28 <__mulsf3_pse+0x84>
    1a34:	86 95       	lsr	r24
    1a36:	77 95       	ror	r23
    1a38:	67 95       	ror	r22
    1a3a:	b7 95       	ror	r27
    1a3c:	f7 95       	ror	r31
    1a3e:	e7 95       	ror	r30
    1a40:	9f 5f       	subi	r25, 0xFF	; 255
    1a42:	c1 f7       	brne	.-16     	; 0x1a34 <__mulsf3_pse+0x90>
    1a44:	fe 2b       	or	r31, r30
    1a46:	88 0f       	add	r24, r24
    1a48:	91 1d       	adc	r25, r1
    1a4a:	96 95       	lsr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	97 f9       	bld	r25, 7
    1a50:	08 95       	ret

00001a52 <sprintf>:
    1a52:	ae e0       	ldi	r26, 0x0E	; 14
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	ef e2       	ldi	r30, 0x2F	; 47
    1a58:	fd e0       	ldi	r31, 0x0D	; 13
    1a5a:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__prologue_saves__+0x1c>
    1a5e:	0d 89       	ldd	r16, Y+21	; 0x15
    1a60:	1e 89       	ldd	r17, Y+22	; 0x16
    1a62:	86 e0       	ldi	r24, 0x06	; 6
    1a64:	8c 83       	std	Y+4, r24	; 0x04
    1a66:	1a 83       	std	Y+2, r17	; 0x02
    1a68:	09 83       	std	Y+1, r16	; 0x01
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	9f e7       	ldi	r25, 0x7F	; 127
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	ae 01       	movw	r20, r28
    1a74:	47 5e       	subi	r20, 0xE7	; 231
    1a76:	5f 4f       	sbci	r21, 0xFF	; 255
    1a78:	6f 89       	ldd	r22, Y+23	; 0x17
    1a7a:	78 8d       	ldd	r23, Y+24	; 0x18
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vfprintf>
    1a84:	2f 81       	ldd	r18, Y+7	; 0x07
    1a86:	38 85       	ldd	r19, Y+8	; 0x08
    1a88:	f8 01       	movw	r30, r16
    1a8a:	e2 0f       	add	r30, r18
    1a8c:	f3 1f       	adc	r31, r19
    1a8e:	10 82       	st	Z, r1
    1a90:	2e 96       	adiw	r28, 0x0e	; 14
    1a92:	e4 e0       	ldi	r30, 0x04	; 4
    1a94:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__epilogue_restores__+0x1c>

00001a98 <vfprintf>:
    1a98:	ac e0       	ldi	r26, 0x0C	; 12
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e2 e5       	ldi	r30, 0x52	; 82
    1a9e:	fd e0       	ldi	r31, 0x0D	; 13
    1aa0:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__prologue_saves__>
    1aa4:	7c 01       	movw	r14, r24
    1aa6:	6b 01       	movw	r12, r22
    1aa8:	8a 01       	movw	r16, r20
    1aaa:	fc 01       	movw	r30, r24
    1aac:	17 82       	std	Z+7, r1	; 0x07
    1aae:	16 82       	std	Z+6, r1	; 0x06
    1ab0:	83 81       	ldd	r24, Z+3	; 0x03
    1ab2:	81 ff       	sbrs	r24, 1
    1ab4:	bd c1       	rjmp	.+890    	; 0x1e30 <vfprintf+0x398>
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	4c 01       	movw	r8, r24
    1abc:	f7 01       	movw	r30, r14
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	f6 01       	movw	r30, r12
    1ac2:	93 fd       	sbrc	r25, 3
    1ac4:	85 91       	lpm	r24, Z+
    1ac6:	93 ff       	sbrs	r25, 3
    1ac8:	81 91       	ld	r24, Z+
    1aca:	6f 01       	movw	r12, r30
    1acc:	88 23       	and	r24, r24
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <vfprintf+0x3a>
    1ad0:	ab c1       	rjmp	.+854    	; 0x1e28 <vfprintf+0x390>
    1ad2:	85 32       	cpi	r24, 0x25	; 37
    1ad4:	39 f4       	brne	.+14     	; 0x1ae4 <vfprintf+0x4c>
    1ad6:	93 fd       	sbrc	r25, 3
    1ad8:	85 91       	lpm	r24, Z+
    1ada:	93 ff       	sbrs	r25, 3
    1adc:	81 91       	ld	r24, Z+
    1ade:	6f 01       	movw	r12, r30
    1ae0:	85 32       	cpi	r24, 0x25	; 37
    1ae2:	29 f4       	brne	.+10     	; 0x1aee <vfprintf+0x56>
    1ae4:	b7 01       	movw	r22, r14
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1aec:	e7 cf       	rjmp	.-50     	; 0x1abc <vfprintf+0x24>
    1aee:	51 2c       	mov	r5, r1
    1af0:	31 2c       	mov	r3, r1
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	20 32       	cpi	r18, 0x20	; 32
    1af6:	a0 f4       	brcc	.+40     	; 0x1b20 <vfprintf+0x88>
    1af8:	8b 32       	cpi	r24, 0x2B	; 43
    1afa:	69 f0       	breq	.+26     	; 0x1b16 <vfprintf+0x7e>
    1afc:	30 f4       	brcc	.+12     	; 0x1b0a <vfprintf+0x72>
    1afe:	80 32       	cpi	r24, 0x20	; 32
    1b00:	59 f0       	breq	.+22     	; 0x1b18 <vfprintf+0x80>
    1b02:	83 32       	cpi	r24, 0x23	; 35
    1b04:	69 f4       	brne	.+26     	; 0x1b20 <vfprintf+0x88>
    1b06:	20 61       	ori	r18, 0x10	; 16
    1b08:	2c c0       	rjmp	.+88     	; 0x1b62 <vfprintf+0xca>
    1b0a:	8d 32       	cpi	r24, 0x2D	; 45
    1b0c:	39 f0       	breq	.+14     	; 0x1b1c <vfprintf+0x84>
    1b0e:	80 33       	cpi	r24, 0x30	; 48
    1b10:	39 f4       	brne	.+14     	; 0x1b20 <vfprintf+0x88>
    1b12:	21 60       	ori	r18, 0x01	; 1
    1b14:	26 c0       	rjmp	.+76     	; 0x1b62 <vfprintf+0xca>
    1b16:	22 60       	ori	r18, 0x02	; 2
    1b18:	24 60       	ori	r18, 0x04	; 4
    1b1a:	23 c0       	rjmp	.+70     	; 0x1b62 <vfprintf+0xca>
    1b1c:	28 60       	ori	r18, 0x08	; 8
    1b1e:	21 c0       	rjmp	.+66     	; 0x1b62 <vfprintf+0xca>
    1b20:	27 fd       	sbrc	r18, 7
    1b22:	27 c0       	rjmp	.+78     	; 0x1b72 <vfprintf+0xda>
    1b24:	30 ed       	ldi	r19, 0xD0	; 208
    1b26:	38 0f       	add	r19, r24
    1b28:	3a 30       	cpi	r19, 0x0A	; 10
    1b2a:	78 f4       	brcc	.+30     	; 0x1b4a <vfprintf+0xb2>
    1b2c:	26 ff       	sbrs	r18, 6
    1b2e:	06 c0       	rjmp	.+12     	; 0x1b3c <vfprintf+0xa4>
    1b30:	fa e0       	ldi	r31, 0x0A	; 10
    1b32:	5f 9e       	mul	r5, r31
    1b34:	30 0d       	add	r19, r0
    1b36:	11 24       	eor	r1, r1
    1b38:	53 2e       	mov	r5, r19
    1b3a:	13 c0       	rjmp	.+38     	; 0x1b62 <vfprintf+0xca>
    1b3c:	8a e0       	ldi	r24, 0x0A	; 10
    1b3e:	38 9e       	mul	r3, r24
    1b40:	30 0d       	add	r19, r0
    1b42:	11 24       	eor	r1, r1
    1b44:	33 2e       	mov	r3, r19
    1b46:	20 62       	ori	r18, 0x20	; 32
    1b48:	0c c0       	rjmp	.+24     	; 0x1b62 <vfprintf+0xca>
    1b4a:	8e 32       	cpi	r24, 0x2E	; 46
    1b4c:	21 f4       	brne	.+8      	; 0x1b56 <vfprintf+0xbe>
    1b4e:	26 fd       	sbrc	r18, 6
    1b50:	6b c1       	rjmp	.+726    	; 0x1e28 <vfprintf+0x390>
    1b52:	20 64       	ori	r18, 0x40	; 64
    1b54:	06 c0       	rjmp	.+12     	; 0x1b62 <vfprintf+0xca>
    1b56:	8c 36       	cpi	r24, 0x6C	; 108
    1b58:	11 f4       	brne	.+4      	; 0x1b5e <vfprintf+0xc6>
    1b5a:	20 68       	ori	r18, 0x80	; 128
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <vfprintf+0xca>
    1b5e:	88 36       	cpi	r24, 0x68	; 104
    1b60:	41 f4       	brne	.+16     	; 0x1b72 <vfprintf+0xda>
    1b62:	f6 01       	movw	r30, r12
    1b64:	93 fd       	sbrc	r25, 3
    1b66:	85 91       	lpm	r24, Z+
    1b68:	93 ff       	sbrs	r25, 3
    1b6a:	81 91       	ld	r24, Z+
    1b6c:	6f 01       	movw	r12, r30
    1b6e:	81 11       	cpse	r24, r1
    1b70:	c1 cf       	rjmp	.-126    	; 0x1af4 <vfprintf+0x5c>
    1b72:	98 2f       	mov	r25, r24
    1b74:	9f 7d       	andi	r25, 0xDF	; 223
    1b76:	95 54       	subi	r25, 0x45	; 69
    1b78:	93 30       	cpi	r25, 0x03	; 3
    1b7a:	28 f4       	brcc	.+10     	; 0x1b86 <vfprintf+0xee>
    1b7c:	0c 5f       	subi	r16, 0xFC	; 252
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	ff e3       	ldi	r31, 0x3F	; 63
    1b82:	f9 83       	std	Y+1, r31	; 0x01
    1b84:	0d c0       	rjmp	.+26     	; 0x1ba0 <vfprintf+0x108>
    1b86:	83 36       	cpi	r24, 0x63	; 99
    1b88:	31 f0       	breq	.+12     	; 0x1b96 <vfprintf+0xfe>
    1b8a:	83 37       	cpi	r24, 0x73	; 115
    1b8c:	71 f0       	breq	.+28     	; 0x1baa <vfprintf+0x112>
    1b8e:	83 35       	cpi	r24, 0x53	; 83
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <vfprintf+0xfc>
    1b92:	5b c0       	rjmp	.+182    	; 0x1c4a <vfprintf+0x1b2>
    1b94:	22 c0       	rjmp	.+68     	; 0x1bda <vfprintf+0x142>
    1b96:	f8 01       	movw	r30, r16
    1b98:	80 81       	ld	r24, Z
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	0e 5f       	subi	r16, 0xFE	; 254
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba0:	44 24       	eor	r4, r4
    1ba2:	43 94       	inc	r4
    1ba4:	51 2c       	mov	r5, r1
    1ba6:	54 01       	movw	r10, r8
    1ba8:	15 c0       	rjmp	.+42     	; 0x1bd4 <vfprintf+0x13c>
    1baa:	38 01       	movw	r6, r16
    1bac:	f2 e0       	ldi	r31, 0x02	; 2
    1bae:	6f 0e       	add	r6, r31
    1bb0:	71 1c       	adc	r7, r1
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	a0 80       	ld	r10, Z
    1bb6:	b1 80       	ldd	r11, Z+1	; 0x01
    1bb8:	26 ff       	sbrs	r18, 6
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <vfprintf+0x12a>
    1bbc:	65 2d       	mov	r22, r5
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <vfprintf+0x12e>
    1bc2:	6f ef       	ldi	r22, 0xFF	; 255
    1bc4:	7f ef       	ldi	r23, 0xFF	; 255
    1bc6:	c5 01       	movw	r24, r10
    1bc8:	2c 87       	std	Y+12, r18	; 0x0c
    1bca:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <strnlen>
    1bce:	2c 01       	movw	r4, r24
    1bd0:	83 01       	movw	r16, r6
    1bd2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bd4:	2f 77       	andi	r18, 0x7F	; 127
    1bd6:	22 2e       	mov	r2, r18
    1bd8:	17 c0       	rjmp	.+46     	; 0x1c08 <vfprintf+0x170>
    1bda:	38 01       	movw	r6, r16
    1bdc:	f2 e0       	ldi	r31, 0x02	; 2
    1bde:	6f 0e       	add	r6, r31
    1be0:	71 1c       	adc	r7, r1
    1be2:	f8 01       	movw	r30, r16
    1be4:	a0 80       	ld	r10, Z
    1be6:	b1 80       	ldd	r11, Z+1	; 0x01
    1be8:	26 ff       	sbrs	r18, 6
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <vfprintf+0x15a>
    1bec:	65 2d       	mov	r22, r5
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vfprintf+0x15e>
    1bf2:	6f ef       	ldi	r22, 0xFF	; 255
    1bf4:	7f ef       	ldi	r23, 0xFF	; 255
    1bf6:	c5 01       	movw	r24, r10
    1bf8:	2c 87       	std	Y+12, r18	; 0x0c
    1bfa:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strnlen_P>
    1bfe:	2c 01       	movw	r4, r24
    1c00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c02:	20 68       	ori	r18, 0x80	; 128
    1c04:	22 2e       	mov	r2, r18
    1c06:	83 01       	movw	r16, r6
    1c08:	23 fc       	sbrc	r2, 3
    1c0a:	1b c0       	rjmp	.+54     	; 0x1c42 <vfprintf+0x1aa>
    1c0c:	83 2d       	mov	r24, r3
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	48 16       	cp	r4, r24
    1c12:	59 06       	cpc	r5, r25
    1c14:	b0 f4       	brcc	.+44     	; 0x1c42 <vfprintf+0x1aa>
    1c16:	b7 01       	movw	r22, r14
    1c18:	80 e2       	ldi	r24, 0x20	; 32
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1c20:	3a 94       	dec	r3
    1c22:	f4 cf       	rjmp	.-24     	; 0x1c0c <vfprintf+0x174>
    1c24:	f5 01       	movw	r30, r10
    1c26:	27 fc       	sbrc	r2, 7
    1c28:	85 91       	lpm	r24, Z+
    1c2a:	27 fe       	sbrs	r2, 7
    1c2c:	81 91       	ld	r24, Z+
    1c2e:	5f 01       	movw	r10, r30
    1c30:	b7 01       	movw	r22, r14
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1c38:	31 10       	cpse	r3, r1
    1c3a:	3a 94       	dec	r3
    1c3c:	f1 e0       	ldi	r31, 0x01	; 1
    1c3e:	4f 1a       	sub	r4, r31
    1c40:	51 08       	sbc	r5, r1
    1c42:	41 14       	cp	r4, r1
    1c44:	51 04       	cpc	r5, r1
    1c46:	71 f7       	brne	.-36     	; 0x1c24 <vfprintf+0x18c>
    1c48:	e5 c0       	rjmp	.+458    	; 0x1e14 <vfprintf+0x37c>
    1c4a:	84 36       	cpi	r24, 0x64	; 100
    1c4c:	11 f0       	breq	.+4      	; 0x1c52 <vfprintf+0x1ba>
    1c4e:	89 36       	cpi	r24, 0x69	; 105
    1c50:	39 f5       	brne	.+78     	; 0x1ca0 <vfprintf+0x208>
    1c52:	f8 01       	movw	r30, r16
    1c54:	27 ff       	sbrs	r18, 7
    1c56:	07 c0       	rjmp	.+14     	; 0x1c66 <vfprintf+0x1ce>
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	0c 5f       	subi	r16, 0xFC	; 252
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	08 c0       	rjmp	.+16     	; 0x1c76 <vfprintf+0x1de>
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	07 2e       	mov	r0, r23
    1c6c:	00 0c       	add	r0, r0
    1c6e:	88 0b       	sbc	r24, r24
    1c70:	99 0b       	sbc	r25, r25
    1c72:	0e 5f       	subi	r16, 0xFE	; 254
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	2f 76       	andi	r18, 0x6F	; 111
    1c78:	72 2e       	mov	r7, r18
    1c7a:	97 ff       	sbrs	r25, 7
    1c7c:	09 c0       	rjmp	.+18     	; 0x1c90 <vfprintf+0x1f8>
    1c7e:	90 95       	com	r25
    1c80:	80 95       	com	r24
    1c82:	70 95       	com	r23
    1c84:	61 95       	neg	r22
    1c86:	7f 4f       	sbci	r23, 0xFF	; 255
    1c88:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8c:	20 68       	ori	r18, 0x80	; 128
    1c8e:	72 2e       	mov	r7, r18
    1c90:	2a e0       	ldi	r18, 0x0A	; 10
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	a4 01       	movw	r20, r8
    1c96:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__ultoa_invert>
    1c9a:	a8 2e       	mov	r10, r24
    1c9c:	a8 18       	sub	r10, r8
    1c9e:	44 c0       	rjmp	.+136    	; 0x1d28 <vfprintf+0x290>
    1ca0:	85 37       	cpi	r24, 0x75	; 117
    1ca2:	29 f4       	brne	.+10     	; 0x1cae <vfprintf+0x216>
    1ca4:	2f 7e       	andi	r18, 0xEF	; 239
    1ca6:	b2 2e       	mov	r11, r18
    1ca8:	2a e0       	ldi	r18, 0x0A	; 10
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	25 c0       	rjmp	.+74     	; 0x1cf8 <vfprintf+0x260>
    1cae:	f2 2f       	mov	r31, r18
    1cb0:	f9 7f       	andi	r31, 0xF9	; 249
    1cb2:	bf 2e       	mov	r11, r31
    1cb4:	8f 36       	cpi	r24, 0x6F	; 111
    1cb6:	c1 f0       	breq	.+48     	; 0x1ce8 <vfprintf+0x250>
    1cb8:	18 f4       	brcc	.+6      	; 0x1cc0 <vfprintf+0x228>
    1cba:	88 35       	cpi	r24, 0x58	; 88
    1cbc:	79 f0       	breq	.+30     	; 0x1cdc <vfprintf+0x244>
    1cbe:	b4 c0       	rjmp	.+360    	; 0x1e28 <vfprintf+0x390>
    1cc0:	80 37       	cpi	r24, 0x70	; 112
    1cc2:	19 f0       	breq	.+6      	; 0x1cca <vfprintf+0x232>
    1cc4:	88 37       	cpi	r24, 0x78	; 120
    1cc6:	21 f0       	breq	.+8      	; 0x1cd0 <vfprintf+0x238>
    1cc8:	af c0       	rjmp	.+350    	; 0x1e28 <vfprintf+0x390>
    1cca:	2f 2f       	mov	r18, r31
    1ccc:	20 61       	ori	r18, 0x10	; 16
    1cce:	b2 2e       	mov	r11, r18
    1cd0:	b4 fe       	sbrs	r11, 4
    1cd2:	0d c0       	rjmp	.+26     	; 0x1cee <vfprintf+0x256>
    1cd4:	8b 2d       	mov	r24, r11
    1cd6:	84 60       	ori	r24, 0x04	; 4
    1cd8:	b8 2e       	mov	r11, r24
    1cda:	09 c0       	rjmp	.+18     	; 0x1cee <vfprintf+0x256>
    1cdc:	24 ff       	sbrs	r18, 4
    1cde:	0a c0       	rjmp	.+20     	; 0x1cf4 <vfprintf+0x25c>
    1ce0:	9f 2f       	mov	r25, r31
    1ce2:	96 60       	ori	r25, 0x06	; 6
    1ce4:	b9 2e       	mov	r11, r25
    1ce6:	06 c0       	rjmp	.+12     	; 0x1cf4 <vfprintf+0x25c>
    1ce8:	28 e0       	ldi	r18, 0x08	; 8
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <vfprintf+0x260>
    1cee:	20 e1       	ldi	r18, 0x10	; 16
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <vfprintf+0x260>
    1cf4:	20 e1       	ldi	r18, 0x10	; 16
    1cf6:	32 e0       	ldi	r19, 0x02	; 2
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	b7 fe       	sbrs	r11, 7
    1cfc:	07 c0       	rjmp	.+14     	; 0x1d0c <vfprintf+0x274>
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	0c 5f       	subi	r16, 0xFC	; 252
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	06 c0       	rjmp	.+12     	; 0x1d18 <vfprintf+0x280>
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 5f       	subi	r16, 0xFE	; 254
    1d16:	1f 4f       	sbci	r17, 0xFF	; 255
    1d18:	a4 01       	movw	r20, r8
    1d1a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__ultoa_invert>
    1d1e:	a8 2e       	mov	r10, r24
    1d20:	a8 18       	sub	r10, r8
    1d22:	fb 2d       	mov	r31, r11
    1d24:	ff 77       	andi	r31, 0x7F	; 127
    1d26:	7f 2e       	mov	r7, r31
    1d28:	76 fe       	sbrs	r7, 6
    1d2a:	0b c0       	rjmp	.+22     	; 0x1d42 <vfprintf+0x2aa>
    1d2c:	37 2d       	mov	r19, r7
    1d2e:	3e 7f       	andi	r19, 0xFE	; 254
    1d30:	a5 14       	cp	r10, r5
    1d32:	50 f4       	brcc	.+20     	; 0x1d48 <vfprintf+0x2b0>
    1d34:	74 fe       	sbrs	r7, 4
    1d36:	0a c0       	rjmp	.+20     	; 0x1d4c <vfprintf+0x2b4>
    1d38:	72 fc       	sbrc	r7, 2
    1d3a:	08 c0       	rjmp	.+16     	; 0x1d4c <vfprintf+0x2b4>
    1d3c:	37 2d       	mov	r19, r7
    1d3e:	3e 7e       	andi	r19, 0xEE	; 238
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <vfprintf+0x2b4>
    1d42:	ba 2c       	mov	r11, r10
    1d44:	37 2d       	mov	r19, r7
    1d46:	03 c0       	rjmp	.+6      	; 0x1d4e <vfprintf+0x2b6>
    1d48:	ba 2c       	mov	r11, r10
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <vfprintf+0x2b6>
    1d4c:	b5 2c       	mov	r11, r5
    1d4e:	34 ff       	sbrs	r19, 4
    1d50:	0d c0       	rjmp	.+26     	; 0x1d6c <vfprintf+0x2d4>
    1d52:	fe 01       	movw	r30, r28
    1d54:	ea 0d       	add	r30, r10
    1d56:	f1 1d       	adc	r31, r1
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 33       	cpi	r24, 0x30	; 48
    1d5c:	11 f4       	brne	.+4      	; 0x1d62 <vfprintf+0x2ca>
    1d5e:	39 7e       	andi	r19, 0xE9	; 233
    1d60:	09 c0       	rjmp	.+18     	; 0x1d74 <vfprintf+0x2dc>
    1d62:	32 ff       	sbrs	r19, 2
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <vfprintf+0x2da>
    1d66:	b3 94       	inc	r11
    1d68:	b3 94       	inc	r11
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <vfprintf+0x2dc>
    1d6c:	83 2f       	mov	r24, r19
    1d6e:	86 78       	andi	r24, 0x86	; 134
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <vfprintf+0x2dc>
    1d72:	b3 94       	inc	r11
    1d74:	33 fd       	sbrc	r19, 3
    1d76:	13 c0       	rjmp	.+38     	; 0x1d9e <vfprintf+0x306>
    1d78:	30 ff       	sbrs	r19, 0
    1d7a:	06 c0       	rjmp	.+12     	; 0x1d88 <vfprintf+0x2f0>
    1d7c:	5a 2c       	mov	r5, r10
    1d7e:	b3 14       	cp	r11, r3
    1d80:	18 f4       	brcc	.+6      	; 0x1d88 <vfprintf+0x2f0>
    1d82:	53 0c       	add	r5, r3
    1d84:	5b 18       	sub	r5, r11
    1d86:	b3 2c       	mov	r11, r3
    1d88:	b3 14       	cp	r11, r3
    1d8a:	68 f4       	brcc	.+26     	; 0x1da6 <vfprintf+0x30e>
    1d8c:	b7 01       	movw	r22, r14
    1d8e:	80 e2       	ldi	r24, 0x20	; 32
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	3c 87       	std	Y+12, r19	; 0x0c
    1d94:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1d98:	b3 94       	inc	r11
    1d9a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d9c:	f5 cf       	rjmp	.-22     	; 0x1d88 <vfprintf+0x2f0>
    1d9e:	b3 14       	cp	r11, r3
    1da0:	10 f4       	brcc	.+4      	; 0x1da6 <vfprintf+0x30e>
    1da2:	3b 18       	sub	r3, r11
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <vfprintf+0x310>
    1da6:	31 2c       	mov	r3, r1
    1da8:	34 ff       	sbrs	r19, 4
    1daa:	12 c0       	rjmp	.+36     	; 0x1dd0 <vfprintf+0x338>
    1dac:	b7 01       	movw	r22, r14
    1dae:	80 e3       	ldi	r24, 0x30	; 48
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	3c 87       	std	Y+12, r19	; 0x0c
    1db4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1db8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dba:	32 ff       	sbrs	r19, 2
    1dbc:	17 c0       	rjmp	.+46     	; 0x1dec <vfprintf+0x354>
    1dbe:	31 fd       	sbrc	r19, 1
    1dc0:	03 c0       	rjmp	.+6      	; 0x1dc8 <vfprintf+0x330>
    1dc2:	88 e7       	ldi	r24, 0x78	; 120
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <vfprintf+0x334>
    1dc8:	88 e5       	ldi	r24, 0x58	; 88
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	b7 01       	movw	r22, r14
    1dce:	0c c0       	rjmp	.+24     	; 0x1de8 <vfprintf+0x350>
    1dd0:	83 2f       	mov	r24, r19
    1dd2:	86 78       	andi	r24, 0x86	; 134
    1dd4:	59 f0       	breq	.+22     	; 0x1dec <vfprintf+0x354>
    1dd6:	31 ff       	sbrs	r19, 1
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <vfprintf+0x346>
    1dda:	8b e2       	ldi	r24, 0x2B	; 43
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <vfprintf+0x348>
    1dde:	80 e2       	ldi	r24, 0x20	; 32
    1de0:	37 fd       	sbrc	r19, 7
    1de2:	8d e2       	ldi	r24, 0x2D	; 45
    1de4:	b7 01       	movw	r22, r14
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1dec:	a5 14       	cp	r10, r5
    1dee:	38 f4       	brcc	.+14     	; 0x1dfe <vfprintf+0x366>
    1df0:	b7 01       	movw	r22, r14
    1df2:	80 e3       	ldi	r24, 0x30	; 48
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1dfa:	5a 94       	dec	r5
    1dfc:	f7 cf       	rjmp	.-18     	; 0x1dec <vfprintf+0x354>
    1dfe:	aa 94       	dec	r10
    1e00:	f4 01       	movw	r30, r8
    1e02:	ea 0d       	add	r30, r10
    1e04:	f1 1d       	adc	r31, r1
    1e06:	80 81       	ld	r24, Z
    1e08:	b7 01       	movw	r22, r14
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1e10:	a1 10       	cpse	r10, r1
    1e12:	f5 cf       	rjmp	.-22     	; 0x1dfe <vfprintf+0x366>
    1e14:	33 20       	and	r3, r3
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <vfprintf+0x382>
    1e18:	51 ce       	rjmp	.-862    	; 0x1abc <vfprintf+0x24>
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	80 e2       	ldi	r24, 0x20	; 32
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <fputc>
    1e24:	3a 94       	dec	r3
    1e26:	f6 cf       	rjmp	.-20     	; 0x1e14 <vfprintf+0x37c>
    1e28:	f7 01       	movw	r30, r14
    1e2a:	86 81       	ldd	r24, Z+6	; 0x06
    1e2c:	97 81       	ldd	r25, Z+7	; 0x07
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <vfprintf+0x39c>
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	9f ef       	ldi	r25, 0xFF	; 255
    1e34:	2c 96       	adiw	r28, 0x0c	; 12
    1e36:	e2 e1       	ldi	r30, 0x12	; 18
    1e38:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__epilogue_restores__>

00001e3c <strnlen_P>:
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	05 90       	lpm	r0, Z+
    1e40:	61 50       	subi	r22, 0x01	; 1
    1e42:	70 40       	sbci	r23, 0x00	; 0
    1e44:	01 10       	cpse	r0, r1
    1e46:	d8 f7       	brcc	.-10     	; 0x1e3e <strnlen_P+0x2>
    1e48:	80 95       	com	r24
    1e4a:	90 95       	com	r25
    1e4c:	8e 0f       	add	r24, r30
    1e4e:	9f 1f       	adc	r25, r31
    1e50:	08 95       	ret

00001e52 <strnlen>:
    1e52:	fc 01       	movw	r30, r24
    1e54:	61 50       	subi	r22, 0x01	; 1
    1e56:	70 40       	sbci	r23, 0x00	; 0
    1e58:	01 90       	ld	r0, Z+
    1e5a:	01 10       	cpse	r0, r1
    1e5c:	d8 f7       	brcc	.-10     	; 0x1e54 <strnlen+0x2>
    1e5e:	80 95       	com	r24
    1e60:	90 95       	com	r25
    1e62:	8e 0f       	add	r24, r30
    1e64:	9f 1f       	adc	r25, r31
    1e66:	08 95       	ret

00001e68 <fputc>:
    1e68:	0f 93       	push	r16
    1e6a:	1f 93       	push	r17
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	fb 01       	movw	r30, r22
    1e72:	23 81       	ldd	r18, Z+3	; 0x03
    1e74:	21 fd       	sbrc	r18, 1
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <fputc+0x16>
    1e78:	8f ef       	ldi	r24, 0xFF	; 255
    1e7a:	9f ef       	ldi	r25, 0xFF	; 255
    1e7c:	28 c0       	rjmp	.+80     	; 0x1ece <fputc+0x66>
    1e7e:	22 ff       	sbrs	r18, 2
    1e80:	16 c0       	rjmp	.+44     	; 0x1eae <fputc+0x46>
    1e82:	46 81       	ldd	r20, Z+6	; 0x06
    1e84:	57 81       	ldd	r21, Z+7	; 0x07
    1e86:	24 81       	ldd	r18, Z+4	; 0x04
    1e88:	35 81       	ldd	r19, Z+5	; 0x05
    1e8a:	42 17       	cp	r20, r18
    1e8c:	53 07       	cpc	r21, r19
    1e8e:	44 f4       	brge	.+16     	; 0x1ea0 <fputc+0x38>
    1e90:	a0 81       	ld	r26, Z
    1e92:	b1 81       	ldd	r27, Z+1	; 0x01
    1e94:	9d 01       	movw	r18, r26
    1e96:	2f 5f       	subi	r18, 0xFF	; 255
    1e98:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9a:	31 83       	std	Z+1, r19	; 0x01
    1e9c:	20 83       	st	Z, r18
    1e9e:	8c 93       	st	X, r24
    1ea0:	26 81       	ldd	r18, Z+6	; 0x06
    1ea2:	37 81       	ldd	r19, Z+7	; 0x07
    1ea4:	2f 5f       	subi	r18, 0xFF	; 255
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	37 83       	std	Z+7, r19	; 0x07
    1eaa:	26 83       	std	Z+6, r18	; 0x06
    1eac:	10 c0       	rjmp	.+32     	; 0x1ece <fputc+0x66>
    1eae:	eb 01       	movw	r28, r22
    1eb0:	09 2f       	mov	r16, r25
    1eb2:	18 2f       	mov	r17, r24
    1eb4:	00 84       	ldd	r0, Z+8	; 0x08
    1eb6:	f1 85       	ldd	r31, Z+9	; 0x09
    1eb8:	e0 2d       	mov	r30, r0
    1eba:	09 95       	icall
    1ebc:	89 2b       	or	r24, r25
    1ebe:	e1 f6       	brne	.-72     	; 0x1e78 <fputc+0x10>
    1ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	9f 83       	std	Y+7, r25	; 0x07
    1ec8:	8e 83       	std	Y+6, r24	; 0x06
    1eca:	81 2f       	mov	r24, r17
    1ecc:	90 2f       	mov	r25, r16
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <__ultoa_invert>:
    1ed8:	fa 01       	movw	r30, r20
    1eda:	aa 27       	eor	r26, r26
    1edc:	28 30       	cpi	r18, 0x08	; 8
    1ede:	51 f1       	breq	.+84     	; 0x1f34 <__ultoa_invert+0x5c>
    1ee0:	20 31       	cpi	r18, 0x10	; 16
    1ee2:	81 f1       	breq	.+96     	; 0x1f44 <__ultoa_invert+0x6c>
    1ee4:	e8 94       	clt
    1ee6:	6f 93       	push	r22
    1ee8:	6e 7f       	andi	r22, 0xFE	; 254
    1eea:	6e 5f       	subi	r22, 0xFE	; 254
    1eec:	7f 4f       	sbci	r23, 0xFF	; 255
    1eee:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	af 4f       	sbci	r26, 0xFF	; 255
    1ef4:	b1 e0       	ldi	r27, 0x01	; 1
    1ef6:	3e d0       	rcall	.+124    	; 0x1f74 <__ultoa_invert+0x9c>
    1ef8:	b4 e0       	ldi	r27, 0x04	; 4
    1efa:	3c d0       	rcall	.+120    	; 0x1f74 <__ultoa_invert+0x9c>
    1efc:	67 0f       	add	r22, r23
    1efe:	78 1f       	adc	r23, r24
    1f00:	89 1f       	adc	r24, r25
    1f02:	9a 1f       	adc	r25, r26
    1f04:	a1 1d       	adc	r26, r1
    1f06:	68 0f       	add	r22, r24
    1f08:	79 1f       	adc	r23, r25
    1f0a:	8a 1f       	adc	r24, r26
    1f0c:	91 1d       	adc	r25, r1
    1f0e:	a1 1d       	adc	r26, r1
    1f10:	6a 0f       	add	r22, r26
    1f12:	71 1d       	adc	r23, r1
    1f14:	81 1d       	adc	r24, r1
    1f16:	91 1d       	adc	r25, r1
    1f18:	a1 1d       	adc	r26, r1
    1f1a:	20 d0       	rcall	.+64     	; 0x1f5c <__ultoa_invert+0x84>
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <__ultoa_invert+0x48>
    1f1e:	68 94       	set
    1f20:	3f 91       	pop	r19
    1f22:	2a e0       	ldi	r18, 0x0A	; 10
    1f24:	26 9f       	mul	r18, r22
    1f26:	11 24       	eor	r1, r1
    1f28:	30 19       	sub	r19, r0
    1f2a:	30 5d       	subi	r19, 0xD0	; 208
    1f2c:	31 93       	st	Z+, r19
    1f2e:	de f6       	brtc	.-74     	; 0x1ee6 <__ultoa_invert+0xe>
    1f30:	cf 01       	movw	r24, r30
    1f32:	08 95       	ret
    1f34:	46 2f       	mov	r20, r22
    1f36:	47 70       	andi	r20, 0x07	; 7
    1f38:	40 5d       	subi	r20, 0xD0	; 208
    1f3a:	41 93       	st	Z+, r20
    1f3c:	b3 e0       	ldi	r27, 0x03	; 3
    1f3e:	0f d0       	rcall	.+30     	; 0x1f5e <__ultoa_invert+0x86>
    1f40:	c9 f7       	brne	.-14     	; 0x1f34 <__ultoa_invert+0x5c>
    1f42:	f6 cf       	rjmp	.-20     	; 0x1f30 <__ultoa_invert+0x58>
    1f44:	46 2f       	mov	r20, r22
    1f46:	4f 70       	andi	r20, 0x0F	; 15
    1f48:	40 5d       	subi	r20, 0xD0	; 208
    1f4a:	4a 33       	cpi	r20, 0x3A	; 58
    1f4c:	18 f0       	brcs	.+6      	; 0x1f54 <__ultoa_invert+0x7c>
    1f4e:	49 5d       	subi	r20, 0xD9	; 217
    1f50:	31 fd       	sbrc	r19, 1
    1f52:	40 52       	subi	r20, 0x20	; 32
    1f54:	41 93       	st	Z+, r20
    1f56:	02 d0       	rcall	.+4      	; 0x1f5c <__ultoa_invert+0x84>
    1f58:	a9 f7       	brne	.-22     	; 0x1f44 <__ultoa_invert+0x6c>
    1f5a:	ea cf       	rjmp	.-44     	; 0x1f30 <__ultoa_invert+0x58>
    1f5c:	b4 e0       	ldi	r27, 0x04	; 4
    1f5e:	a6 95       	lsr	r26
    1f60:	97 95       	ror	r25
    1f62:	87 95       	ror	r24
    1f64:	77 95       	ror	r23
    1f66:	67 95       	ror	r22
    1f68:	ba 95       	dec	r27
    1f6a:	c9 f7       	brne	.-14     	; 0x1f5e <__ultoa_invert+0x86>
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	61 05       	cpc	r22, r1
    1f70:	71 05       	cpc	r23, r1
    1f72:	08 95       	ret
    1f74:	9b 01       	movw	r18, r22
    1f76:	ac 01       	movw	r20, r24
    1f78:	0a 2e       	mov	r0, r26
    1f7a:	06 94       	lsr	r0
    1f7c:	57 95       	ror	r21
    1f7e:	47 95       	ror	r20
    1f80:	37 95       	ror	r19
    1f82:	27 95       	ror	r18
    1f84:	ba 95       	dec	r27
    1f86:	c9 f7       	brne	.-14     	; 0x1f7a <__ultoa_invert+0xa2>
    1f88:	62 0f       	add	r22, r18
    1f8a:	73 1f       	adc	r23, r19
    1f8c:	84 1f       	adc	r24, r20
    1f8e:	95 1f       	adc	r25, r21
    1f90:	a0 1d       	adc	r26, r0
    1f92:	08 95       	ret

00001f94 <__prologue_saves__>:
    1f94:	2f 92       	push	r2
    1f96:	3f 92       	push	r3
    1f98:	4f 92       	push	r4
    1f9a:	5f 92       	push	r5
    1f9c:	6f 92       	push	r6
    1f9e:	7f 92       	push	r7
    1fa0:	8f 92       	push	r8
    1fa2:	9f 92       	push	r9
    1fa4:	af 92       	push	r10
    1fa6:	bf 92       	push	r11
    1fa8:	cf 92       	push	r12
    1faa:	df 92       	push	r13
    1fac:	ef 92       	push	r14
    1fae:	ff 92       	push	r15
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	ca 1b       	sub	r28, r26
    1fbe:	db 0b       	sbc	r29, r27
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	09 94       	ijmp

00001fcc <__epilogue_restores__>:
    1fcc:	2a 88       	ldd	r2, Y+18	; 0x12
    1fce:	39 88       	ldd	r3, Y+17	; 0x11
    1fd0:	48 88       	ldd	r4, Y+16	; 0x10
    1fd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fda:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fdc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fde:	b9 84       	ldd	r11, Y+9	; 0x09
    1fe0:	c8 84       	ldd	r12, Y+8	; 0x08
    1fe2:	df 80       	ldd	r13, Y+7	; 0x07
    1fe4:	ee 80       	ldd	r14, Y+6	; 0x06
    1fe6:	fd 80       	ldd	r15, Y+5	; 0x05
    1fe8:	0c 81       	ldd	r16, Y+4	; 0x04
    1fea:	1b 81       	ldd	r17, Y+3	; 0x03
    1fec:	aa 81       	ldd	r26, Y+2	; 0x02
    1fee:	b9 81       	ldd	r27, Y+1	; 0x01
    1ff0:	ce 0f       	add	r28, r30
    1ff2:	d1 1d       	adc	r29, r1
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	ed 01       	movw	r28, r26
    2000:	08 95       	ret

00002002 <_exit>:
    2002:	f8 94       	cli

00002004 <__stop_program>:
    2004:	ff cf       	rjmp	.-2      	; 0x2004 <__stop_program>
