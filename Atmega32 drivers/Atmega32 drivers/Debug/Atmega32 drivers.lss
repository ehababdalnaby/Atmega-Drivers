
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000338  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001000  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081b  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000072a  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  000023f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044d  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000713  00000000  00000000  00002971  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "includes.h"
#include "LCD.h"

int main(void)
{
	LCD_init();	
  6c:	0e 94 89 00 	call	0x112	; 0x112 <LCD_init>
    /* Replace with your application code */
    while (1) 
    {
	disp_char('a');
  70:	81 e6       	ldi	r24, 0x61	; 97
  72:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <disp_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	87 ea       	ldi	r24, 0xA7	; 167
  78:	91 e6       	ldi	r25, 0x61	; 97
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <main+0xe>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <main+0x14>
  80:	00 00       	nop
  82:	f6 cf       	rjmp	.-20     	; 0x70 <main+0x4>

00000084 <LCD_latch>:
	_delay_us(40);
}

void LCD_latch(void)
{
	writePin(LCD_E,HIGH);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	8b e0       	ldi	r24, 0x0B	; 11
  88:	0e 94 e6 00 	call	0x1cc	; 0x1cc <writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	8d e0       	ldi	r24, 0x0D	; 13
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_latch+0xa>
  92:	00 00       	nop
	_delay_us(40);
	writePin(LCD_E,LOW);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	8b e0       	ldi	r24, 0x0B	; 11
  98:	0e 94 e6 00 	call	0x1cc	; 0x1cc <writePin>
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_latch+0x1a>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <LCD_send_cmd>:
	_delay_ms(2);
}


void LCD_send_cmd(u8 command)
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	writePin(LCD_RS,LOW);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	89 e0       	ldi	r24, 0x09	; 9
  ae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <writePin>
	writePins(&PORTA,data_pins,LOW);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	60 ef       	ldi	r22, 0xF0	; 240
  b6:	8b e3       	ldi	r24, 0x3B	; 59
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <writePins>
	writePins(&PORTA,(command&data_pins),HIGH);	
  be:	6c 2f       	mov	r22, r28
  c0:	60 7f       	andi	r22, 0xF0	; 240
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	8b e3       	ldi	r24, 0x3B	; 59
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <writePins>
	LCD_latch();
  cc:	0e 94 42 00 	call	0x84	; 0x84 <LCD_latch>
	writePins(&PORTA,data_pins,LOW);
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	60 ef       	ldi	r22, 0xF0	; 240
  d4:	8b e3       	ldi	r24, 0x3B	; 59
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <writePins>
	writePins(&PORTA,((command<<4)&data_pins),HIGH);
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	c8 9f       	mul	r28, r24
  e0:	b0 01       	movw	r22, r0
  e2:	11 24       	eor	r1, r1
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	8b e3       	ldi	r24, 0x3B	; 59
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <writePins>
	LCD_latch();
  ee:	0e 94 42 00 	call	0x84	; 0x84 <LCD_latch>
  f2:	8d e0       	ldi	r24, 0x0D	; 13
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_send_cmd+0x4e>
  f8:	00 00       	nop
	_delay_us(40);
}
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <LCD_CLEAR>:
	LCD_CLEAR();
}

void LCD_CLEAR(void)
{
	LCD_send_cmd(CMD_CLR);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_send_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_CLEAR+0xa>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_CLEAR+0x10>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <LCD_init>:
#include "includes.h"


void LCD_init(void)
{
	pinsDirection(&data_ddr, data_pins, OUTPUT);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	60 ef       	ldi	r22, 0xF0	; 240
 116:	8a e3       	ldi	r24, 0x3A	; 58
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 8b 01 	call	0x316	; 0x316 <pinsDirection>
	pinsDirection(&ctr_ddr, ctr_pin, OUTPUT);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	6e e0       	ldi	r22, 0x0E	; 14
 122:	87 e3       	ldi	r24, 0x37	; 55
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 8b 01 	call	0x316	; 0x316 <pinsDirection>
	writePin(LCD_RW , LOW);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <writePin>
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	97 e2       	ldi	r25, 0x27	; 39
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_init+0x24>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_init+0x2a>
 13c:	00 00       	nop
	_delay_ms(40);
	LCD_send_cmd(CMD_RET);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_send_cmd>
 144:	8f e0       	ldi	r24, 0x0F	; 15
 146:	97 e2       	ldi	r25, 0x27	; 39
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_init+0x36>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_init+0x3c>
 14e:	00 00       	nop
	_delay_ms(40);
	LCD_send_cmd(CMD_CUR_INC);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_send_cmd>
	LCD_send_cmd(CMD_CUR_SIT);
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_send_cmd>
	LCD_send_cmd(CMD_SHIFT);
 15c:	80 e1       	ldi	r24, 0x10	; 16
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_send_cmd>
	LCD_send_cmd(CMD_FUN_SET);
 162:	88 e2       	ldi	r24, 0x28	; 40
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_send_cmd>
	LCD_CLEAR();
 168:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_CLEAR>
 16c:	08 95       	ret

0000016e <LCD_send_data>:
	LCD_latch();
	_delay_us(40);
}

void LCD_send_data(u8 data)
{
 16e:	cf 93       	push	r28
 170:	c8 2f       	mov	r28, r24
	writePin(LCD_RS,HIGH);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	89 e0       	ldi	r24, 0x09	; 9
 176:	0e 94 e6 00 	call	0x1cc	; 0x1cc <writePin>
	writePins(&PORTA,data_pins,LOW);
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	60 ef       	ldi	r22, 0xF0	; 240
 17e:	8b e3       	ldi	r24, 0x3B	; 59
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <writePins>
	writePins(&PORTA,(data&data_pins),HIGH);
 186:	6c 2f       	mov	r22, r28
 188:	60 7f       	andi	r22, 0xF0	; 240
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	8b e3       	ldi	r24, 0x3B	; 59
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <writePins>
	LCD_latch();
 194:	0e 94 42 00 	call	0x84	; 0x84 <LCD_latch>
	writePins(&PORTA,data_pins,LOW);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	60 ef       	ldi	r22, 0xF0	; 240
 19c:	8b e3       	ldi	r24, 0x3B	; 59
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <writePins>
	writePins(&PORTA,((data<<4)&data_pins),HIGH);
 1a4:	80 e1       	ldi	r24, 0x10	; 16
 1a6:	c8 9f       	mul	r28, r24
 1a8:	b0 01       	movw	r22, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	8b e3       	ldi	r24, 0x3B	; 59
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <writePins>
	LCD_latch();
 1b6:	0e 94 42 00 	call	0x84	; 0x84 <LCD_latch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	8d e0       	ldi	r24, 0x0D	; 13
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_send_data+0x4e>
 1c0:	00 00       	nop
	_delay_us(40);
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <disp_char>:
	writePin(LCD_E,LOW);
	_delay_us(40);
}
void disp_char(u8 letter)
{
	LCD_send_data(letter);
 1c6:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_send_data>
 1ca:	08 95       	ret

000001cc <writePin>:
		result=GETBit(PINC,pinNo-16);
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,pinNo-24);
	else{}
	return result;
}
 1cc:	88 30       	cpi	r24, 0x08	; 8
 1ce:	f8 f4       	brcc	.+62     	; 0x20e <writePin+0x42>
 1d0:	61 30       	cpi	r22, 0x01	; 1
 1d2:	69 f4       	brne	.+26     	; 0x1ee <writePin+0x22>
 1d4:	4b b3       	in	r20, 0x1b	; 27
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	b9 01       	movw	r22, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <writePin+0x16>
 1de:	66 0f       	add	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	8a 95       	dec	r24
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <writePin+0x12>
 1e6:	cb 01       	movw	r24, r22
 1e8:	84 2b       	or	r24, r20
 1ea:	8b bb       	out	0x1b, r24	; 27
 1ec:	08 95       	ret
 1ee:	61 11       	cpse	r22, r1
 1f0:	82 c0       	rjmp	.+260    	; 0x2f6 <writePin+0x12a>
 1f2:	4b b3       	in	r20, 0x1b	; 27
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	b9 01       	movw	r22, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <writePin+0x34>
 1fc:	66 0f       	add	r22, r22
 1fe:	77 1f       	adc	r23, r23
 200:	8a 95       	dec	r24
 202:	e2 f7       	brpl	.-8      	; 0x1fc <writePin+0x30>
 204:	cb 01       	movw	r24, r22
 206:	80 95       	com	r24
 208:	84 23       	and	r24, r20
 20a:	8b bb       	out	0x1b, r24	; 27
 20c:	08 95       	ret
 20e:	98 ef       	ldi	r25, 0xF8	; 248
 210:	98 0f       	add	r25, r24
 212:	98 30       	cpi	r25, 0x08	; 8
 214:	18 f5       	brcc	.+70     	; 0x25c <writePin+0x90>
 216:	61 30       	cpi	r22, 0x01	; 1
 218:	79 f4       	brne	.+30     	; 0x238 <writePin+0x6c>
 21a:	48 b3       	in	r20, 0x18	; 24
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 97       	sbiw	r24, 0x08	; 8
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <writePin+0x60>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <writePin+0x5c>
 230:	cb 01       	movw	r24, r22
 232:	84 2b       	or	r24, r20
 234:	88 bb       	out	0x18, r24	; 24
 236:	08 95       	ret
 238:	61 11       	cpse	r22, r1
 23a:	5d c0       	rjmp	.+186    	; 0x2f6 <writePin+0x12a>
 23c:	48 b3       	in	r20, 0x18	; 24
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	08 97       	sbiw	r24, 0x08	; 8
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	b9 01       	movw	r22, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <writePin+0x82>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	8a 95       	dec	r24
 250:	e2 f7       	brpl	.-8      	; 0x24a <writePin+0x7e>
 252:	cb 01       	movw	r24, r22
 254:	80 95       	com	r24
 256:	84 23       	and	r24, r20
 258:	88 bb       	out	0x18, r24	; 24
 25a:	08 95       	ret
 25c:	90 ef       	ldi	r25, 0xF0	; 240
 25e:	98 0f       	add	r25, r24
 260:	98 30       	cpi	r25, 0x08	; 8
 262:	18 f5       	brcc	.+70     	; 0x2aa <writePin+0xde>
 264:	61 30       	cpi	r22, 0x01	; 1
 266:	79 f4       	brne	.+30     	; 0x286 <writePin+0xba>
 268:	45 b3       	in	r20, 0x15	; 21
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	40 97       	sbiw	r24, 0x10	; 16
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	b9 01       	movw	r22, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <writePin+0xae>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <writePin+0xaa>
 27e:	cb 01       	movw	r24, r22
 280:	84 2b       	or	r24, r20
 282:	85 bb       	out	0x15, r24	; 21
 284:	08 95       	ret
 286:	61 11       	cpse	r22, r1
 288:	36 c0       	rjmp	.+108    	; 0x2f6 <writePin+0x12a>
 28a:	45 b3       	in	r20, 0x15	; 21
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	40 97       	sbiw	r24, 0x10	; 16
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <writePin+0xd0>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <writePin+0xcc>
 2a0:	cb 01       	movw	r24, r22
 2a2:	80 95       	com	r24
 2a4:	84 23       	and	r24, r20
 2a6:	85 bb       	out	0x15, r24	; 21
 2a8:	08 95       	ret
 2aa:	98 ee       	ldi	r25, 0xE8	; 232
 2ac:	98 0f       	add	r25, r24
 2ae:	98 30       	cpi	r25, 0x08	; 8
 2b0:	10 f5       	brcc	.+68     	; 0x2f6 <writePin+0x12a>
 2b2:	61 30       	cpi	r22, 0x01	; 1
 2b4:	79 f4       	brne	.+30     	; 0x2d4 <writePin+0x108>
 2b6:	42 b3       	in	r20, 0x12	; 18
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	48 97       	sbiw	r24, 0x18	; 24
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	b9 01       	movw	r22, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <writePin+0xfc>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	8a 95       	dec	r24
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <writePin+0xf8>
 2cc:	cb 01       	movw	r24, r22
 2ce:	84 2b       	or	r24, r20
 2d0:	82 bb       	out	0x12, r24	; 18
 2d2:	08 95       	ret
 2d4:	61 11       	cpse	r22, r1
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <writePin+0x12a>
 2d8:	42 b3       	in	r20, 0x12	; 18
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	48 97       	sbiw	r24, 0x18	; 24
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	b9 01       	movw	r22, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <writePin+0x11e>
 2e6:	66 0f       	add	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	8a 95       	dec	r24
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <writePin+0x11a>
 2ee:	cb 01       	movw	r24, r22
 2f0:	80 95       	com	r24
 2f2:	84 23       	and	r24, r20
 2f4:	82 bb       	out	0x12, r24	; 18
 2f6:	08 95       	ret

000002f8 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 2f8:	41 30       	cpi	r20, 0x01	; 1
 2fa:	29 f4       	brne	.+10     	; 0x306 <writePins+0xe>
		SETBits(*port,mask);
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 81       	ld	r18, Z
 300:	62 2b       	or	r22, r18
 302:	60 83       	st	Z, r22
 304:	08 95       	ret
	else if(logic==LOW)
 306:	41 11       	cpse	r20, r1
 308:	05 c0       	rjmp	.+10     	; 0x314 <writePins+0x1c>
		CLRBits(*port,mask);
 30a:	fc 01       	movw	r30, r24
 30c:	20 81       	ld	r18, Z
 30e:	60 95       	com	r22
 310:	62 23       	and	r22, r18
 312:	60 83       	st	Z, r22
 314:	08 95       	ret

00000316 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	29 f4       	brne	.+10     	; 0x324 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 31a:	fc 01       	movw	r30, r24
 31c:	20 81       	ld	r18, Z
 31e:	62 2b       	or	r22, r18
 320:	60 83       	st	Z, r22
 322:	08 95       	ret
	else if(direction == INPUT)
 324:	41 11       	cpse	r20, r1
 326:	05 c0       	rjmp	.+10     	; 0x332 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 328:	fc 01       	movw	r30, r24
 32a:	20 81       	ld	r18, Z
 32c:	60 95       	com	r22
 32e:	62 23       	and	r22, r18
 330:	60 83       	st	Z, r22
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
